<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TSDF算法</title>
    <url>/2021/12/23/TSDF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>具体学习于 <a href="https://github.com/andyzeng/tsdf-fusion">https://github.com/andyzeng/tsdf-fusion</a></p>
<h3 id="Why-TSDF"><a href="#Why-TSDF" class="headerlink" title="Why TSDF"></a>Why TSDF</h3><p>三维重建首当其冲的问题是如何保存以及如何表示模型，通常而言会有点云，mesh等；<br>但是对于室内三维重建，TSDF是一个不错的选择，其优点是</p>
<ul>
<li>非常适合CUDA并行运算，从而达到实时。</li>
<li>开辟固定的内存/显存，模型大小相对可控</li>
<li>模型大小不随数据量变化，网格的细节比较好<br>缺点：CPU计算耗时，在边缘以及前后景交界出现拖尾现象（体素g在像素坐标系投影有一定的误差）</li>
</ul>
<h3 id="How-TSDF"><a href="#How-TSDF" class="headerlink" title="How TSDF"></a>How TSDF</h3><p>1.建立长方体包围盒（能包住房间，一般预设参数：可通过设定划分网格以及网格大小得到)<br>2.将每个体素v转化成三维座标点g(根据模型起点和网格推算)<br>3.对于新来的每一帧深度图：<br>    遍历每一个体素g：<br>        3.1.根据相机外参，将g在世界坐标系转换到相机坐标系的点c,再由相机内参转换到像素坐标系x;<br>        3.2.深度相机像素深度为value(x),点c到相机坐标原点的距离为distance(v)<br>        3.3.sdf(g) = value(x) - distance(v).<br>        3.4.求tsdf(g).<code>预设截断距离t = voxel_size * t_n, 则t以内，tsdf(g) = sdf(p)/|u|;在t以外时，if sdf(p)&gt;1, tsdf(p) = 1;if sdf(p)&lt;-1, tsdf(p)=-1;</code><br>        3.5.权重w(p) = cos(theta)/distance(v), theta为投影光线与表面法向的夹角<br>至此，得到当前帧所有体素的tsdf值以及权重值<br>4.当前帧与全局模型融合<br>    4.1 若当前帧为第一帧，即为融合结果；否则与之前的模型融合,公式如下，其中W(p)为融合权重，w(p)为当前帧权重<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTEzMzY5Ni02ZWY1Yzk2YWUwMWFlNTZmLnBuZw?x-oss-process=image/format,png"></p>
<h3 id="Detail-and-Analysis"><a href="#Detail-and-Analysis" class="headerlink" title="Detail and Analysis"></a>Detail and Analysis</h3>]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>SLAM</tag>
      </tags>
  </entry>
  <entry>
    <title>UNIX_Tutorial</title>
    <url>/2021/12/27/UNIX-Tutorial/</url>
    <content><![CDATA[<p>Unix和Linux的基本指令<br><a href="http://www.ee.surrey.ac.uk/Teaching/Unix/">http://www.ee.surrey.ac.uk/Teaching/Unix/</a></p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>内核(Kernel): 分配时钟和内存给程序和处理文件存储以及系统交互<br>Shell:用户和内核的命令交互<br>UNIX中要么时文件，要么是程序</p>
<h3 id="Tutorial-One-amp-Two"><a href="#Tutorial-One-amp-Two" class="headerlink" title="Tutorial One &amp; Two"></a>Tutorial One &amp; Two</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ls -a</span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line"><span class="comment">// search sci in file.txt</span></span><br><span class="line"><span class="comment">// Method 1</span></span><br><span class="line">less file.txt</span><br><span class="line">/sci  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Method 2</span></span><br><span class="line">grep sci file.txt <span class="comment">//-i mean &#x27;ignore up/low case&#x27;</span></span><br><span class="line"></span><br><span class="line">wc -l file.txt  <span class="comment">// count line in file.txt</span></span><br><span class="line"></span><br><span class="line">clear <span class="comment">// clean monitor</span></span><br></pre></td></tr></table></figure>

<h3 id="Tutorial-Three-amp-Four"><a href="#Tutorial-Three-amp-Four" class="headerlink" title="Tutorial Three &amp; Four"></a>Tutorial Three &amp; Four</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cat &gt; list1  <span class="comment">// output to list1</span></span><br><span class="line">cat &gt;&gt; list1 <span class="comment">// append to list1</span></span><br><span class="line">cat list1 list2 &gt; biglist <span class="comment">// concat list1 and list2 to biglist</span></span><br><span class="line"></span><br><span class="line">sort &lt; biglist &gt; slist <span class="comment">// sort biglist and output to slist</span></span><br><span class="line">command1 | command2  <span class="comment">// pipe the output of command1 to the input of command2</span></span><br><span class="line"></span><br><span class="line">ls list*</span><br><span class="line">ls ?list</span><br><span class="line"></span><br><span class="line"><span class="comment">// getting help</span></span><br><span class="line">man wc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Command</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>command &gt; file</td>
<td>redirect standard output to a file</td>
</tr>
<tr>
<td>command &gt;&gt; file</td>
<td>append standard output to a file</td>
</tr>
<tr>
<td>command &lt; file</td>
<td>redirect standard input from a file</td>
</tr>
<tr>
<td>command1 | command2</td>
<td>pipe output of command1 to input of command2</td>
</tr>
<tr>
<td>who</td>
<td>list users currently logged</td>
</tr>
</tbody></table>
<h3 id="Tutorial-Five-amp-Six"><a href="#Tutorial-Five-amp-Six" class="headerlink" title="Tutorial Five &amp; Six"></a>Tutorial Five &amp; Six</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ls -l</span><br><span class="line"></span><br><span class="line">-rwxrw-r-- <span class="number">1</span> ee51ab beng95 <span class="number">2450</span> Sept29 <span class="number">11</span>:<span class="number">52</span> file1</span><br><span class="line"></span><br><span class="line"><span class="comment">// read/write/execute rights in owner/group/everyone</span></span><br><span class="line"><span class="comment">// file_size time file_name</span></span><br><span class="line"></span><br><span class="line">chmod a+x ex <span class="comment">// add permission to execute ex to all</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Symbol</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>u</td>
<td>user</td>
</tr>
<tr>
<td>g</td>
<td>group</td>
</tr>
<tr>
<td>o</td>
<td>other</td>
</tr>
<tr>
<td>a</td>
<td>all</td>
</tr>
<tr>
<td>r</td>
<td>read</td>
</tr>
<tr>
<td>w</td>
<td>write and delete</td>
</tr>
<tr>
<td>x</td>
<td>execute and access directory</td>
</tr>
<tr>
<td>+</td>
<td>add permission</td>
</tr>
<tr>
<td>-</td>
<td>take away permission</td>
</tr>
</tbody></table>
<h4 id="summary-of-process-control"><a href="#summary-of-process-control" class="headerlink" title="summary of process control"></a>summary of process control</h4><p>foreground: terminal suspend and wait<br>background: terminal can go on</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>ls -lag</td>
<td>list access rights for all files</td>
</tr>
<tr>
<td>chmod [options] file</td>
<td>change access rights for named file</td>
</tr>
<tr>
<td>command &amp;</td>
<td>run command in background</td>
</tr>
<tr>
<td>^C</td>
<td>kill the job running in the forground</td>
</tr>
<tr>
<td>^Z</td>
<td>suspend the job running in the foreground</td>
</tr>
<tr>
<td>jobs</td>
<td>list current jobs</td>
</tr>
<tr>
<td>bg %2</td>
<td>background the suspended job</td>
</tr>
<tr>
<td>fg %1</td>
<td>foreground job number 1</td>
</tr>
<tr>
<td>kill %1</td>
<td>kill job number 1</td>
</tr>
<tr>
<td>ps</td>
<td>list current processes</td>
</tr>
<tr>
<td>kill 310</td>
<td>kill process id 310</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">df .  <span class="comment">// report space left on the file system</span></span><br><span class="line">ls -lh</span><br><span class="line">gzip</span><br><span class="line">gunzip  <span class="comment">// unzip</span></span><br><span class="line">tar -xvf .tar <span class="comment">// extract</span></span><br><span class="line">diff file1 file2  <span class="comment">// &lt; denotes file1, &gt; denotes file2</span></span><br><span class="line"></span><br><span class="line">history <span class="comment">// terminal history</span></span><br><span class="line">!! <span class="comment">// recall last command</span></span><br><span class="line">!<span class="number">-3</span> <span class="comment">// recall third most recent command</span></span><br><span class="line">!grep <span class="comment">// recall last command starting with grep</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Tutorial-Seven-amp-Eight"><a href="#Tutorial-Seven-amp-Eight" class="headerlink" title="Tutorial Seven &amp; Eight"></a>Tutorial Seven &amp; Eight</h3><p>Install software:</p>
<ol>
<li>Locate and download the source code(which is usually compressed)</li>
<li>Unpack the source code</li>
<li>Compile the code(Most difficult)</li>
<li>Install the resulting executable</li>
<li>Set paths to the installation directory</li>
</ol>
<p><strong>make</strong>:manage large programs and only compiling those parts changed<br><strong>Makefile</strong>: record the related make rules, contains information on how to compile the software.</p>
<p>Some simplest way to compile a package:</p>
<ol>
<li><strong>cd</strong> to the directory containing the packages’ source code.</li>
<li>Type <strong>./configure</strong> to configure the package for your system</li>
<li>Type <strong>make</strong> to compile the package</li>
<li>Optionally, type <strong>make check</strong> to run any self0tests that come with the package.</li>
<li>Type <strong>make install</strong> to install the programs and any data files and documentation.</li>
<li>Optionally, type <strong>make clean</strong> to remove the program binaries and object files from the source code directory.</li>
</ol>
<h4 id="UNIX-variables"><a href="#UNIX-variables" class="headerlink" title="UNIX variables"></a>UNIX variables</h4><p>two categories: Environment variables, Shell variables<br>Shell variables: apply only to the current instance of shell and set short-term working conditions.<br>Environment variables: system environment with UPPER CASE name</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">echo $PATH <span class="comment">// print system environment</span></span><br><span class="line">set PATH=($PATH ~/new_path/)  <span class="comment">// add path to PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>常用指令</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>盐选健康</title>
    <url>/2022/01/21/%E7%9B%90%E9%80%89%E5%81%A5%E5%BA%B7/</url>
    <content><![CDATA[<h3 id="优雅起床"><a href="#优雅起床" class="headerlink" title="优雅起床"></a>优雅起床</h3><p>熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.</p>
<p>如何优雅起床：</p>
<ol>
<li>早起一杯温白开</li>
<li>感受阳光感受风，开窗通风</li>
<li>刷牙洗鼻如厕</li>
<li>吃好早餐</li>
<li>洗臉：干性用冷水，油性用热水</li>
</ol>
<p>起床三不要：</p>
<ol>
<li>不要起床太快，可以先拉伸慢慢活动开</li>
<li>晨练不要太剧烈，八段锦</li>
<li>如厕不能太用力，自然而为</li>
</ol>
<p>避免起床气，其成因：混乱性觉醒，避险本能；不吃早餐危害：肥胖</p>
<p>完美早餐 = 主食 + 蛋白质 + 蔬菜 + 水果<br>主食可配粗粮红薯、玉米、红豆、紫米等</p>
<h3 id="早高峰养生"><a href="#早高峰养生" class="headerlink" title="早高峰养生"></a>早高峰养生</h3><p>正常脖子需成熟头部的压力约4～5公斤，但低头幅度达45度时，相当于顶着10瓶大可乐，应尽可能减少低头。长期前伸容易导致肌肉疼痛僵硬，久而久之出现劳损和椎间盘突出；影响心血管健康，血循环及脑供氧。莫憋屁尿，憋尿坏处多。</p>
<h3 id="对抗久坐"><a href="#对抗久坐" class="headerlink" title="对抗久坐"></a>对抗久坐</h3><p>久坐的坏处：肥胖，腿部血液流速减慢，大量静脉血淤积在小腿，肌肉和韧带等组织过度拉伸的酸胀，使人处于低代谢水平，影响内分泌功能。</p>
<p>解决方法：寻找站立办公的机会，多走动。小水杯，多厕所，绕远路.</p>
<p>正确坐姿：抬头挺胸收腹，目视前方</p>
<p>头部米字操，锻炼颈部后方肌肉</p>
<p>枕头：压缩后一拳大小，别太软要有支撑</p>
<p>改善腰部：桥式，飞燕，平板支撑</p>
<h3 id="关于午休"><a href="#关于午休" class="headerlink" title="关于午休"></a>关于午休</h3><p>吃完睡并不会长胖，多吃或者睡完又吃才会。午睡讲究火候，一般10-20恰到好处，起来神清气爽；如果超过一个小时则进入完全睡眠，起来身体很疲惫。</p>
<p>晚上难入睡的伙伴，建议中午攒攒睡意，等到晚上再一口气休息好。<br>善用垫枕和U型枕，尽量躺睡，如果不睡觉建议听点音乐作休息，另外善用降噪耳机。</p>
<h3 id="关于外卖"><a href="#关于外卖" class="headerlink" title="关于外卖"></a>关于外卖</h3><p>正规店家要求《餐饮服务许可证》和《营业执照》<br>远离三种菜：干煸/干锅，“水煮”，炒土豆三鲜等；少油少盐少淀粉。<br>油脂单位热量高，而且代谢困难。减少油炸，重油食品，而且大部分吃到的油不新鲜，进入身体代谢严重影响健康。点菜要避免眼大肚小，饿的时候容易点多。更绝的是可以把油先蹭掉再蘸料吃，实现味道与健康的双赢。</p>
<p>爱吃炸鸡的朋友，可以把鸡皮扒开吃，尽量摄入非常油的食品。</p>
<p>针对甜点欲望，可以慢节奏吃+喝水，有效缓解甜品的高热量诱惑。<br>另外要打破杜绝浪费的观念，针对不健康的食品应该果断浪费，因为引起的健康问题反而得不偿失！</p>
<h3 id="关于晚饭"><a href="#关于晚饭" class="headerlink" title="关于晚饭"></a>关于晚饭</h3><p>正常是规律进食，除非当天中午或者下午吃多了，热量摄入足够了。再就是晚上8～9点入睡的朋友也可不吃，因为睡眠消耗比较小。</p>
<p>晚饭需要注意的是：1.早吃 2.不暴食 </p>
<h3 id="关于夜宵"><a href="#关于夜宵" class="headerlink" title="关于夜宵"></a>关于夜宵</h3><p>夜宵的吸引力：1.无聊 2.压力 3.心情不佳<br>可以选择牛奶燕麦粥，少放盐</p>
<h3 id="关于熬夜"><a href="#关于熬夜" class="headerlink" title="关于熬夜"></a>关于熬夜</h3><p>危害多，长期的睡眠不足比急性通宵的影响更大；严重影响身体机能，免疫力以及反映力等。</p>
<p>熬夜的主要原因：追剧，小说，游戏。一线普遍12点后睡，日均7.8小时。<br>只要生活规律，睡眠质量高，一觉醒来活力四射，元气满满，那么这样的作息就是适合你的。</p>
<h3 id="延缓衰老"><a href="#延缓衰老" class="headerlink" title="延缓衰老"></a>延缓衰老</h3><p>25岁后，人的衰老主要是基础代谢下降，预防衰老第一步是维持高水平的代谢率。皮肤衰老首要原因是紫外线，注意防晒。有光就有太阳，有太阳就有紫外线，有紫外线就会变老。</p>
<h4 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h4><p>主要方法：1.低油低糖不过饱，过度进食容易消化不良，影响肠胃正常运作 2.均衡饮食，三餐规律。</p>
<p>多摄入牛奶，酸奶和豆腐，高钙能缓解衰老。铁和锌，维生素ABCD等族群，起到意想不到的作用。</p>
<p>多摄入粗粮，粗粮最大的优点是带来饱腹感，膳食纤维能与脂肪和胆固醇结合，预防高血脂和脂肪肝等病。</p>
<p>减少多糖，糖基化是糖和蛋白质结合，使其失去正常的结构和颜色。</p>
<h4 id="快乐"><a href="#快乐" class="headerlink" title="快乐"></a>快乐</h4><p><code>傻人有傻福</code>，生活已经很苦，不要再给自己太大的压力，学会和自己和解，保持良好心情。长期高压下，导致失眠，毛孔粗大，脱发，皮肤暗沉等问题。试着让自己每天都快乐，接受和享受快乐。</p>
<h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>动起来，每天半小时的健身锻炼，让你的生理状态和精神面貌都年轻；长久不锻炼，肌肉会退化，人的反映也会变缓。</p>
<h3 id="关于零食"><a href="#关于零食" class="headerlink" title="关于零食"></a>关于零食</h3><p>每天一小包坚果是可行，但注意油炸和蟹黄等。可以考虑燕麦制品的零食，至于糖果巧克力则是甜蜜的负担，心情不好时可以来一下。最后果脯果干不能当水果吃，选择钠含量不超标的食物。辣条含钠量太高，基本卫生也无法保证，还是别吃了。同时也要减少吃冰制品。方便面垃圾不在于其他，只在于热量高，含盐量高，蛋白质和膳食纤维不足。尽量进食新鲜食材，而非加工制品。</p>
<p><code>胖子不是一口吃成的，你摄入的每一份糖和油脂都不是无辜的。</code></p>
<h3 id="生活中的建议"><a href="#生活中的建议" class="headerlink" title="生活中的建议"></a>生活中的建议</h3><ul>
<li>好好吃每一顿正餐，减少时长产生的饥饿感</li>
<li>保持学习和工作环境的清爽，不把零食放到容易看见的地方，人的意志很容易动摇，不要自己给自己设置考验</li>
<li>多喝水，有时你感觉饿了并不一定是身体真的缺少能量，也可能是缺水了，试试站起来倒杯水，补充水分，转移注意力，有时候就能骗过大脑</li>
<li>买小包装或者分装，拆开一大包容易全部吃完</li>
<li>定时摄入，稍微补充，而不是随时随地补充能量</li>
<li>千万不要一边看剧综艺一边零食，否则根本想象不到自己吃了多少<br>总之进食要注意糖、脂肪、热量、钠和蛋白质，尽量选低糖、低热量、低钠、高蛋白的食物，用全麦面包和燕麦来饱腹吧～</li>
</ul>
<h3 id="关于饮料"><a href="#关于饮料" class="headerlink" title="关于饮料"></a>关于饮料</h3><p>提神饮料可选茶叶，茶本身比较健康，无糖无脂低热量。咖啡可选美式，名字越好听越可能是健康陷阱。平时午饭后，可来一杯咖啡，小憩15-20分钟，即可在午后华丽转身。能量饮料中含有大量糖，而且咖啡因不能摄入过量，最多依赖茶叶，尽量不依赖功能饮料。</p>
]]></content>
      <categories>
        <category>身体健康</category>
      </categories>
      <tags>
        <tag>身体健康</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM十四讲_一预备及初识</title>
    <url>/2022/01/07/SLAMBOOK2/SLAMBOOK_1_2/</url>
    <content><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="SLAM：Simultaneous-Localization-and-Mapping"><a href="#SLAM：Simultaneous-Localization-and-Mapping" class="headerlink" title="SLAM：Simultaneous Localization and Mapping"></a>SLAM：Simultaneous Localization and Mapping</h4><p>同步定位及建图：搭载特定传感器的主体，在没有环境先验信息情况下，在运动过程中建立环境模型，同时估计自己位姿的过程。根据传感器分为深度相机，RGB相机和激光。不同传感器特点不一样，应用环境以及遇到的难点不同。本书主要是视觉SLAM：围绕RGB相机，也会引入Depth相机。</p>
<p>CV之初，人们想象有一天计算机将和人一样，通过眼睛去观察世界，理解周围的物体，探索未知的环境–这是一个美妙而又充满浪漫色彩的梦想，让无数科研人员日夜为之奋斗。</p>
<p>SLAM相关的应用点：室内扫地机，移动机器人；户外的自动驾驶以及空中无人机；乃至虚拟现实和增强现实设备。</p>
<p>SLAM研究的三十年，将主干分为四个大模块：</p>
<ul>
<li>前端里程计（求pose)：估计相邻图像相机的运动以及局部地图样子</li>
<li>后端优化（优化pose)：根据多个时刻的相机位姿以及回环检测进行优化，得到全局一致的轨迹和地图</li>
<li>建图：根据轨迹建立与任务要求对应的地图</li>
<li>回环检测（优化全局pose)：判断是否到达过先前的位置</li>
</ul>
<p>1.定位问题：我在什么地方？<br>2.建图问题：周围环境是什么样？<br>方法很多：室内可以在地板铺设导引线，在墙上贴二维码，在桌子放置无线电定位设备；室外可以安装定位设备（GPS）等<br>传感器主要两类：1.安装在本体上，如轮式编码器，IMU，相机，激光； 2.安装在环境上，上述提到的</p>
<h4 id="不同传感器的特性以及SLAM的影响"><a href="#不同传感器的特性以及SLAM的影响" class="headerlink" title="不同传感器的特性以及SLAM的影响"></a>不同传感器的特性以及SLAM的影响</h4><p>单目：图像是三维空间的二维投影，必须移动(Motion)才能估计结构(Structure).motion后只能根据视差估计相对的值，具有尺度不确定性。<br>问题：平移才能计算深度以及无法确定真实尺度，导致单目SLAM困难多多，但是成本较低。</p>
<p>双目：利于基线解决尺度不确定性，但视差的匹配依然效率不高，需要引入GPU和FPGA加速才能实时输出整张图的距离信息。双目测量距离受基线大小影响，所以无人车上一般搭载很大的家伙<br>问题：对于SLAM而言，传感器的配置与标定较为复杂。</p>
<p>RGB-D相机：通过TOF物理测量手段直接获得全图的深度信息<br>问题：低端TOF测量范围窄，噪声大，视野小；普遍存在日光干扰、无法测量投射材质以及高反高吸收率材质；所以主要用于室内应用，室外难以使用。</p>
<p>目前而言，如果工作环境理想：静态、刚体、光照变化小、没有人为干扰的场景，SLAM是相当成熟。</p>
<h4 id="整书结构"><a href="#整书结构" class="headerlink" title="整书结构"></a>整书结构</h4><p>1.数学基础</p>
<ul>
<li>SLAM概述</li>
<li>三维空间运动</li>
<li>李群和李代数</li>
<li>针孔模型及opencv</li>
<li>非线性优化</li>
</ul>
<p>2.技术实践</p>
<ul>
<li>特征点法的视觉里程计</li>
<li>直接法的视觉里程计</li>
<li>里程计实践</li>
<li>后端优化BA</li>
<li>后端优化位姿图</li>
<li>回环检测</li>
<li>地图构建</li>
<li>SLAM的未来</li>
</ul>
<p>基础知识须知：</p>
<ul>
<li>高等数学、线性代数、概率论</li>
<li>C++语言和Linux基础</li>
</ul>
<h4 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h4><p>1.有线性方程 Ax = b，当我们知道 A, b，想要求解 x 时，如何求解？这对 A 和 b 需要哪些条件？提示：从 A 的维度和秩角度来分析<br>1)<strong>b等于0</strong>, n元齐次线性方程组$A_(m*n)x=0$有非0解的充必条件是系数矩阵的秩$Rank(A)&lt;n$<br>2)<strong>b不等于0</strong>,非齐次线性方程组$Ax=b$有解的充必条件是系数矩阵的秩等与增广矩阵的秩； $R(A)=R(B)=n$，则有唯一解，$R(A)=R(B)&lt;n$则有无穷多解</p>
<ol start="2">
<li>高斯分布是什么？它的一维形式是什么样子？它的高维形式是什么样子？<br>又名正态分布，由于中心极限定理，任何分布的抽样分布样本足够大时，其渐进分布都是高斯分布。</li>
</ol>
<h3 id="初识SLAM"><a href="#初识SLAM" class="headerlink" title="初识SLAM"></a>初识SLAM</h3><p>目标：</p>
<ul>
<li>理解VSLAM各个模块</li>
<li>搭建环境</li>
<li>掌握基本CMAKE</li>
</ul>
<h4 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h4><p>传感器类型：机器人自身和环境上<br>自身传感：mono, stereo, rgbd, lidar， event camera, imu, 编码器及新式传感器</p>
<p>一些相关术语：</p>
<ul>
<li><strong>尺度不确定性</strong>：2d的rgb图像没有真实尺度信息</li>
<li>运动motion： 相机外参R， t</li>
<li>结构structure: 物体的远近和大小</li>
</ul>
<h4 id="经典VSLAM框架"><a href="#经典VSLAM框架" class="headerlink" title="经典VSLAM框架"></a>经典VSLAM框架</h4><p><img src="/images/02_25_01.png"><br>流程：</p>
<ul>
<li>1.传感器信息读取融合：将所有观测数据正确读入并预处理</li>
<li>2.视觉里程计VO：估算相邻图像间的运动以及局部地图的样子，又称前端</li>
<li>3.后端优化：接受不同时刻VO的相机位姿，以及回环检测的信息，一并优化获得全局一致的轨迹和地图</li>
<li>4.回环检测：判断机器人是否曾经到达过先前的位置，如果有则放到步骤3优化</li>
<li>5.建图：根据估计的轨迹，建立与任务要求对应的地图</li>
</ul>
<p>总体而言，如果把工作环境限定在静态、刚体以及光照变化不明显、没有人为干扰的场景，那么VSLAM系统相当成熟了</p>
<p>为什么叫<strong>里程计</strong>？ 因为它和实际的里程计一样，只计算相邻时刻的运动，而和再之前过去的信息没有关联。所以属于短时记忆的方案<br>因此也引起<strong>累计漂移</strong>：随着相邻估计的误差叠加，后续的误差会更大和不可控<br>因而引入<strong>后端优化</strong>和<strong>回环检测</strong>的技术来校正</p>
<p>后端主要处理SLAM过程的<strong>噪声</strong>问题，具体是如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大（Maximum-A-Posteriori),这里包括自身轨迹和地图。主要涉及滤波和非线性优化的算法。</p>
<p>回环检测主要让机器人具有识别曾到达过场景的能力，具体实施可以是二维码图片或者图像间的相似性。</p>
<p>最后建图包括度量和拓扑地图：2D栅格地图、2D拓扑地图、3D点云地图、3D网格地图；<br>度量地图：强调精确表示地图中物体的位置关系<br>拓扑地图：强调地图元素之间的关系，考虑节点间的连通性</p>
<h4 id="SLAM数学建模"><a href="#SLAM数学建模" class="headerlink" title="SLAM数学建模"></a>SLAM数学建模</h4><p>主要分为运动方程和观测方程，根据这两个方程是否线性以及噪声是否服从高斯分布进行分类，主要信息是位姿以及观测的路标</p>
<h4 id="CMAKE的使用"><a href="#CMAKE的使用" class="headerlink" title="CMAKE的使用"></a>CMAKE的使用</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">add_executable</span>(exe main.cpp) # 编译执行文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_library</span>(lib lib.cpp)  # 编译静态库 .<span class="function">a</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add_library</span><span class="params">(lib_shared SHARED lib.cpp)</span>  # 编译动态库 .so</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">(useLib useLib.cpp)</span>   <span class="meta"># cpp <span class="meta-keyword">include</span>动态库的头文件调用</span></span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(useLib lib_shared)</span>  # 将库文件链接到编译后的文件，最后链接生成最后的执行文件useLib</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 将库hello和共享库hello_shared安装到/usr/local/lib下</span></span><br><span class="line"><span class="function"><span class="title">INSTALL</span><span class="params">(TARGETS hello hello_shared</span></span></span><br><span class="line"><span class="params"><span class="function">LIBRARY DESTINATION lib</span></span></span><br><span class="line"><span class="params"><span class="function">ARCHIVE DESTINATION lib)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 将库的头文件安装到/usr/local/include下</span></span><br><span class="line"><span class="function"><span class="title">INSTALL</span><span class="params">(FILES libHelloSLAM.h DESTINATION include/libHelloSLAM)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 另外目录的项目调用，引入头文件</span></span><br><span class="line"><span class="function"><span class="title">include_directories</span><span class="params">(/usr/local/include/libHelloSLAM)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 链接库文件</span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(useHello /usr/local/lib/libhello_shared.so)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p>库文件是压缩包，包含编译好的二进制函数，但不知道函数是什么样和调用形式，所以需要结合<strong>头文件</strong>使用。只有拿到头文件和库文件才可以调用库。</p>
]]></content>
      <categories>
        <category>SLAMBOOK</category>
      </categories>
      <tags>
        <tag>SLAMBOOK</tag>
      </tags>
  </entry>
  <entry>
    <title>c++并发实战</title>
    <url>/2021/12/28/cpp/c-%E5%B9%B6%E5%8F%91%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="chap1-c-并发世界"><a href="#chap1-c-并发世界" class="headerlink" title="chap1 c++并发世界"></a>chap1 c++并发世界</h3><p>C++98的13年后，2011的C++11成为新的规范，同时确认了每三年发布新的扩展技术规范。<br>在C++11中，c++ standard第一次承认多线程存在于C++语言中，意味CPP编写与平台无关的多线程程序成为可能。以往编写多线程并发需要针对运行平台部署依赖扩展库，如今可移植性成为可能。</p>
<p><code>何谓并发和多线程？</code><br>单核的并发存在切换上下文的不必要损耗。<br>多线程：一个进程下，多个小单元共用数据资源，单机并发较常用，实际上CPP支持的是多线程。<br>多进程：开辟多个共用数据资源，多个进程并行，占用大量资源，通讯成本加大，适用于多机。</p>
<p>并行：关注性能； 并发：关注任务分离；</p>
<p><code>为什么要并发?</code>  </p>
<ol>
<li>关注分离：将相关代码与无关代码分离，使得程序更容易理解和测试。</li>
<li>关注性能：将任务并行以及可以将数据并行<br>不使用并发的原因：收益比不上成本，一方面脑力以及代码维护成本，一方面是线程资源。尤其32位地址的架构，<br>对于4G(32bit)的架构，每个线程占用1MB，那么开4096个就用尽所有地址，运行太多会出问题。对于现用的板子有1GB的内存可用。对于现用的64位PC，开一个线程ulimit -s可知为8MB;ulimit -u可以看当前可开多少个线程上限，64GB可开约26万个上限。<br>由于多线程使代码复杂且难以理解，只有显著提升性能才值得一干。</li>
</ol>
<h3 id="chap2-线程管理"><a href="#chap2-线程管理" class="headerlink" title="chap2 线程管理"></a>chap2 线程管理</h3><ul>
<li>线程启动：std::thread对象用函数或者类初始化的同时，开始自动启动线程。</li>
<li>线程等待与分离：join为等待线程执行完成；detach则让线程分离自主执行，此时访问已销毁的变量会引起错误。如果线程已使用过join,则不可再次join。joinable()返回false。<br>解决方法：将数据复制到线程中，可以总结用一个访问局部变量的函数创建线程是危险行为。</li>
<li>分离线程：通常又称守护线程，没有任何显式的用户接口并在后台运行的线程，通常长时间运行。</li>
<li>转移线程： thread2 = std::move(thread1);若thread2已有线程，则系统直接调用terminate结束错误。</li>
</ul>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++ 多线程 并发</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAMBOOK_3_4</title>
    <url>/2022/02/28/SLAMBOOK2/SLAMBOOK_3_4/</url>
    <content><![CDATA[<h3 id="三维空间刚体运动"><a href="#三维空间刚体运动" class="headerlink" title="三维空间刚体运动"></a>三维空间刚体运动</h3><p>目标：</p>
<ul>
<li>理解三维空间的刚体运动描述方式：旋转、变换、四元数和欧拉角</li>
<li>掌握Eigen库的矩阵和几何模块</li>
</ul>
<p>基本概念：<br>坐标：一方面与向量本身有关，另一方面与坐标系选取有关。<br>向量：可以是空间中的一样东西<br>外积可表示旋转：右手系叉乘<br>欧式变换：保证同一个向量在各个坐标系下的长度和夹角都不会变化，则可由一个旋转和平移组成<br>旋转矩阵的性质：行列式为1的正交矩阵，SO(n)是特殊正交群<br>齐次坐标：把旋转和平移写入一个矩阵，且保持整个关系为线性关系<br>变换矩阵T：左上为旋转，右侧为平移，左下为0，右下为1的特殊欧式群</p>
<h4 id="旋转的表达"><a href="#旋转的表达" class="headerlink" title="旋转的表达"></a>旋转的表达</h4><p>1.旋转矩阵：正交阵且行列式为1,行列向量相互正交；内积为0；</p>
<p>2.三个旋转轴和旋转角：使用一个向量，方向与旋转轴一致，长度等于旋转角，即李代数。由Rodrigues’s Formula可得：$R = cos\theta I + (1-cos\theta)nn^T + sin\theta n^`$ 其中n’是向量到反对称的转换符，从旋转矩阵到旋转向量转换$\theta = arccos(\frac{tr(R)-1}{2})$<br>转轴n是矩阵R特征值1对应的特征向量。解此方程归一化可得旋转轴。</p>
<p>3.欧拉角：分离成三次绕坐标轴旋转即yaw-pitch-roll.注意著名的<strong>万向锁</strong>问题，+-90度时，丢失一个自由度，产生奇异性问题。因此不适于插值和迭代，往往只用于人机交互。</p>
<p>4.四元数：既是紧凑的，也没有奇异性的旋转表达。缺点不够直观和运算复杂。<br>熟悉相互表达之间的转换。</p>
<h4 id="相似、仿射、射影变换"><a href="#相似、仿射、射影变换" class="headerlink" title="相似、仿射、射影变换"></a>相似、仿射、射影变换</h4><p>1.相似： $T_s = [sR t]$, 7个自由度，xyz坐标上均匀缩放<br>2.仿射： $T_A = [A t]$, 12个自由度，A是可逆矩阵而不必是正交矩阵<br>3.射影： $T_p $, 15个自由度，最不规则的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Eigen rotate data structure</span></span><br><span class="line">Eigen::Matrix3d;  <span class="comment">// 3*3 R matrix</span></span><br><span class="line">Eigen::AngleAxisd;  <span class="comment">// 3*1 R vector</span></span><br><span class="line">Eigen::Vector3d;   <span class="comment">// 3*1 Euler Angle</span></span><br><span class="line">Eigen::Quaterniond;  <span class="comment">// 4*1 quaternion</span></span><br><span class="line">Eigen::Isometry3d;  <span class="comment">// 4*4 T transformed</span></span><br><span class="line">Eigen::Affine3d;   <span class="comment">// 4*4 affine matrix</span></span><br><span class="line">Eigen::Projective3d;  <span class="comment">// 4*4 projective matrix</span></span><br></pre></td></tr></table></figure>

<h3 id="李群与李代数"><a href="#李群与李代数" class="headerlink" title="李群与李代数"></a>李群与李代数</h3><p>目标：</p>
<ul>
<li>理解概念，掌握SO(3),SE(3)</li>
<li>理解BCH近似意义</li>
<li>李代数的扰动模型</li>
<li>运用Sohpus对李代数运算</li>
</ul>
<p>什么是Sophus? Sophus是Eigen的拓展，李代数库</p>
<p>为何引入李代数？ 旋转矩阵自身带有正交和行列式为1的约束，作为优化变量引入额外的约束使得优化困难。通过李群和李代数的转换关系，使位姿估计变成无约束的优化问题，简化求解方式。</p>
<h4 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h4><p>什么是群？ 一种集合加上一种运算的代数结构。封结幺逆<br>可以验证：</p>
<ul>
<li>旋转矩阵集合和矩阵乘法构成群</li>
<li>变换矩阵和矩阵乘法也构成群</li>
<li>因此它们为旋转矩阵群和交换矩阵群</li>
</ul>
<p>矩阵中常见的群：</p>
<ul>
<li>一般线性群GL(n) : n*n的可逆矩阵，对矩阵乘法成群</li>
<li>特殊正交群SO(n) : 旋转矩阵群SO(2)和SO(3)</li>
<li>特殊欧式群SE(n) : 前面的n维欧式变换， SE(2)和SE(3)</li>
</ul>
<p>什么是李群Lie Group？ 指具有连续（光滑）性质的群，既是群也是流形。整数群是离散的，不属于。而SO和SE在实数空间连续运动，所以属于李群。SO(3)和SE(3)只有定义良好的乘法，没有加法所以难以进行取极限和求导的操作。将旋转矩阵用李代数逼近迭代优化。</p>
<p>一种李代数（小写）对应一种李群（大写）。</p>
<p>$RR^T = I$ 对连续时间求导得 $ R^, R^T = -(R^, R^T )^T $, $R^,$为对时间t的导数。即满足反对称矩阵。最后得$R(t) = exp(\phi_0t)$<br>这表示：</p>
<ul>
<li>1.给定某时刻的R，我们能求一个$\phi$描述R在局部的导数关系，正切空间邻域。$\phi$正是SO(3)上的李代数so(3)</li>
<li>2.矩阵指数如何计算？事实上这正是李群与李代数之间的指数/对数映射</li>
</ul>
<p>什么是李代数？ 每个李群对应一个李代数，描述了李群单位元数的正切空间性质。满足封闭性、双线性、自反性、雅可比等价</p>
<p>什么是李括号？二元运算，表达了两个元素的差异。</p>
<h4 id="指数与对数映射"><a href="#指数与对数映射" class="headerlink" title="指数与对数映射"></a>指数与对数映射</h4><p>// To do 后续补充，本章涉及较多数学和公式</p>
]]></content>
      <categories>
        <category>SLAMBOOK</category>
      </categories>
      <tags>
        <tag>SLAMBOOK</tag>
      </tags>
  </entry>
  <entry>
    <title>LSAMBOOK_5_6</title>
    <url>/2022/03/04/SLAMBOOK2/SLAMBOOK_5_6/</url>
    <content><![CDATA[<h3 id="相机与图像"><a href="#相机与图像" class="headerlink" title="相机与图像"></a>相机与图像</h3><p>本章目标：</p>
<ul>
<li>理解针孔模型、内参以及径向畸变参数</li>
<li>理解空间点如何投影到相机成像平面</li>
<li>掌握OpenCV图像存储与表达</li>
<li>掌握基本的摄像头标定方法</li>
</ul>
<h4 id="针孔模型"><a href="#针孔模型" class="headerlink" title="针孔模型"></a>针孔模型</h4><p>三维空间点与相机成像平面建模关系<br>$$\frac{Z}{f} =  \frac{X}{X^,} = \frac{Y}{Y^,}$$</p>
<p>像素坐标系与成像平面间相差了一个<strong>缩放</strong>和<strong>原点的平移</strong>： $u = \alpha X^, + c_x, v=\beta Y^, + c_y$</p>
<p>将空间点与成像平面的公式代入，习惯性把Z左挪得到下式<br><img src="images/03_04_1.png">.其中f单位为米，$\alpha，\beta$单位为像素每米，$f_x,f_y$单位为像素。K为相机内参，通常厂商会帮你标定给出，有时候需要自己确定或精细测量，就是<strong>摄像头标定</strong>。</p>
<p>为了更好成像效果，通常加入透镜，因此带来影响：1.透镜自身形状对光线传播的影响；2.机械组装透镜与成像平面不可能完全平行； 因此引入径向畸变和桶形畸变，它们引入的畸变均随着离中心的距离增加而增加。</p>
<p>纠正畸变过程：</p>
<ul>
<li>1.将三维空间点投影到归一化图像平面，坐标为$[x,y]^T$</li>
<li>2.归一化平面的点进行经过5个参数进行径向和切向畸变校正：<br>$$x_{corrected} = x(1+k_1r^2+k_2r^4+k_3r^6) +2p_1xy +p_2(r^2+2x^2) $$<br>$$y_{corrected} = y(1+k_1r^2 +k_2r^4+k_3r^6)+p_1(r^2+2y^2)+2p_2xy$$</li>
<li>3.纠正后的点通过内参矩阵投影到像素平面，得到图像上正确的位置，生成新的纠正后的图像<br>$$u=f_xx_{corrected}+c_x$$<br>$$v=f_yy_{corrected}+c_y$$</li>
</ul>
<p>总结单目相机成像过程：</p>
<ul>
<li>1.首先世界坐标系下有一个固定点P，世界坐标为$P_w$</li>
<li>2.由于相机在运动，它运动由R,t或者变换矩阵T描述。P的相机坐标为$\hat{P_c} = RP_w +t$</li>
<li>3.此时$\hat{P_c}$仍由X，Y，Z三个量表示，需要投影到归一化平面Z=1上，得到P的归一化相机坐标：$P_c=[X/Z,Y/Z,1]^T$</li>
<li>4.最后将归一化坐标经过内参对应到像素坐标：$P_{uv}=KP_c$</li>
</ul>
<p>个人思考：归一化坐标主要因为内参标定建立在一个参考平面，最general的就是建立在z=1米的参考平面上。这是由内参标定的参考平面决定的。</p>
<h4 id="双目模型"><a href="#双目模型" class="headerlink" title="双目模型"></a>双目模型</h4><p>水平放置左右相机在x轴上位移，有基线b。将左右成像中的像素匹配，求出视差图d。结合模型获得深度图。视差越大，距离越近。基线长则测得距离远，计算量和精度问题，且需要图像纹理丰富变化。</p>
<h4 id="RGBD相机"><a href="#RGBD相机" class="headerlink" title="RGBD相机"></a>RGBD相机</h4><p>红外结构光：Intel RealSense 以及面TOF相机<br><img src="/images/03_16_1.png"></p>
<h3 id="非线性优化"><a href="#非线性优化" class="headerlink" title="非线性优化"></a>非线性优化</h3><p>目标：</p>
<ul>
<li>理解最小二乘含义和处理方式</li>
<li>理解高斯牛顿和LM下降</li>
<li>学习Ceres和g2o用法</li>
</ul>
<p>EKF不考虑历史，只关心当前时刻的状态估计；而非线性优化使用了所有时刻采集的数据进行状态估计。</p>
<p><img src="/images/3_17_1.png"><br>贝叶斯法则，x为相机位姿，z为路标在图像上的像素位置。进一步，假设观测路标与位姿满足高斯分布，用<strong>最小化负对数</strong>可便利地求MLE。</p>
<p>直观而言，由于观测和运动方程噪声存在，当把估计的轨迹与地图代入SLAM模型时，方程组不会完美成立。因此对位姿的估计值进行微调，使得总体误差下降，当降到极小值即优化完毕。这就是典型的非线性优化过程。<br><img src="/images/3_17_2.png"></p>
<p>SLAM的最小二乘具有特定结构：</p>
<ul>
<li>目标函数由许多个误差的平方和组成，每个误差项只与上一时刻相关，小规模的约束</li>
<li>总体误差的增量方程具有一定的稀疏性</li>
<li>使用李代数时为无约束的最小二乘问题，若旋转矩阵引入额外约束而复杂</li>
<li>可用其他范数构建优化问题</li>
</ul>
<h4 id="最小二乘问题"><a href="#最小二乘问题" class="headerlink" title="最小二乘问题"></a>最小二乘问题</h4><p>$$min_x \frac{1}{2} ||f(x)||_2^2$$<br>若f(x)形式简单，可用解析解对f求x上的导数为0的极值点，再回代比较；但是SLAM的李代数导数形式时非线性方程，所以要用计算机中迭代的过程逼近：</p>
<ul>
<li>1.给定初始值$x_0$</li>
<li>2.对第k次迭代寻找增量$\Delta x_k$使目标函数极小</li>
<li>3.若$\Delta x_k$足够小（位姿误差），则停止</li>
<li>4.否则$x_(k+1) = x_k + \Delta x_k$,继续2.<br>只需要找到local minimum,主要问题变为如何确定增量$\Delta x_k$<br>导数展开，只取一阶导雅可比为0，最速下降法，但过于贪心容易锯齿反而增加迭代<br>只取二阶导为0则引入海塞矩阵，问题规模较大使二阶导系数H不容易计算。如此一来，便促使研究引入更为实用的高斯牛顿法和LM列文伯格-马夸尔特方法。</li>
</ul>
<h4 id="高斯牛顿下降法-line-search"><a href="#高斯牛顿下降法-line-search" class="headerlink" title="高斯牛顿下降法 line search"></a>高斯牛顿下降法 line search</h4><p><img src="/images/3_18_1.png"><br>不同于对x求导，这里对$\Delta x$求导<br><img src="/images/3_18_2.png"><br>如此GN用$J^TJ$作为牛顿法中二阶Hessian矩阵的近似，优化了计算。但要求保证近似H可逆正定。但实际中可能出现为奇异矩阵或者病态，此时增量稳定性不佳导致算法不收敛。虽然GN有不少问题，但很多实用方法是从这个思想优化延伸的。</p>
<h4 id="LM阻尼牛顿法"><a href="#LM阻尼牛顿法" class="headerlink" title="LM阻尼牛顿法"></a>LM阻尼牛顿法</h4><p>GN采用近似二阶泰勒只能在展开点附近有较好近似效果，因此对$\Delta x$添加信赖域区域，使它不能过大而不准确，这类方法也叫信赖区域法(Trust Region Method)。<br>如何确定可用的信赖区域？ 比较近似模型跟实际函数之间的差异<br><img src="/images/3_18_3.png"><br>工作流程：<br><img src="/images/3_18_4.png"></p>
<p>LM求解过程一定程度上避免线性方程组的系数矩阵非奇异和病态问题，提供更稳定准确的增量$\Delta x$</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>数值优化和最优化是解决实际问题中的基本数学工具，可以感兴趣多了解。<br>非线性优化的迭代求解方案均需要提供一个良好的初始值，不同的初始值导致不同的计算即过，这是通病。因此如何提供科学的初始值以及算法阈值是很重要的事情！</p>
<p>对大矩阵求逆可以用QR、Cholesky分解；对大的稀疏矩阵也有相关消元分解，求增量的方法具体可了解矩阵论。</p>
<p>Ceres为谷歌开源库，针对非线性优化问题，主要用法：</p>
<ul>
<li>定义cost function模型。书写类，定义带模板参数的()运算符，使成为拟函数Functor,从而像调用函数一样使用如类a<double>()</li>
<li>调用AddResidualBlock将采集数据的误差项添加到目标函数：通常使用Ceres自动求导</li>
<li>设定好后调用solve函数求解</li>
</ul>
<p>g2o进一步把SLAM优化问题用图论描述，成为图优化问题。节点表示优化变量，边为误差项。<br>使用流程：<br>1.顶点的更新函数：位姿更新需要重新定义左乘或者右乘的更新<br>2.顶点重置以及边的误差计算，获得所有边连接顶点的估计值<br>3.读写结果</p>
<p>课后习题总结：<br>1.矩阵A正定，则rank(A) = n, 可求逆。欠定则有多组解，超定则无解，有最小二乘解。<br>2.最速法过于贪心二迭代次数多，牛顿法需计算海塞矩阵，二者均不实用；SLAM常用GN，LM和Dog-Leg狗腿法：高斯牛顿简单高效，但病态矩阵时容易发散；LM是可信域法，略满于GN但正定性强，不易发散；狗腿与LM类似，为解决GN近似计算Hessian不准确而提出的。一般的优化库还包括Nlopt,slam++等。<br>3.A不满秩时，近似的H也半正定，越不正定越接近0矩阵，求逆误差越大，因此$\Delta x$越不可靠<br>4.狗腿法具体看<a href="https://blog.csdn.net/qq_35590091/article/details/94628887">https://blog.csdn.net/qq_35590091/article/details/94628887</a></p>
]]></content>
      <categories>
        <category>SLAMBOOK</category>
      </categories>
      <tags>
        <tag>SLAMBOOK</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp生成代码及数据类型</title>
    <url>/2021/12/14/cpp/cpp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>c++基本数据类型主要有<em>bool, char, int, float, double</em>。具体如下：</p>
<p><img src="/images/12_14_2.png" alt="basic data structure"><br><img src="/images/12_14_3.png" alt="basic data structure2"></p>
<p>另外，C++<strong>生成代码的过程</strong>是：1.程序员编写源代码 2.编译器正确翻译C++为目标代码 3.链接器将环境启动的代码以及引入库的代码与目标代码正确链接 4.最后才输出机器认识的可执行代码<br><img src="/images/12_14_1.png" alt="code procedure"></p>
<p>整型提升(integral promotion): 计算表达式时，bool, char, unsigned char, signed char short会转换为int，即int为计算机最自然的类型，也是运算速度可能最快的。较小与较大运算也可能提升。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++ primer</tag>
      </tags>
  </entry>
  <entry>
    <title>代码重用</title>
    <url>/2022/01/26/cpp/%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8/</url>
    <content><![CDATA[<h3 id="类的复用"><a href="#类的复用" class="headerlink" title="类的复用"></a>类的复用</h3><p>上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.私有继承包含<br>大多数人会倾向于使用包含，一方面方便理解，另一方面多重继承容易引起问题；私有继承主要区别在于私有成员变成了继承而来的无名成员，调用成员时依赖this的类型转换。</p>
<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>MI会带来许多新问题：1.两个基类的同名方法； 2.多个相关基类继承同一个类的多个实例问题；为此大家对MI有喜忧参半不同的态度。</p>
<p>祖先相同时，要用虚基类解决 class Singer:virtual public Worker，虚拟继承。禁止正常的信息再中间类自动传递。</p>
<p>MI中间隐含较多问题，尽量减少使用，要么就不用。</p>
<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>模板主要作用是提供参数化类型，将类型关键名作为参数传递给模板类或函数，从而实现最大程度代码复用。</p>
<p>模板类型使用指针时，代码实现上也得调整，所以一般减少依赖指针模板使用，尽量时bool,char,int,double,string，及一般对象等。</p>
<p>为容器类提供可重用代码是引入模板的主要动机。非类型参数可以是int,枚举，引用或指针，因此double m 不合法，但double *m是合法的。</p>
<p>模板多功能性，可用于基类，组件类以及其他模板的类型参数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ARray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    T entry;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrowArray</span>:</span><span class="keyword">public</span> Array&lt;Type&gt; &#123;...&#125;; <span class="comment">// inheritance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;calss Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Array&lt;Tp&gt; ar;    <span class="comment">// use an Array&lt;&gt; as a component</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// need a blank between &gt; &gt;, show differ from &gt;&gt; operator</span></span><br><span class="line">Array &lt; Stack&lt;<span class="keyword">int</span>&gt; &gt; asi; <span class="comment">// an array of stacks of int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板也可传参</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">n</span>&gt;</span></span><br><span class="line">ArrayTP&lt;T, n&gt;::<span class="built_in">ArrayTP</span>(<span class="keyword">const</span> T &amp; v)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++&gt;)</span><br><span class="line">    ar[i] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示具体化，用于专用定义，优先匹配</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">Ic</span>&lt;</span><span class="keyword">char</span> *&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>模板参数类似函数参数，带有隐式显式转换及参数匹配规则。</p>
<h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p>两个类关系既不是is-a也不是has-a，但存在控制的关系如电视和遥控。则可以定义遥控为电视的友元类，能够合理范围内修改电视的私有和保护的部分。相当于友元类需要直到朋友类的数据细节乃至实现细节。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>chrono库</title>
    <url>/2021/12/29/cpp/chrono%E5%BA%93/</url>
    <content><![CDATA[<p>计时，常用于测试代码的运行时间和效率。</p>
<h3 id="以往用法ctime"><a href="#以往用法ctime" class="headerlink" title="以往用法ctime"></a>以往用法ctime</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;spend &quot;</span> &lt;&lt; (<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC &lt;&lt;<span class="string">&quot; second&quot;</span> &lt;&lt; endl;  <span class="comment">// 精确到毫秒</span></span><br></pre></td></tr></table></figure>


<h3 id="chrono用法"><a href="#chrono用法" class="headerlink" title="chrono用法"></a>chrono用法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> chrono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> start = system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">auto</span> end = system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end-start);</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;spend &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(duration.<span class="built_in">count</span>()) * microseconds::period::num / microseconds::period::den &lt;&lt; <span class="string">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中，auto为自动类型；除了system_clock,还可用steady_clock和high_resolution_clock; microseconds表示微妙，甚至还有nanoseconds纳秒；num和den表示计时单位的分子和分母。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2021/12/15/cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="C-style字符串"><a href="#C-style字符串" class="headerlink" title="C-style字符串"></a>C-style字符串</h3><p>结尾带’\0’,这对于很多处理字符串的函数很关键。#include <cstring>包含大量C语言字串的操作函数如strlen, strcpy, strcat…</p>
<p>strlen():只计算数组或者指针中的字符个数，不带结尾</p>
<p><code>cin.getline(name,20)</code>:读取整行的字串到name,最多20个<br>cin.get()：类似，但下一次调用开头会带有换行(换行缓存到下次get)，顺便检查了上一次输入的正确程度。</p>
<p>针对string类的getline(cin, string); 与cin混合使用时，在cin&gt;&gt;完成后，getline前需要通过getline(cin,”\n”)清除缓存，否则不进入getline输入。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清除缓存</span></span><br><span class="line">string str=<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br></pre></td></tr></table></figure>



<h3 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">std::string</span><br></pre></td></tr></table></figure>
<p>更方便，也更安全。像vector一样管理char.</p>
<h3 id="struct和union"><a href="#struct和union" class="headerlink" title="struct和union"></a>struct和union</h3><p>union只能同时存储<strong>一种</strong>类型，其他类型的会lost</p>
<h3 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h3><ul>
<li>不要delete释放不是new的内存</li>
<li>不要delete同一块内存两次</li>
<li>new[]数组应当用delete []释放</li>
<li>若用new[]为单一实体分配内存，应使用delete（不带方括号）释放</li>
<li>对空指针delete是安全的</li>
</ul>
<h3 id="cin与cin-getline区别"><a href="#cin与cin-getline区别" class="headerlink" title="cin与cin.getline区别"></a>cin与cin.getline区别</h3><p>cin.getline(addr,80) 与cin&gt;&gt;addr<br>getline:读整行直到‘回车’<br>cin:首先跳过‘空格’，读取字串，再次遇‘空格’停止；即跳过前面的空格，读取单个单词。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin&gt;&gt;ch;</span><br><span class="line">cin.<span class="built_in">get</span>(ch);</span><br><span class="line">ch=cin.<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure>
<p>上面区别主要是cin&gt;&gt;ch直接跳过空格换行以及制表符</p>
<h3 id="string格式化输出4位数字-前面补0，多用于文件名操作"><a href="#string格式化输出4位数字-前面补0，多用于文件名操作" class="headerlink" title="string格式化输出4位数字,前面补0，多用于文件名操作"></a>string格式化输出4位数字,前面补0，多用于文件名操作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num_zero = <span class="number">4</span>;</span><br><span class="line">string num = <span class="built_in">to_string</span>(int_val);</span><br><span class="line">string new_num = <span class="built_in">string</span>(num_zero-num.<span class="built_in">length</span>(),<span class="string">&#x27;0&#x27;</span>) + num;</span><br></pre></td></tr></table></figure>
<p>注意int_val长度小于num_zero。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++ primer</tag>
      </tags>
  </entry>
  <entry>
    <title>对象和类</title>
    <url>/2021/12/31/cpp/%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</url>
    <content><![CDATA[<p>OOP特性：</p>
<ul>
<li>抽象</li>
<li>封装和数据隐藏</li>
<li>多态</li>
<li>继承</li>
<li>代码的可重用性</li>
</ul>
<p>接口分离： 1.提供类的声明 2.提供类成员函数</p>
<p>析构函数只有在构造函数用了new分配内存，才需要出来delete释放内存。否则无需工作。</p>
<p><strong>const放在函数括号后</strong>：即为const成员函数，作用指不修改调用对象。</p>
<p>this指针的引入： 用来指向调用当前成员函数的对象（this作为隐藏参数传递给方法）</p>
<p>类静态成员变量： static const int Len = 30; 只能是整型或枚举的静态常量</p>
<h4 id="类结合操作符重载"><a href="#类结合操作符重载" class="headerlink" title="类结合操作符重载"></a>类结合操作符重载</h4><p>成为多态的重要一部分，隐藏了内部操作，强调了抽象的实质意义。<br>C++操作符重载要点：</p>
<ol>
<li>重载后的操作符至少有一个操作数是用户定义的类型</li>
<li>使用操作符不能违反该操作符原有的句法规则</li>
<li>无法定义新的操作符</li>
<li>不能重载sizeof . .* :: ?: typeid *_cast</li>
</ol>
<h4 id="友元包含函数，类和成员函数"><a href="#友元包含函数，类和成员函数" class="headerlink" title="友元包含函数，类和成员函数"></a>友元包含函数，类和成员函数</h4><p>为何需要？  在为类重载二元操作符时，需要用到友元关系，方便使用。<br>存在的主要目的是作为类扩展接口的组成部分。<br>e.g Time乘以double可以用成员函数重载，但double乘以Time时不能，除非要求用户不能如此调用。否则应该引入友元函数重载。<br>一个常用的友元重载则是  cout &lt;&lt; Time,而非用成员函数的 Time&lt;&lt; cout</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前一种成员函数重载 Time*double</span></span><br><span class="line">Time Time::<span class="keyword">operator</span>*(<span class="keyword">double</span> mul) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  Time result;</span><br><span class="line">  <span class="keyword">long</span> totalminutes = hours * mul * <span class="number">60</span> + minutes * mul;</span><br><span class="line">  result.hours = totalminutes /<span class="number">60</span>;</span><br><span class="line">  result.minutes = totalminutes %<span class="number">60</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后一种友元重载 double*Time</span></span><br><span class="line"><span class="comment">// 第一步：原型放入类的声明之中</span></span><br><span class="line"><span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="keyword">double</span> m, <span class="keyword">const</span> Time &amp; t);</span><br><span class="line"><span class="comment">// 第二步：定义编写</span></span><br><span class="line">Time <span class="keyword">operator</span>*(<span class="keyword">double</span> mul, <span class="keyword">const</span> Time &amp; t)</span><br><span class="line">&#123;</span><br><span class="line">   Time result;</span><br><span class="line">  <span class="keyword">long</span> totalminutes = t.hours * mul * <span class="number">60</span> + t.minutes * mul;</span><br><span class="line">  result.hours = totalminutes /<span class="number">60</span>;</span><br><span class="line">  result.minutes = totalminutes %<span class="number">60</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了cout &lt;&lt;连续可输出，友元声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt; (ostream &amp; os, <span class="keyword">const</span> Time &amp; t)</span><br><span class="line">&#123;</span><br><span class="line">  os &lt;&lt; t.hours &lt;&lt; <span class="string">&quot; hours&quot;</span> &lt;&lt; t.minutes&lt;&lt; <span class="string">&quot; minutes&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint"><a href="#接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint" class="headerlink" title="接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)"></a>接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)</h4><p>蓝图是一个有意思的词语，后续多态也会继续接触到，是一个隐性类型表征；在类的类型转换上，需要尤其注意编译器二义性转换的问题。<br>警告：谨慎地使用隐式转换函数。<strong>explicit</strong>定义类的构造函数，则相关对象的类型转换需要显式调用，不能隐式转换。</p>
<h4 id="类声明描述了如何分配内存，但并不执行分配内存"><a href="#类声明描述了如何分配内存，但并不执行分配内存" class="headerlink" title="类声明描述了如何分配内存，但并不执行分配内存"></a>类声明描述了如何分配内存，但并不执行分配内存</h4><p>static int num;的初始化是在类声明之外，int className::num=0;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StringBad sailor = sports;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">StringBad sailor = <span class="built_in">StringBad</span>(sports);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 则原型为</span></span><br><span class="line"><span class="built_in">StringBad</span> (<span class="keyword">const</span> StringBad &amp;); <span class="comment">//由于不知道更新类静态变量，导致计数出问题</span></span><br></pre></td></tr></table></figure>

<h4 id="隐式成员函数"><a href="#隐式成员函数" class="headerlink" title="隐式成员函数"></a>隐式成员函数</h4><p>C++自动提供下列成员函数</p>
<ul>
<li>默认构造函数</li>
<li>复制构造函数</li>
<li>赋值操作符</li>
<li>默认析构函数</li>
<li>地址操作符<br>析构用了delete的类，所有对象生成的构造函数都应该使用new，否则会引起浅复制析构的错误。绝对避免试图删除已经删除的数据的行为！</li>
</ul>
<p>书中的解决方案：使用deep copy，每个对象有自己的数据，而不是引用。<br>增加复制构造函数和赋值操作符，使类正确管理对象使用的内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拷贝函数深复制</span></span><br><span class="line">StringBad::<span class="built_in">StringBad</span>(<span class="keyword">const</span> StringBad &amp; st)</span><br><span class="line">&#123;</span><br><span class="line">  num_strings++;</span><br><span class="line">  len = st.len;</span><br><span class="line">  str = <span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">  std::<span class="built_in">strcpy</span>(str, st.str);  <span class="comment">// 复制构造，深复制而非隐式浅复制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值深复制:并非创建对象，而是对已有对象操作</span></span><br><span class="line">StringBad &amp; StringBad::<span class="keyword">operator</span>=(<span class="keyword">const</span> StringBad &amp; st)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;st)  <span class="comment">// assigned to itself</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">delete</span> [] str; <span class="comment">// free old</span></span><br><span class="line">  len = st.len;</span><br><span class="line">  str = <span class="keyword">new</span> <span class="keyword">char</span> [len+<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(str, st.str);</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="适配数组指针的释放语法"><a href="#适配数组指针的释放语法" class="headerlink" title="适配数组指针的释放语法"></a>适配数组指针的释放语法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> words[<span class="number">15</span>]=<span class="string">&quot;bad idea&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> * p1 = words;</span><br><span class="line"><span class="keyword">char</span> * p2 = <span class="keyword">new</span> <span class="keyword">char</span>;</span><br><span class="line"><span class="keyword">char</span> * p3;</span><br><span class="line"><span class="comment">// delete p1,p2,p3; suitable way</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// insuitable way, undefined</span></span><br><span class="line"><span class="keyword">delete</span> [] p1;</span><br><span class="line"><span class="keyword">delete</span> [] p2;</span><br><span class="line"><span class="keyword">delete</span> [] p3;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>new 对应 delete, delete[] 对应new []</p>
<h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>执行在构造函数之前，因此可用于对const常量进行赋值，对声明为引用的类成员也类似。</p>
<ul>
<li>只能用于构造函数</li>
<li>必须以此初始化非静态const数据成员</li>
<li>必须以此初始化引用数据成员</li>
</ul>
<h4 id="继承is-a"><a href="#继承is-a" class="headerlink" title="继承is-a"></a>继承is-a</h4><p>用virtual虚函数以及动态指针来实现多态（dynamic binding动态编译，需额外开销），派生可自动向基类类型转换，称为向上强制转换。反之则不可，需显式转换。<br>引出C++指导原则之一：不要为不使用的特性付出代价</p>
<h4 id="虚函数工作原理"><a href="#虚函数工作原理" class="headerlink" title="虚函数工作原理"></a>虚函数工作原理</h4><p>编译器处理虚函数会增加一个隐藏成员指向该函数的地址，若派生重定义了虚函数，则该指针指向新的函数地址。<br>多态在内存和执行带来一定的成本：1.每个对象因存储地址而增大 2.编译器要为每个类创建虚函数地址表（数组） 3.每个函数调用需要额外查找表中的地址<br>重载的虚基函数在派生实现时改动需要全部一起改动，称为类型协变</p>
<p>应当把所有派生重新定义的函数再基类设置为虚函数，如果强制需重新定义则=0成纯虚函数</p>
<h4 id="public-protected-private继承"><a href="#public-protected-private继承" class="headerlink" title="public/protected/private继承"></a>public/protected/private继承</h4><p>派生公共继承关系是is-a，继承了基类的接口；其他两种是has-a关系，继承了成员成为私有，只可在声明内部使用；</p>
<p>构造函数，析构函数，=号，友元不能自动继承，需重新声明并实现。<br>protect继承则派生声明不能直接访问基类私有成员，通过public方法调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheOnlyInstance</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> TheOnlyInstance * <span class="title">GetTheOnlyInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">static</span> TheOnlyInstance obj;</span><br><span class="line">      <span class="keyword">return</span> &amp;obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  protect:</span><br><span class="line">    <span class="built_in">TheOnlyInstance</span>()&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// other data</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用时 TheOnlyInstance * p = TheOnlyInstance::GetTheOnlyInstance();</span></span><br></pre></td></tr></table></figure>

<p>传对象函数尽量用引用，避免构造和析构的开销；可以将派生对象用等号赋给基类对象，但相反则需提前明确定义。传引用可明确派生对象的类型，否则值引用可能会被编译器自动类型转换，发生意想不到的事情。也可使用dynamic_cast&lt;const baseDMA &amp;&gt;(hs)的方式强制类型转换。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理</title>
    <url>/2021/12/23/cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="处理可能出现异常的方法"><a href="#处理可能出现异常的方法" class="headerlink" title="处理可能出现异常的方法"></a>处理可能出现异常的方法</h3><ul>
<li>调用abort()或exit()结束程序</li>
<li>返回错误码</li>
<li>异常机制：1.使用try块执行可能出现异常的代码段 2.throw引发异常 3.catch捕获并处理对应情况</li>
</ul>
<h3 id="throw机制"><a href="#throw机制" class="headerlink" title="throw机制"></a>throw机制</h3><p>若throw引发异常后，匹配对应catch。而后不是将控制权返回调用程序，而是引导程序沿着函数调用序列后退，直到找到try块中的函数<br>若没有throw出异常，则catch被跳过.<br>一般而言后退多步，再在main()中寻找与引发异常<strong>类型匹配</strong>的处理程序作处理。</p>
<h3 id="通常用对象作为异常类型处理"><a href="#通常用对象作为异常类型处理" class="headerlink" title="通常用对象作为异常类型处理"></a>通常用对象作为异常类型处理</h3><p>好处是：直接根据类型区分异常，另外对象可以携带信息确定原因，catch根据信息来执行对应的操作</p>
<h3 id="堆栈解退（unwinding-the-stack）"><a href="#堆栈解退（unwinding-the-stack）" class="headerlink" title="堆栈解退（unwinding the stack）"></a>堆栈解退（unwinding the stack）</h3><p>假设函数出现异常，而不是正确返回而终止。程序释放堆栈中的内存，但不会在释放堆栈的第一个返回地址后停止，而是继续释放堆栈，直到找到位于try块的返回地质。程序进行堆栈解退以回到能够捕获异常的地方时，将释放堆栈中的自动存储型变量。</p>
<p><img src="/images/12_23_1.png"></p>
<h3 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream inFile;</span><br><span class="line">    inFile.<span class="built_in">open</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!inFile.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt;<span class="string">&quot;Failed open file.txt\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(inFile&gt;&gt;ch)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt;endl;</span><br><span class="line">    inFile.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面程序为harmony mean的除0错误，抛出const char *类型，匹配输出错误信息的代码。一般抛出错误类型通常为类。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hmean</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == -b)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;bad hmean() arguments: a = -b not allowed&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2.0</span> * a * b / (a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x, y, z;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter two numbers:&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            z = <span class="built_in">hmean</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> <span class="keyword">char</span> * s)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;Enter a new pair of numbers: &quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Harmonic mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;. is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Enter next set of numbers &lt;q to quit&gt;:&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bye!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="throw-catch机制和函数参数以及函数返回机制的区别"><a href="#throw-catch机制和函数参数以及函数返回机制的区别" class="headerlink" title="throw-catch机制和函数参数以及函数返回机制的区别"></a>throw-catch机制和函数参数以及函数返回机制的区别</h3><p>1.函数控制权返回到调用函数的函数，throw语句控制权向上返回到第一个包含能够捕获相应异常的try-catch组合<br>2.引发异常时，编译器总是创建一个临时拷贝，彻底避免了函数机制指向不存在的临时变量的问题。<br>3.经常可见catch(problem &amp; p)，使用了引用，主要是针对通过继承关联起来的异常类型；此时使用基类引用即可执行派生类对象。此时层次结构最下面的异常类的catch语句应当放在最前面。</p>
<p>catch (…)表示捕获任何异常</p>
<h3 id="异常处理的注意事项"><a href="#异常处理的注意事项" class="headerlink" title="异常处理的注意事项"></a>异常处理的注意事项</h3><p>1.使用异常，应在设计程序时就加入，而不是以后才添加。<br>2.使用异常会增加程序代码，降低程序运行速度。<br>3.异常规范不适用于模板，异常和动态内存分配不能总是协同工作<br>因此，虽然异常处理对于某些项目极为重要，但也会增加编程的工作量、增大程序以及降低程序的速度。另外编译器对异常的支持以及用户的经验还没有达到成熟的程度，应有节制地使用这一特性。</p>
<p>如无堆栈解退，则会出现内存泄漏，如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> * ar = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line">    <span class="keyword">if</span>(oh_no)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">exception</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> [] ar;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>throw了，则delete[]被忽略，ar指针消失了，内存块未释放且不可访问。</p>
<h3 id="RTTI（RunTime-Type-Identification"><a href="#RTTI（RunTime-Type-Identification" class="headerlink" title="RTTI（RunTime Type Identification)"></a>RTTI（RunTime Type Identification)</h3><p>三个支持RTTI的元素：</p>
<ul>
<li>dynamic_cast操作符将基类指针生成派生指针：回答是否可以安全将对象的地址赋给特定类型的指针？如可，返回对象地址；否则，返回空指针。这对比“指向哪个类型的对象”，这更通用且有用。</li>
<li>typeid操作符返回对象的类型</li>
<li>type_info存储特定类型的信息<br>注意：RTTI只适用于包含虚函数的类</li>
</ul>
<p>与通用转换机制相比，dynamic_cast、static_cast、const_cast、reinterpret_cast提供了更安全和明确的类型转换。</p>
<h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><p>通用编程技术，迭代器概念。<br>操作复杂度：固定时间、线性时间、随机时间<br>线性容器以及联合容器(set、map、multiset、multimap)<br>()函数符functor的概念,STL使用模板让for_each原型看上去像</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class InputIterator, class Function&gt;</span></span><br><span class="line"><span class="function">Function <span class="title">for_each</span><span class="params">(InputIterator first, InputIterator last, Function f)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="STL算法库"><a href="#STL算法库" class="headerlink" title="STL算法库"></a>STL算法库</h3><p>分为四大类</p>
<ul>
<li>非修改式序列操作</li>
<li>修改式序列操作</li>
<li>排序和相关操作</li>
<li>通用数字运算<br>就地算法：在原始数据位置上操作；复制算法：在新的位置操作</li>
</ul>
<h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>cout不会截断数据，会尽量全部打印内容。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout.<span class="built_in">width</span>(<span class="keyword">int</span> n); <span class="comment">// 单次有效</span></span><br><span class="line">cout.<span class="built_in">fill</span>(<span class="keyword">char</span> c); <span class="comment">// 一直有效</span></span><br><span class="line">cout.<span class="built_in">precision</span>(<span class="keyword">int</span> n); <span class="comment">// 一直有效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑控制</title>
    <url>/2021/12/16/cpp/%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h3 id="do…while…-至少会执行一次的循环逻辑"><a href="#do…while…-至少会执行一次的循环逻辑" class="headerlink" title="do…while… 至少会执行一次的循环逻辑"></a>do…while… 至少会执行一次的循环逻辑</h3><p>哨兵(sentinel)字符: 一直读取，直到’他‘为止</p>
<h3 id="检查文件是否正确打开很关键"><a href="#检查文件是否正确打开很关键" class="headerlink" title="检查文件是否正确打开很关键"></a>检查文件是否正确打开很关键</h3><p>用string读ifstream数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    ifstream inFile;</span><br><span class="line">    inFile.<span class="built_in">open</span>(filename);</span><br><span class="line">    <span class="keyword">if</span>(!inFile.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;Failed Open&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 逐行读放在string</span></span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(inFile, str);</span><br><span class="line">    <span class="comment">//stoi, stof, stod </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="关于函数，真正的乐趣在于编写自己的函数，函数库"><a href="#关于函数，真正的乐趣在于编写自己的函数，函数库" class="headerlink" title="关于函数，真正的乐趣在于编写自己的函数，函数库"></a>关于函数，真正的乐趣在于编写自己的函数，函数库</h3><h3 id="指向const的指针以及const指针"><a href="#指向const的指针以及const指针" class="headerlink" title="指向const的指针以及const指针"></a>指向const的指针以及const指针</h3><p><img src="/images/12_17_1.png"></p>
<h3 id="递归使用"><a href="#递归使用" class="headerlink" title="递归使用"></a>递归使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recurs</span><span class="params">(arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">stat1</span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(test)</span></span></span><br><span class="line"><span class="function">        <span class="title">recurs</span><span class="params">(arg)</span></span></span><br><span class="line"><span class="function">    stat2</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>先执行stat1,打开满足条件，打开新的递归；直到新的递归不满足条件，逐步执行stat2并关闭当前函数；直到所有打开的函数都关闭了。</p>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>用函数指针将第一函数找到第二函数，而非直接调用；虽然笨拙，但好处是可以在不同时间传递不同的函数地址；<br>语法：double (*pf)(int);</p>
<h3 id="应尽量使用const"><a href="#应尽量使用const" class="headerlink" title="应尽量使用const"></a>应尽量使用const</h3><p>1.使用const可以避免无意中修改数据的失误<br>2.使用const使函数能够处理const和非const实参，否则将不能处理const实参<br>3.使用const引用使函数能够正确生成并使用临时变量</p>
<h3 id="引用非常适合用于结构和类"><a href="#引用非常适合用于结构和类" class="headerlink" title="引用非常适合用于结构和类"></a>引用非常适合用于<strong>结构和类</strong></h3><p>何时使用引用参数：1.能够修改调用函数中的数据对象 2.通过传递引用而非拷贝提高程序运行速度</p>
<h3 id="语法糖：函数默认参数从右往左"><a href="#语法糖：函数默认参数从右往左" class="headerlink" title="语法糖：函数默认参数从右往左"></a>语法糖：函数默认参数从右往左</h3><h3 id="函数多态：重载函数"><a href="#函数多态：重载函数" class="headerlink" title="函数多态：重载函数"></a>函数多态：重载函数</h3><p>不应滥用，适用于不同参数类型输入，完成基本一致功能的多个函数使用，const与非const也不一样</p>
<h3 id="函数多态：模板编程"><a href="#函数多态：模板编程" class="headerlink" title="函数多态：模板编程"></a>函数多态：模板编程</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;  <span class="comment">// typename -&gt; class is ok</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编译器如何匹配最佳函数是一个复杂而完备的过程，大致规则如下：<br>1.完全匹配，但常规函数优于模板<br>2.提升转换（char/shorts提升至int, float提升至double)<br>3.标准转换（int 转换char, long 转换double)<br>4.用户定义的转换，如类声明</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++ primer</tag>
      </tags>
  </entry>
  <entry>
    <title>class1</title>
    <url>/2022/03/17/jiuzhang/class1/</url>
    <content><![CDATA[<h3 id="第一课"><a href="#第一课" class="headerlink" title="第一课"></a>第一课</h3><h4 id="strStr问题"><a href="#strStr问题" class="headerlink" title="strStr问题"></a>strStr问题</h4><p>常见问题： 上来直接说KMP算法（过难）<br>可以确认面试的考察点，比如时间复杂度和空间复杂度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    return a index to first occurence of target in source, or -1 if not exist</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s1==<span class="keyword">null</span> || s2==<span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s1.length()-s2.length()+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;s2.length();j++)</span><br><span class="line">        <span class="keyword">if</span>(s1.charAt(i+j)!=s2.charAt(j)) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span>(j==s2.length()) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>面试误区：</p>
<ul>
<li>做过的题肯定能过</li>
<li>算法想出来就能过</li>
<li>代码写出来就能过</li>
</ul>
<p>面试官眼中的求职者：可能是未来的同事</p>
<ul>
<li>你的代码看起来舒服吗？需要多少时间REVIEW</li>
<li>你的Coding习惯好吗？不会未来疲于帮你debug，动不动搞挂网站</li>
<li>你的沟通能力好吗？和你交流费劲吗</li>
</ul>
<p>主要考察编程的基本功：</p>
<ul>
<li>程序风格（缩进，括号，变量名）</li>
<li>Coding习惯（异常检查，边界处理）</li>
<li>沟通（让面试官时刻明白你的意图）</li>
<li>测试（主动写出合理的TestCase)</li>
</ul>
<p>面试技巧：</p>
<ul>
<li>在白纸能写吗</li>
<li>刷过的题，吃透了多少</li>
</ul>
<p>明确一点：算法，其实很简单。类似于高考做题，刷题需要总结</p>
<ul>
<li>归类相似的题目</li>
<li>找出适合的模板程序</li>
<li>掌握递归算法，掌握区分度</li>
</ul>
]]></content>
      <categories>
        <category>九章算法</category>
      </categories>
      <tags>
        <tag>九章算法</tag>
      </tags>
  </entry>
  <entry>
    <title>内存模型</title>
    <url>/2021/12/20/cpp/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="头文件通常包含的内容"><a href="#头文件通常包含的内容" class="headerlink" title="头文件通常包含的内容"></a>头文件通常包含的内容</h3><ul>
<li>函数原型</li>
<li>使用了#define或const定义的符号常量</li>
<li>结构声明</li>
<li>类声明</li>
<li>模板声明</li>
<li>内联函数<br>用#include “”率先在当前工作目录或者源代码目录下找<br>用#include &lt;&gt;率先在标准头的目录下找</li>
</ul>
<h3 id="同一个头文件只包含一次"><a href="#同一个头文件只包含一次" class="headerlink" title="同一个头文件只包含一次"></a>同一个头文件只包含一次</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INCLUDE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_H_</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="多个库的链接"><a href="#多个库的链接" class="headerlink" title="多个库的链接"></a>多个库的链接</h3><p>需要确保对象文件或库都是由同一个编译器生成的，若不同的编译器，会为同一个函数生成不同的修饰名称。若有源代码建议用<strong>自己的编译器全部重新编译</strong>，以消除链接错误。</p>
<h3 id="存储数据的三种方案"><a href="#存储数据的三种方案" class="headerlink" title="存储数据的三种方案"></a>存储数据的三种方案</h3><ul>
<li>自动存储持续性：函数中声明的变量以及函数参数，会在执行中自动创建，执行完自动释放</li>
<li>静态存储持续性：使用static关键字的变量，在整个程序运行过程均存在</li>
<li>动态存储持续性：用new分配的内存，一直存在直到delete</li>
</ul>
<h3 id="编译器把自动变量用堆栈的形式管理"><a href="#编译器把自动变量用堆栈的形式管理" class="headerlink" title="编译器把自动变量用堆栈的形式管理"></a>编译器把自动变量用堆栈的形式管理</h3><p>register的变量放在寄存器，依然没有链接性</p>
<h3 id="静态存储提供三种链接性"><a href="#静态存储提供三种链接性" class="headerlink" title="静态存储提供三种链接性"></a>静态存储提供三种链接性</h3><ul>
<li>外部链接性：全局（外部链接性）变量（main函数外)</li>
<li>内部链接性：static的全局变量</li>
<li>无链接性: 内部的static变量<br>静态变量持续整个程序执行期间，编译器将分配固定的内存块来管理。默认情况下，静态数组以及结构的成员都设置为0。</li>
</ul>
<h3 id="外部链接性使用"><a href="#外部链接性使用" class="headerlink" title="外部链接性使用"></a>外部链接性使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file1</span></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">100</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;file2.hpp&quot;</span></span></span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// file2</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> status;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果file2中，用status int status或者 extern int status=20;都会报重新定义的错误。</p>
<h3 id="应使用外部变量在多文件程序的不同部分共享数据"><a href="#应使用外部变量在多文件程序的不同部分共享数据" class="headerlink" title="应使用外部变量在多文件程序的不同部分共享数据"></a>应使用外部变量在多文件程序的不同部分共享数据</h3><p>内部链接性的静态变量用于多个函数之间共享数据(名称空间提供了新的共享数据方法，static的内部链接性逐步淘汰)</p>
<h3 id="存储说明符：auto-register-static-extern-mutable"><a href="#存储说明符：auto-register-static-extern-mutable" class="headerlink" title="存储说明符：auto, register, static, extern, mutable"></a>存储说明符：auto, register, static, extern, mutable</h3><p>auto为自动变量;register为寄存器存储；static在整个cpp文件的声明具有函数间的链接性；extern是多文件的外部链接性；mutable使const临时失效；<br>volatile指程序代码没有对内存单元修改，其值也可能发生变化。即每次使用该变量都应其查找，别用缓存。</p>
<p>另外</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> fingers = <span class="number">10</span>; <span class="comment">//same as static const int fingers;</span></span><br></pre></td></tr></table></figure>
<p>const使全局变量变成了内部链接性。</p>
<p>但是在另外的文件用 extern const int fingers;又可以强行变成外部链接性而可用。</p>
<h3 id="关于函数的链接性"><a href="#关于函数的链接性" class="headerlink" title="关于函数的链接性"></a>关于函数的链接性</h3><p>由于C++不允许函数中定义另外的函数，所以所有函数都为静态存储持续性。但依然可以用extern来使函数为另一个文件使用。使用该函数的每个文件应包含函数原型（方便了解接口的描述，内联函数可以无需接口描述）</p>
<h3 id="语言链接性"><a href="#语言链接性" class="headerlink" title="语言链接性"></a>语言链接性</h3><p>由于C和C++编译器对函数翻译不一致，在调用C外部链接函数时，应该标注extern “C”</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">e.g.</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">void</span> <span class="title">spiff</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="布局new占位符"><a href="#布局new占位符" class="headerlink" title="布局new占位符"></a>布局new占位符</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUF = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[BUF];</span><br><span class="line"><span class="keyword">double</span> *pd1 = <span class="keyword">new</span> <span class="keyword">double</span>[BUF];</span><br><span class="line"><span class="keyword">double</span> *pd2 = <span class="built_in"><span class="keyword">new</span></span> (buffer)<span class="keyword">double</span>[BUF];</span><br></pre></td></tr></table></figure>
<p>上述两个指针，pd2为交由程序员自身管理的动态内存；且pd2在delete管辖区域之外。</p>
<h3 id="命名空间及前途"><a href="#命名空间及前途" class="headerlink" title="命名空间及前途"></a>命名空间及前途</h3><ul>
<li>命名空间具有外部链接性</li>
<li>使用在已命名的名称空间中声明的变量，而不是使用外部全局变量</li>
<li>使用在已命名的名称空间中声明的变量，而不是使用静态全局变量</li>
<li>如果开发函数库或者类库，将其放入一个名称空间中。如当前C++提倡标准库的都放入std空间中</li>
<li>不要在头文件使用using,这样会掩盖了可用的名称；另外包含头的顺序会影响程序的行为；若坚持则应在所有的#include后用</li>
<li>导入名称时，首选用作用域解析或using声明</li>
<li>对于using声明，首选将作用域于局部，而非全局</li>
</ul>
<p>命名空间可以是全局的，也可以位于另一个名称空间中，但<strong>不能位于代码块中</strong></p>
<p>using namespace std;就是using编译指令，使整个名称空间可用。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>EIGEN_1 HELLO_WOLRD</title>
    <url>/2022/01/20/eigen/eigen-1/</url>
    <content><![CDATA[<h3 id="EIGEN简介"><a href="#EIGEN简介" class="headerlink" title="EIGEN简介"></a>EIGEN简介</h3><p>FROM WIKI: Eigen is a high-level C++ library of template headers for linear algebra, matrix and vector operations, geometrical transformations, numerical solvers and related algorithms.<br>简而言之C++开源模板库，支持线性代数、矩阵矢量运算和数值分析，是个方便好用的数学库。</p>
<p>更绝的是，EIGEN所有源码用头文件编写，所以只需要Include,无需编译链接过程，直接与平台无关，非常通用！</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装过程也很简单，在UBUNTU下直接</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>
<p>一般安装在/usr/include目录下</p>
<p>使用直接与标准库类似，#include &lt;Eigen/Dense&gt;等</p>
<h3 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h3><p><img src="/images/01_20_1.png"></p>
<h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Matrix3d m = Matrix3d::<span class="built_in">Random</span>();</span><br><span class="line">    m = ( m + Matrix3d::<span class="built_in">Constant</span>(<span class="number">1.2</span>)) * <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    <span class="function">Vector3d <span class="title">v</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    v &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt;m*v &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是fix_sized定义的写法，一般4*4以下的矩阵矢量用固定大小写法，对于比较大的才用不定量写法MatirxXd, VectorXd;</p>
<p>主要结构为1D对象Vector, Array和2D对象Matrix</p>
]]></content>
      <categories>
        <category>EIGEN</category>
      </categories>
      <tags>
        <tag>EIGEN</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯课堂-C++11多线程</title>
    <url>/2021/12/28/cpp/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82-C-11%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h3><p>多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入操作类，重载运算符()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fctor</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:    <span class="comment">// 参数使用引用减少多线程资源拷贝</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string&amp; msg)</span>     <span class="comment">// opt: string msg</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      cout &lt;&lt;<span class="string">&quot;from f1:&quot;</span> &lt;&lt; msg&lt;&lt;endl;</span><br><span class="line">      msg = <span class="string">&quot;changed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s = <span class="string">&quot;not changed&quot;</span>;</span><br><span class="line">  cout &lt;&lt; this_thread::<span class="built_in">get_id</span>()&lt;&lt;endl;</span><br><span class="line">  <span class="function">thread <span class="title">t1</span><span class="params">((Fctor()), ref(s))</span></span>;    <span class="comment">// move(s),此时最后输出的s为空。</span></span><br><span class="line">  t1.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; thread::<span class="built_in">hardware_concurrency</span>() &lt;&lt; endl; <span class="comment">//当前设备核心数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// thread_id</span></span><br><span class="line"><span class="comment">// from f1:not changed</span></span><br><span class="line"><span class="comment">// not changed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数据竞争及互斥对象"><a href="#数据竞争及互斥对象" class="headerlink" title="数据竞争及互斥对象"></a>数据竞争及互斥对象</h3><p>避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lock_guard构建f单例，保证独占fout资源，从而保证线程安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>()&#123;</span><br><span class="line">        f.<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        f&lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt;<span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex m_mutex;</span><br><span class="line">        ofstream f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护</span></span><br><span class="line"><span class="comment">mutex mu;</span></span><br><span class="line"><span class="comment">void shared_print(string msg, int id)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    lock_guard&lt;mutex&gt; guard(mu);</span></span><br><span class="line"><span class="comment">    // mu.lock();</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; msg &lt;&lt; id &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    // mu.unlock();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile&amp; log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&gt;<span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;from main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>避免死锁：</p>
<ul>
<li>评估线程是否需要两个或以上的互斥对象</li>
<li>避免在锁住资源的同时去调用一些不熟悉的函数</li>
<li>使用lock函数帮助mutex顺序一致</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环依赖产生的死锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lock</span>(m_mutex, m_mutex2);  </span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, adopt_lock)</span></span>;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker2</span><span class="params">(m_mutex2, adopt_lock)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print2</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lock</span>(m_mutex, m_mutex2); <span class="comment">// 用lock确保互斥顺序一致</span></span><br><span class="line"></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker2</span><span class="params">(m_mutex2, adopt_lock)</span></span>; <span class="comment">// 若调换，则可避免</span></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, adopt_lock)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex m_mutex;</span><br><span class="line">    mutex m_mutex2;</span><br><span class="line">    ofstream f; <span class="comment">// 被m_mutex保护的对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile &amp;log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &gt; <span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print2</span>(<span class="string">&quot;from main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Unique-Lock和lazy-Initialization"><a href="#Unique-Lock和lazy-Initialization" class="headerlink" title="Unique Lock和lazy Initialization"></a>Unique Lock和lazy Initialization</h3><p>加锁的方式：</p>
<ol>
<li>lock_guard<mutex></li>
<li>mutex.lock</li>
<li>unique_lock(推荐，但占用更多系统资源)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所占用的资源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>()&#123;</span><br><span class="line">        f.<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// lock_guard&lt;mutex&gt; locker(m_mutex);  </span></span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, defer_lock)</span></span>; <span class="comment">// unique_lock占用更多系统资源</span></span><br><span class="line">        <span class="comment">// do_sth()  unlock</span></span><br><span class="line">        <span class="comment">// ...        </span></span><br><span class="line"></span><br><span class="line">        locker.<span class="built_in">lock</span>();</span><br><span class="line">        f &lt;&lt; id &lt;&lt;<span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        locker.<span class="built_in">lock</span>(); <span class="comment">// another unique_lock</span></span><br><span class="line"></span><br><span class="line">        unique_lock&lt;mutex&gt; locker2 = <span class="built_in">move</span>(locker);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex m_mutex;</span><br><span class="line">        ofstream f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile&amp; log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&gt;<span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h3><p>结合unique_lock和lambda，让线程之间高效相互响应执行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">mutex mu;</span><br><span class="line">condition_variable cond;  <span class="comment">// 条件变量</span></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">        q.<span class="built_in">push_front</span>(count);</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cond.<span class="built_in">notify_one</span>();</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者：条件变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(data!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">        cond.<span class="built_in">wait</span>(locker, []()&#123; <span class="keyword">return</span> !q.<span class="built_in">empty</span>(); &#125;); <span class="comment">// 只能搭配unique_lock使用，用Lambda函数避免自解锁</span></span><br><span class="line">        data = q.<span class="built_in">back</span>();</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;t2 got a value from t1: &quot;</span> &lt;&lt; data&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不优雅</span></span><br><span class="line"><span class="comment">void function_2()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int data = 0;</span></span><br><span class="line"><span class="comment">    while(data!=1)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        unique_lock&lt;mutex&gt; locker(mu);</span></span><br><span class="line"><span class="comment">        if(!q.empty())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            data = q.back();</span></span><br><span class="line"><span class="comment">            q.pop_back();</span></span><br><span class="line"><span class="comment">            locker.unlock();</span></span><br><span class="line"><span class="comment">            cout &lt;&lt;&quot;t2 got a value from t1: &quot; &lt;&lt; data&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else &#123;</span></span><br><span class="line"><span class="comment">            locker.unlock();</span></span><br><span class="line"><span class="comment">            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(function_2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>C++ 多线程 并发</tag>
      </tags>
  </entry>
  <entry>
    <title>墙面分割</title>
    <url>/2022/01/14/pcl/%E5%A2%99%E9%9D%A2%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<h3 id="区域生长分割region-growing-segmentation"><a href="#区域生长分割region-growing-segmentation" class="headerlink" title="区域生长分割region growing segmentation"></a>区域生长分割region growing segmentation</h3><p>算法核心：基于点法线之间角度的比较，尽量将满足平滑约束的相邻点合并在一起，以一簇点集的形式输出，视为相同平面</p>
<p>工作原理：区域增长从有最小曲率值curvature的点。则需要计算所有曲率值并进行排序；因为曲率最小的点位于平坦区域，从平坦区域增长可以减少区域的总数。（曲率与法线的求解方法类似,法线描述点在表面的法向，曲率则是法线间协方差矩阵的特征值，描述法向一致性)</p>
<p>具体过程：</p>
<ol>
<li>对未标记点的曲率排序，将最小曲率点放入种子集</li>
<li>对每个种子的所有邻点计算</li>
<li>1 每个近邻点与当前点的法线角度差(reg.setSmoothnessThreshold),如果小于阈值则重点考虑，进入2.2判断</li>
<li>2 该点通过2.1法线角度差检验，如果曲率小于设定的阈值(reg.setCurvatureThreshold)，这个点即被添加到种子点集，属于当前平面</li>
<li>通过两次检验的点，被从原始点云去除</li>
<li>设置最小点簇的点数reg.setMinClusterSize,以及最大簇reg.segMaxClusterSize</li>
<li>重复1-3生成min~max个点数的所有平面，并对不同平面标记颜色区分</li>
<li>直到算法在剩余点中生成的点簇不能满足min,停止工作</li>
</ol>
]]></content>
      <categories>
        <category>pcl</category>
      </categories>
      <tags>
        <tag>pcl</tag>
      </tags>
  </entry>
  <entry>
    <title>CMAKE实践</title>
    <url>/2022/02/25/reading/CMAKE%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h3 id="初识cmake"><a href="#初识cmake" class="headerlink" title="初识cmake"></a>初识cmake</h3><p>主要特点：</p>
<ul>
<li>1.开放源代码</li>
<li>2.跨平台，可生成native编译配置文件，在linux/unix平台生成makefile;在IOS平台生成xcode;在windows平台生成MSVC工程文件</li>
<li>3.可管理大型项目，如KDE4</li>
<li>4.简化编译构建过程和编译过程。工具链简单：cmake+make</li>
<li>5.高效率，cmake构建KDE4的kdelibs要比autotools快40%，因为cmake工具链中没有libtool</li>
<li>6.可拓展性，可以为cmake编写特定功能模块，扩展功能</li>
</ul>
<p>缺点：</p>
<ul>
<li>1.相对简单，但是没有听起来或者想象简单</li>
<li>2.cmake编写过程实际上是编程过程，使用的是cmake语言和语法</li>
<li>3.cmake与已有体系配合不算理想如pkgconfig</li>
</ul>
<p>作者建议：</p>
<ul>
<li>1.如果没有实际的项目需求，那么看到这里就可以停下来，因为cmake学习过程就是实践过程，没有实践读多少天也会忘记</li>
<li>2.如果你的工程只有几个文件，直接编写Makefile是最好的选择</li>
<li>3.如果使用c/c++/java以外的语言，请不要使用cmake</li>
<li>4.如果使用的语言有非常完备的构建体系，如java的ant，也不需要学习cmake</li>
<li>5.如果项目已经采用非常完备的工程管理工具，且不存在维护问题，没有必要迁移到cmake</li>
<li>6.如果仅仅使用qt，没必要使用cmake。因为qmake在QT的专业性和自动化程度更高</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>特征匹配</title>
    <url>/2022/01/13/opencv/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h4 id="ubuntu下opencv-CMakeList文件"><a href="#ubuntu下opencv-CMakeList文件" class="headerlink" title="ubuntu下opencv CMakeList文件"></a>ubuntu下opencv CMakeList文件</h4><p>通过terminal直接apt安装opencv，一般挂载在/usr/local/lib下；此时find_package即可找到</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># cmake needs this <span class="meta-keyword">line</span></span></span><br><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"># <span class="function">Define project name</span></span><br><span class="line"><span class="function"><span class="title">project</span><span class="params">(FeatureMapping)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Find OpenCV, you may need to set OpenCV_DIR variable</span></span><br><span class="line"><span class="function"><span class="meta"># to the absolute path to the directory containing OpenCVConfig.cmake file</span></span></span><br><span class="line"><span class="function"><span class="meta"># via the command <span class="meta-keyword">line</span> or GUI</span></span></span><br><span class="line"><span class="function"><span class="title">find_package</span><span class="params">(OpenCV REQUIRED)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Enable C++11</span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD <span class="number">11</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD_REQUIRED TRUE)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Declare the executable target built from your sources</span></span><br><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">(main main.cpp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Link your application with OpenCV libraries</span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(main PRIVATE $&#123;OpenCV_LIBS&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>


<h4 id="两RGB图间的特征匹配"><a href="#两RGB图间的特征匹配" class="headerlink" title="两RGB图间的特征匹配"></a>两RGB图间的特征匹配</h4><p>具体可参考官方教程<a href="https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html">https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Mat img1 = <span class="built_in">imread</span>(<span class="string">&quot;001.JPG&quot;</span>);</span><br><span class="line">    Mat img2 = <span class="built_in">imread</span>(<span class="string">&quot;002.JPG&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Ptr&lt;SIFT&gt; detector = SIFT::<span class="built_in">create</span>();</span><br><span class="line">    vector&lt;KeyPoint&gt; keypoints1, keypoints2;</span><br><span class="line">    Mat descriptors1, descriptors2;</span><br><span class="line">    detector-&gt;<span class="built_in">detectAndCompute</span>(img1, <span class="built_in">noArray</span>(), keypoints1, descriptors1);</span><br><span class="line">    detector-&gt;<span class="built_in">detectAndCompute</span>(img2, <span class="built_in">noArray</span>(), keypoints2, descriptors2);</span><br><span class="line"></span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class="built_in">create</span>(DescriptorMatcher::FLANNBASED);</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;DMatch&gt;&gt; knn_matches;</span><br><span class="line">    matcher-&gt;<span class="built_in">knnMatch</span>(descriptors1, descriptors2, knn_matches, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> ratio_thresh = <span class="number">0.5f</span>;</span><br><span class="line">    vector&lt;DMatch&gt; good_matches;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;knn_matches.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(knn_matches[i][<span class="number">0</span>].distance &lt; ratio_thresh * knn_matches[i][<span class="number">1</span>].distance)</span><br><span class="line">        &#123;</span><br><span class="line">            good_matches.<span class="built_in">push_back</span>(knn_matches[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat img_matches;</span><br><span class="line">    <span class="built_in">drawMatches</span>(img1, keypoints1, img2, keypoints2, good_matches, img_matches);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-- Localize the object</span></span><br><span class="line">    std::vector&lt;Point2f&gt; obj;</span><br><span class="line">    std::vector&lt;Point2f&gt; scene;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; good_matches.<span class="built_in">size</span>(); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//-- Get the keypoints from the good matches</span></span><br><span class="line">        obj.<span class="built_in">push_back</span>( keypoints1[ good_matches[i].queryIdx ].pt );</span><br><span class="line">        scene.<span class="built_in">push_back</span>( keypoints2[ good_matches[i].trainIdx ].pt );</span><br><span class="line">    &#125;</span><br><span class="line">    Mat H = <span class="built_in">findHomography</span>( obj, scene, RANSAC );</span><br><span class="line">    cout &lt;&lt; H &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//-- Get the corners from the image_1 ( the object to be &quot;detected&quot; )</span></span><br><span class="line">    <span class="function">std::vector&lt;Point2f&gt; <span class="title">obj_corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    obj_corners[<span class="number">0</span>] = <span class="built_in">Point2f</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    obj_corners[<span class="number">1</span>] = <span class="built_in">Point2f</span>( (<span class="keyword">float</span>)img1.cols, <span class="number">0</span> );</span><br><span class="line">    obj_corners[<span class="number">2</span>] = <span class="built_in">Point2f</span>( (<span class="keyword">float</span>)img1.cols, (<span class="keyword">float</span>)img1.rows );</span><br><span class="line">    obj_corners[<span class="number">3</span>] = <span class="built_in">Point2f</span>( <span class="number">0</span>, (<span class="keyword">float</span>)img1.rows );</span><br><span class="line">    <span class="function">std::vector&lt;Point2f&gt; <span class="title">scene_corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="built_in">perspectiveTransform</span>( obj_corners, scene_corners, H);</span><br><span class="line">    <span class="comment">//-- Draw lines between the corners (the mapped object in the scene - image_2 )</span></span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">0</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">1</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">1</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">2</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>( <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">2</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">3</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>( <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">3</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">0</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>( <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="comment">//-- Show detected matches</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">namedWindow</span>(<span class="string">&quot;Matches&quot;</span>, WINDOW_NORMAL);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Matches&quot;</span>, img_matches );</span><br><span class="line">    <span class="comment">// imwrite(&quot;good_res.jpg&quot;, img_matches);</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出H：</span></span><br><span class="line"><span class="comment">[0.9771928708495958, -0.008932567941541457, 129.4806431662592;</span></span><br><span class="line"><span class="comment"> 0.0342771681684575, 0.9114878090650101, 163.0011063784843;</span></span><br><span class="line"><span class="comment"> 3.322036688562577e-05, -1.090291446290035e-05, 1]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>值得注意的是，本版本是opencv 4.5,与Opencv2/3有很多语法不一样了；关于特征点和描述子最大的区别：特征点是特征坐标KeyPoint，描述子是描述邻域信息的Mat。</p>
<p>特征匹配总体的流程：<br>1.首先读取图片，创建检测特征SIFT，ORB，SURF(xfeature)等<br>2.如果检测子包含描述子，则直接detectAndCompute<br>3.一般用BFMatcher直接对描述子点对vector<DMatch> 进行暴力匹配，这里是优化加速版用FLANN的knn，注意的是ORB可用HAMMING距离，其他则不可。<br>4.接着对KNN点对进行基于距离的筛选<br>5.对置信度高的点对进行RANSAC的单应变换矩阵求解</p>
<p>至此基本完成特征匹配的功能，得到的单应矩阵描述了图片间的变换关系；这是很多CV高级应用的基础，如校正，拼接，SLAM等。</p>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>皮肤的秘密</title>
    <url>/2022/01/19/reading/%E7%9A%AE%E8%82%A4%E7%9A%84%E7%A7%98%E5%AF%86/</url>
    <content><![CDATA[<h3 id="认识皮肤"><a href="#认识皮肤" class="headerlink" title="认识皮肤"></a>认识皮肤</h3><p>皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经细胞。</p>
<p>皮肤主要由三层构成：表皮，真皮以及皮下组合。其中表皮与真皮间的基底膜带决定了皮肤的弹性紧致，而且是在1岁形成不可逆的衰老，无法重生所以只能好好保护延缓其衰老。皮肤细胞从底层出生，衰老于真皮并死亡在表皮并成为保护屏障，正常周期为4周。患有皮肤病的可能会加速该过程至5天，导致表皮的屏障并不完整。</p>
<h3 id="表皮"><a href="#表皮" class="headerlink" title="表皮"></a>表皮</h3><p>由于皮肤表面存在着大量微生物群，所以保持皮肤的pH值是非常重要的，应当合理维持完好无损的酸性保护膜，人工清洁剂约5.5，另外对于皮下脂肪过厚的皮肤褶皱，唯一有效办法是减肥。可以用抗真菌软膏，另外带锌软膏可缓解皮肤炎症，带走多余水分。</p>
<p><img src="/images/01_19_1.png"></p>
<p>生长纹无足轻重，关于肤色，是有黑色素影响的。研究表明，橙色皮肤最具吸引力，可多摄入胡萝卜素B达到。颠痕主要由基底膜带大面积受损，表皮过度损耗引起的。对于渗水伤口可用硅霜或贴上硅凝胶伤口贴。治疗疙瘩需要强效疗法如：激光疗法、热针、冷冻疗法以及X射线放射疗法。</p>
<h3 id="真皮"><a href="#真皮" class="headerlink" title="真皮"></a>真皮</h3><p>真皮充满紧致的结缔组织，带来稳固性以及拉伸性，任何的日晒、日光浴、烟草、压力、睡眠不足、营养不良以及缺乏运动等会加速弹性纤维的流失。臀部皮肤就是自然老化的参考，面部等受光照影响较大是老化较快的皮肤。另外，皮肤在4度就开始出现冻疮，而冬天皮肤也能适应，所以只在晚上睡前使用保湿即可，白天冬天保湿使皮肤含水量升高，反而容易冻伤。</p>
<p>真皮层拥有大量神经，使皮肤成为最大的神经器官，抚摸有调节中枢神经和社交等作用。同时含有腺体，会分泌激素气味等。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>《浪潮之巅》第4版：读书笔记</title>
    <url>/2021/11/26/reading/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85/</url>
    <content><![CDATA[<h3 id="一部工业革命后的近代科技发展史"><a href="#一部工业革命后的近代科技发展史" class="headerlink" title="一部工业革命后的近代科技发展史"></a>一部工业革命后的近代科技发展史</h3><p>第一次阅读这本书大概是在大学的时期，当时应该还是第一第二版的样子。可惜当时认知有限或者是兴趣使然，确实是没有坚持读下来。作为一本信息科技人的导论书籍，吴军老师主要是从<strong>创始人及公司基因，资本加速以及调整创新</strong>等多个维度阐释每一个时代的技术浪潮。也让我重新认识硅谷，重新认识所有信息产业耳熟能详的近代技术及工业制品。有点后悔当初年少没有认认真真开启好这一本导论，以致于没有一个非常完备的大局观去规划个人职业生涯以及技术路线。弯弯曲曲之下，也就不难预见自己人生所能触及的高度了。</p>
<h3 id="重新认识知名或者耳闻的科技公司发展"><a href="#重新认识知名或者耳闻的科技公司发展" class="headerlink" title="重新认识知名或者耳闻的科技公司发展"></a>重新认识知名或者耳闻的科技公司发展</h3><p>读完整篇最大的收获一方面是吴军老师分析浪潮与技术史的方法论与发展观，另外就是让我重新其认识那些早有耳闻的科技大公司以及了解他们所处时代的科技浪潮与技术产品。按照章节来列举的话：</p>
<ul>
<li>chap 1 北美最大的通讯服务商AT&amp;T及其贝尔实验室，对应国内就是国家垄断的电信移动联通三巨头。信息社会中，通讯业至关重要，从通讯硬件供应商以及软件算法的比如思科，华为；到对接用户的服务供应商，只要能分享整个通讯产业链的某一部分就存在巨大的利润。而且通讯的技术和协议也在不断更迭，从有线-&gt;无线-&gt;光纤-&gt;WIFI6，从2G到5G等等。</li>
<li>chap 2 最早真正研制出计算机的IBM以及其从卖服务器PC到后来成为最大的服务提供商。说实话，IBM的名字在大学时期是如雷贯耳但我却从来不知道他是做什么的。而且至今，我对这家公司的印象和认知可以说都是比较模糊的，但我知道他的TO B服务应该很强。</li>
<li>chap 3 “八叛徒”引出了硅谷不断开拓创新的精神，从一个核心技术到多个子公司分门立派相互竞争促进，大大加快了IC电路的发展，让我们真正迎来经久不衰的半导体时代。这个有点像一套绝世武功，虽然细节粗糙，但核心理论和精神质变于现有的功法。于是所学的弟子们都自立门派，却又各负盛名。最大的点是芯片技术乍看只是两个核心专利的技术，却影响千千万万，甚至于卡住了我们科技强国的脖子。再次，技术之间的差异如同人之间的差异。<strong>对于社会，最有价值的工作可能是20%的人所完成的；对于个人，最有价值的工作可能是20%的时间和精力里做出来的。</strong>那么，如何提升这一个比例呢？比如对于自己，如何让自己的时间和精力专注在最有价值和意义的事情上。如何让自己成为那20%最有价值的人，价值与流量是共通的。为着最大的社会群体服务，为着最广阔的行业作贡献。更细粒的维度划分就是从<strong>用户群体以及用户时间，从社会进步及人类进步</strong>去思考。（我承认，有点发散了，就当与自己对话了～）</li>
<li>chap 4 详尽介绍苹果公司的起落，尤记10年前，乔布斯是无数IT从业者最重要的偶像物，如今又有新的浪潮涌起，比如马斯克。相信粉老乔的，都会读那本经典的自传，就不难认识到苹果了。一直以来，苹果在致力创新智能硬件与大多数人生活上的交互方式。从最早的UI系统，到后来的IPOD，IPHONE等。虽然不像安卓那样开源，但苹果的工程师依然非常的顶。极大的推进产品的质量以及竞争力，他们对产品的整合能力也非常出众，致力于把每一款推向市场的产品做到<strong>极致完美</strong>。以至于非常长的时间里，直到今天，我认为苹果公司推出的是市面上比较完美的智能设备，当然价格也很丰满。苹果的利润率是业界闻名的，除了产业链整合以及大品牌效应能从渠道方压缩成本，更重要的是在长时期里核心技术不断研发和积累的成果。</li>
<li>chap 5 引出第一个方法论，信息产业的三大定律：1.<strong>摩尔定律</strong>，集成电路的集成度每18个月翻一翻。因此半导体智能产品的性能也翻番，说明一个高速发展的IT行业是呈现指数增长 2.<strong>win-tel定律</strong>，基于摩尔定律，硬件进步了，软件也会相应占用更多的资源，以此发挥硬件的能力，倒逼硬件行业完成摩尔增长 3.<strong>反摩尔定律</strong>，对于处在摩尔定律行业的公司，如果不进步达到指数，则在退步。如果只维持去年的水平，18月后就会下降剩一半。</li>
<li>chap 6 Intel的芯片，全球通用且难有敌手。因为PC端的芯片研发成本摆在那儿，1985对32bit的80386研发投入就超过3亿美元。而且从芯片制程特殊性而言，集成度更高性能和功耗都提升，体积下降。大部分消费者难以退回旧一代的芯片，所以赢者通吃，落后者剩菜残羹。今时今日，除了MAC电脑，绝大部分的PC都采用intel芯片，而且服务器端也有见长。但是浪潮之中PC市场相对饱和，移动端崛起了10多年，更多的芯片战场转移到嵌入式去了。往后的就是终端芯片为主的变革，比如ISP，算法芯，AI芯等。</li>
<li>chap 7 关于微软以及windows。真正意义第一个垄断性的超级公司就是微软了，因为其卖软件的特性，利润率极高。在PC时代无人匹敌，依赖windows系统，其绑定的PC软件也得到天然的优势。而后移动互联网浪潮来临，微软虽然没有攀上浪尖，却也从游戏方面入手取得不俗的成绩。由此奠定了大公司希望涉猎互联网的全领域利润，比如搜索，社交，移动支付，手机等等。但始终只留下其最擅长的产品。拥有再多第二第三列的产品并不足以让一家企业成为真正帝国性一样富有影响力的机构。另一方面也告诫我们，需要专注，成为单一方向最拔萃的人。</li>
<li>chap 8 Oracle，一家以数据库闻名的企业。大概是大二还是大三的时候，首次听到这家公司的名字，但依然不得其意。大概跟IBM类似较多开展企业级相关的服务和技术支持。</li>
<li>chap 9 思科通信巨头，主营交换机路由器等互联网基础设施。早期是互联网用于大学公司等，主要方便学术与办公交流。由于各个子网的网络协议不一，思科早期推出多协议路由终端成为子网间互联的关键。同样互联网的浪潮帮助思科乘风破浪。另外当时红杉资本热衷投资给年轻的穷人，因为越是贫穷越有成功的欲望和拼搏精神。西方的思科，东方的华为。华为起步只比思科晚4年，同样掌握当时世界最前沿的通信技术，通过大批雇用IBM顾问从而实现早期国际化的管理水平。至今华为找到手机移动的增长点，焕发最强民企的生命力。2020年统计，华为的科研投入遥遥领先于第二名的腾讯一倍有余，狼性文化下也涌现超级年薪的PHD。</li>
<li>chap 10 YAHOO互联网入口，世界第一个黄页。除了整理了当时杂乱的互联网资信，吴军老师认为YAHOO制定了互联网行业重要的规则：开放，免费，基于流量的盈利模式。我认为这与当今的开源思想很有共同点，区别在于开源目前变现能力还不够。为此，我特意知乎了开源目前的盈利模式，主要有以下七个：1.多种产品线，开源版推广，专业版收费； 2.提供技术文档，培训以及二次开发作为收入（不是长久之计）； 3.应用服务托管，相当于云部署； 4.软硬一体化，开放软件，销售硬件 5.开源作为附属品 6.提升品牌和服务（大公司） 7.市场等其他 回到雅虎，当时手工密集式整理互联网信息，使之成为大部分人连接互联网的入口，加之互联网的快速发展使其价值和流量不断提升，也找到广告盈利的模式。当然资信发达引入的问题是对搜索引擎的迫切需求，以至于后来GOOGLE的崛起。当时浪潮之大，以至于当时只要有流量就有钱和投资，大量tricks如何提升网站流量的热度，狂热之下，互联网泡沫来临。网站大洗牌，小公司以及虚胖的大公司都一泻千里，被浪潮拍打在沙滩上。度过寒冬的以及寒冬后的企业，迎来了新的社会资源和人才，缺少老旧对手也能快速崛起。</li>
<li>chap 11 惠普，一家如今印象只有打印机和PC产品的企业。殊不知一直以来是硅谷神话的代表，也是最早进驻斯坦福工业园的企业，开启了新时代校企合作的高效模式，高校培养顶尖人才，企业吸收并转化成遍布全球的产品。上世纪的惠普主营三大板块包括科学仪器，医疗器材以及计算机和外设，而后经营不合理导致只拆分剩计算机以及外设。</li>
<li>chap 12 没落贵族-摩托罗拉，最早做通讯设备的公司，包括军用民用无线电，大哥大到2G手机。然而固有利润高的市场抑制了内部4G的推广，可见连内部都产生抑制新技术和新产品的现象，资本市场的竞争是十分激烈的，尽管存在反垄断法，但公司一旦占据行业的龙头位置，后来者就再难以从同样的赛道超越，除非是科技或者产品以质级的飞跃。</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>高效程序员的45个习惯</title>
    <url>/2022/02/25/reading/%E9%AB%98%E6%95%8845/</url>
    <content><![CDATA[<h3 id="态度决定一切"><a href="#态度决定一切" class="headerlink" title="态度决定一切"></a>态度决定一切</h3><h4 id="关于代码"><a href="#关于代码" class="headerlink" title="关于代码"></a>关于代码</h4><p>直面代码问题，解决问题，而非寻根问底。勇于承认自己不知道答案，这会让人感觉放心。一个重大的错误应该被当做是一次学习而不是指责他人的机会。团队成员们在一起工作，应相互帮助，而不是互相指责。</p>
<p>使用代码复审，单元测试等方法。看到更小、更易于理解的代码模块。</p>
<p>建议：不要坠入快速的简单修复之中，要投入时间和精力保持代码整洁</p>
<h4 id="关于会议"><a href="#关于会议" class="headerlink" title="关于会议"></a>关于会议</h4><p>会议的目标也是一样的，聚焦于如何解决问题上。“你不需要很出色才能起步，但是你必须起步才能变得出色。”</p>
<p>团队决策可用的技术：设定最终期限，避免陷入无止境套路，没有最好，只有更适合；逆向思维，先认识优点再认识缺点，相对优的方案；设立仲裁人，让每个人都有发言机会，专注调停；一旦做出决定，全力支持做出的决定。</p>
<p>做法：</p>
<ul>
<li>尽力贡献自己的好想法</li>
<li>只有更好，没有最好</li>
<li>用合适的词和理由解释你为何不赞同，并提出明确的问题</li>
<li>做正确的事，要诚实有勇气说出实情</li>
</ul>
<h3 id="学无止境"><a href="#学无止境" class="headerlink" title="学无止境"></a>学无止境</h3><p>迭代和增量式的学习：每天计划一段时间学习新技术，记下那些你想学习的东西或者术语，以后有时间深入研究它。</p>
<p>了解新行情，参加本地的用户组活动，参加研讨会议，如饥似渴地阅读。了解新技术试图解决什么问题。有规律的午餐会议。</p>
<p>技术变化：计算设备昂贵转向人力成本，加快开发效率很重要。完全转入新的开发环境，相关集成的工具链，养成新的习惯。如饥似渴地阅读。不停地问为什么。</p>
<p>像减肥一样，一点点的成功也是很大的激励。小而可达的目标让每个人全速前进。庆祝每一次难忘的成功：共享美食和啤酒以及团队聚餐。</p>
<h3 id="交付用户想要的"><a href="#交付用户想要的" class="headerlink" title="交付用户想要的"></a>交付用户想要的</h3><p> 拥抱变化，及时让客户做决定，让设计指导，引入合适技术指导开发。</p>
<p> 敏捷开发强调提早集成，频繁集成，实现自动化部署，使用演示获得频繁反馈，使用短迭代增量发布来经常发布新功能。</p>
<p>开发者能做最重要的决定是：判断哪些是自己决定不了的，应该让企业主做决定。</p>
<p>提前准备几个选择方案：从业务角度介绍每种方案的优缺点以及潜在成本和收益。具体到每个选择对时间和预算的影响，如何权衡。让你的客户做决定。</p>
<p>CRC（类-职责-协作）卡片设计，包括类名，职责（应该做什么）以及协作者（要完成工作，要与什么对象一起工作）；好的设计是一张地图，它也会跟着进度进化。</p>
<p>最后合理地使用技术，考虑这个技术真能解决遇到的问题吗，你会被它栓柱吗，维护的成本是多少。你的代码写得越少，需要维护的东西越少。根据需要选择技术。</p>
<p>随时保持可发布的系统代码：1.在本地运行测试，通过所有单元测试和系统测试 2.检出最新代码，再编译运行测试 3.提交代码 （小步伐迭代集成测试）</p>
<p>版本管理可以阅读《版本控制之道-CVS》，一般需要每天集成几次，而非2～3天才集成一次。且考虑生产环境上的移植部署。</p>
<p>缩减演示会议的次数，只有做完一些东西可以演示的时候，大家才碰面。演示是用来让客户提出反馈的，有助于驾驭项目方向。如果缺少功能或者稳定性的时候，不应该拿来演示，那只能让人生气。可以及早说明期望的功能：让客户知道，他们看到的是一个正在开发中的应用，而不是一个最终已经完成的产品。</p>
<p>使用短迭代，增量式发布的解决方案：分析、设计、实现、测试以及获得反馈的整个过程，小步频繁前进是敏捷方法的核心。</p>
<p>确定使用户可用的核心功能，然后把它们放到生产环境中，越早交到用户手里越好。如果打算1～2年再交付，则应该分解成一块块有用的小系统-再进行增量开发。</p>
<p>有一堆理由值得尽快将软件交到用户手里：1.交到手里就有了收入，有更好的理由继续为产品投资； 2.从用户得到反馈，进一步理解什么是用户真正想要的。 3.及时了解市场真实的变化</p>
<p>使用短迭代和增量式开发让开发者更专注于自己的工作，本地构建-&gt;演示活动-&gt;内部发布-&gt;交付用户。增量开发：发布带有最小可用功能块的产品，每天增量开发中，使用1～4周左右迭代周期。</p>
<p>具体操作：</p>
<ul>
<li>每4周迭代开发中，加入一周的维护任务</li>
<li>迭代时间不够可能是任务量大，也可能是迭代周期短，要把握好自己的节奏</li>
<li>如果功能背离了用户需求：多半是迭代周期太长</li>
<li>提供的价值是什么：这必须去询问用户</li>
</ul>
<p>业务安排上：提议先构建系统最小、可用、核心的功能；下一个迭代时，用户选择新功能开发还是取消；</p>
<h3 id="敏捷反馈"><a href="#敏捷反馈" class="headerlink" title="敏捷反馈"></a>敏捷反馈</h3><p>守护天使：自动化单元测试；在日常工作检查输出的过程更上了一层楼，保留了相关值并持续化可自动执行，每个语言均有对应的单元测试框架。</p>
<p>1.有了单元测试，就可以每次编译或者构建代码的时候运行测试，测试的结果和编译器一样，如果测试没有通过，那就跟编译没有通过一样糟糕。</p>
<p>2.接下来构建机器，不断获得最新版本的代码，然后编译代码并运行单元测试，如果有错误及时让你知道。这样一来，你就有了守护天使，这也是最容易修复错误，成本最低的时候。</p>
<p>拥有了回归测试，你就可以随意重构代码，根据需要进行实验、重新设计甚至重写代码；从而无须如履薄冰。《单元测试之道》《项目自动化之道》</p>
<p>自动化测试的理由：</p>
<ul>
<li>及时提供反馈</li>
<li>提高代码健壮性</li>
<li>有用的设计 </li>
<li>自信的后台</li>
<li>解决问题的探测器</li>
<li>可信的文档</li>
<li>学习的工具，加深API认知<br>单元测试就像高空作业的安全带：单元测试只有达到一定覆盖率才发挥作用，测试并非越多越好，只有有效才有质量</li>
</ul>
<p>测试驱动设计时从代码用户的角度思考，有助于设计出更有用和更一致的接口，消除过度复杂的设计，专注于真正需要完成的工作。先用再实现。</p>
<p>判断工作进度最好是看实际花费的时间，而非估计的时间。可以使用待办事项，可以物理上从列表中划掉或者标识它是已完成的状态。当加入新任务，先排列它们的优先级，然后加入待办事项中；类似地，你可以有个人的待办事项，当前迭代的待办事项或者整个项目的待办事项。</p>
<p>实际操作：</p>
<ul>
<li>找一个合适的时间粒度分割事项，比如说3～4小时。</li>
<li>关注功能的完成，而不是日程安排</li>
<li>注意花足够的时间工作，少量的时间管理自我</li>
<li>一周40小时，得准确计算思考编程的时间是减去会议、电话、电子邮件及相关活动时间之后的。</li>
</ul>
<p>面对用户的反馈：每一个抱怨背后都隐藏一个事实。找出真相，修复真正的问题。<br>实际操作：</p>
<ul>
<li>没有愚蠢的用户，只有自大的开发人员</li>
<li>“它就是这样”不是好的答案</li>
<li>如果代码解决不了，考虑通过修改文档或者培训弥补</li>
<li>你的用户可能会阅读所有文档，记住所有内容，但也可能不会。</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>六年前的自己</title>
    <url>/2021/12/22/rizhi/%E5%85%AD%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<p><a href="https://csrjtan.github.io/">https://csrjtan.github.io/</a><br>回看六年前的自己，摘录一些当时有意义的文段</p>
<h3 id="23岁的生日"><a href="#23岁的生日" class="headerlink" title="23岁的生日"></a>23岁的生日</h3><p>重读六年前的自己，用文字记录对这个世界的感受和认知，那时候的自己充满了希望，虽然能力配不上欲望而渐渐失落，但依然希望找到那种年轻的感觉。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>当年的愿望：</p>
<ul>
<li>工作上：提高编程和学术能力</li>
<li>生活上：爱家人，爱生活，爱伴侣</li>
<li>日常上：坚持读，坚持写，坚持学，坚持感受，坚持表达</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">《成长的天空》 </span><br><span class="line">我沉浸在自己的世界里</span><br><span class="line">写着无关是非的歌谣</span><br><span class="line">点蓝的笔触</span><br><span class="line">划过了年轻的天空</span><br><span class="line">一只飞鸟带走我的青春</span><br><span class="line">还我，岁月沉淀的帽子</span><br><span class="line">轻声说道</span><br><span class="line">年轻总不是永远的借口</span><br></pre></td></tr></table></figure>

<h3 id="回看中秋自省的自己"><a href="#回看中秋自省的自己" class="headerlink" title="回看中秋自省的自己"></a>回看中秋自省的自己</h3><p>经过5年起起落落，心态转变得很明显甚至于有点得过且过的样子，现在自己比年轻的自己多了一点能力和资源，却失去了做大梦的勇气和毅力。希望自己能依然不断找到人生的兴奋点，勇往直前地去追寻探索，从今天开始，真正的为自己而活，不在乎别人的眼光，不在乎可能会失去的安逸。</p>
<h3 id="家人信息简要"><a href="#家人信息简要" class="headerlink" title="家人信息简要"></a>家人信息简要</h3><p>爸：1961.7.8，牛，会计。爱好军事政治经济唱歌。性格硬朗好面子。优点：精神好，能干，勤勉<br>妈：1961.11.12，牛，仓管（退休）。爱好家庭家人养生。优点：节俭，爱戴我们，慈祥<br>哥：1987.8.9，兔，前端全栈，爱好广泛潮流酷玩。优点：工程能力强，迁就随和<br>为：1992.08.13，猴，算法攻城狮。爱好：声乐，运动，游戏。优点：耐受力，随和</p>
<h3 id="选书策略"><a href="#选书策略" class="headerlink" title="选书策略"></a>选书策略</h3><p>出版社-&gt;作者-&gt;版次-&gt;印次-&gt;印数</p>
<h3 id="追逐幸福的要素"><a href="#追逐幸福的要素" class="headerlink" title="追逐幸福的要素"></a>追逐幸福的要素</h3><ul>
<li>找到喜欢的工作，有收入又受到社会尊重</li>
<li>减少上下班耗费的时间，有充足的社交时间</li>
<li>对国家和社会有政治热情，有参与度</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不论曾经的彼此多么幼稚，多么可笑</span><br><span class="line">终有一天我们都变得成熟；</span><br><span class="line">也终有一天，我们都会老去；</span><br><span class="line">可是，却没有人可以永远不长大，</span><br><span class="line">却没有人可以永远年轻，</span><br><span class="line">成熟，有时候会让人心痛、很无奈。</span><br><span class="line">那个时候才会懂得：</span><br><span class="line">爱情本不是件该执着的事情。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>博客迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>2021_年终总结</title>
    <url>/2021/12/31/rizhi/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>回顾今年的自己，提出个人思见和应该执行改进的点。</p>
<h3 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h3><p>年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于opencv的图表绘制上，另外一个是基于opencv的户型图分割项目。由于数据来源没有统一化，基于图像的户型分割较大的不稳定因素；关于图表绘制核心的功能就是解决文本碰撞的问题；期间还用网页自动化点击脚本完成了一个疫情一日一表的自动填表功能，节省了每日必做的无用行为。之前看到python基于桌面图像识别可以自动匹配鼠标行为，这是原来项目的高级方法。作为一个程序员，生活中如果出现较多的重复度大的行为与操作时，就应该开始考虑自动化脚本或者程序去自动执行。</p>
<p>跳出在顺德的工作后，由于皮肤问题变本加厉，有很长的一段时间我是在家休养，每天除了睡得非常多以外，大部分时间都在宅家度过，让老父母亲着实担心不浅。这个坏毛病是在香港最后几年养成的，当时的这个研究生和本科的一些坏习惯让我最终渐渐失去了对自我的自律以及对自我的期待，对自我的希望。我当时像泄了气的气球，一泻千里，由此深深的陷入人生以来的低谷。也许是我的叛逆期晚到了，从那一刻我才开始体会到一点点的自由，自我开始向这个世界抗争拉扯。大学以前，一直认为只要读书好就可报答家人，这种被动的内驱力面对真正的困难和社会的残酷竞争时是多么的无力。</p>
<p>害怕失败，害怕白眼，害怕接受自己的无能，于是我有点像堕落的高材生，开始逃避，开始偷懒。一些不良的嗜好也让我的人格不再高尚，比如毫无意义重复的游戏世界,比如深陷情绪的孤独，<a href="%EF%BC%8C%E6%AF%94%E5%A6%82%E5%94%BE%E6%89%8B%E5%8F%AF%E5%BE%97%E7%9A%84%E9%BB%84%E8%89%B2%E5%BF%AB%E4%B9%90%EF%BC%8C"></a>还好从没接触直达灵魂的药品了。值得庆幸的是，我自小深深的记住了外婆反复强调的千万不能碰毒品。这句话是外婆对孙辈们的苦口婆心，也是最低最低的要求了。经历的这一切，我深知自己自制力的脆弱，应减少对不良事物的好奇与冒险，希望我这一辈子都能与成瘾性隔绝，否则我很容易预见到自己再一次的堕落。</p>
<p>这一切就发生在今年上，直到年中我也发现自己不能再给自己找借口了，在香港的时候无人约束，我可以随意的挥霍光阴。在家里宅的话，亲戚朋友尤其家里人很是担心，特别是我生命中最重要的两个女人：母亲和媳妇。于是到了年中，虽然皮肤病依然没有康复，但我已经厌倦了作为一个毫无价值的人存在于世。心底里，我渴望世界听到我的声音，因我存在而改变，而不是一直作为一个边缘人物存在着。但很多时候我还是会给自我设限，会介怀于我虚度的光阴，介怀于我曾经的失败，介怀于我那并不闪闪发光的履历。但无论如何，我收拾行囊，重新出发了，以一个更谦卑的姿态。</p>
<p>在boss上，我海投以及面笔了好些公司，最终我依然没有自信的奔赴大公司，我选择了一家智能硬件作为自我调整的起点。6月15日我再次翻开人生的新篇章，来到了深圳塘朗，追逐体面的生活，希望用自己的文字，代码以及思想发光发亮。至此，在HOLA已然半年，早期为算法组开展论文研讨学习，后续是全程跟进云台项目的算法实现：包括SLAM，三维重建以及点云墙面分割的核心模块。目前为止虽然基本的核心功能已然完成，但仍然有很多内容需要补齐学习，为后续真正的工程化作知识储备。另外如CTO所说，HOLA这个平台是否适合我继续发展个人的职业规划以及技术路径。工作这半年，大部分时间是孤身负重前行的，业务最相似的还是算法组的兄弟朋友们：研发一哥，世攀；玩乐达人，炯彬；斯文大汉，啸天；苦比打工人，东勇；除此还有系统大佬jazzy以及CTO聪哥。基本上，公司内部对三维这块是一片空白的，所以产生了硬币的两端：无人监管我的工作，无人能准确评价我的工作；无人关注我的工作，无人协同我的工作。未来的一年希望能加快项目的落地应用，产生实际的价值。</p>
<h4 id="2022上半年的工作指标"><a href="#2022上半年的工作指标" class="headerlink" title="2022上半年的工作指标"></a>2022上半年的工作指标</h4><ul>
<li>薪资至少上调20%</li>
<li>SLAM 14讲的book &amp; homework</li>
<li>PCL的系统学习</li>
</ul>
<h3 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h3><p>关于今年的学习，从上文就可知确实进步较慢，但要相信人生是个不断经历的过程，如同重看五年前的自己一样，当时虽然稚嫩但充满阳光和希望；如今的自己，虽有初老心态，但尚未暮年，重新出发，为时未晚。</p>
<p>已读书单：《浪潮之巅》，《为我的身体养阳气》，《C++ Primer》</p>
<p>在读书单：《SLAM 14讲》，《三十岁，一切刚刚开始》</p>
<p>学习方向&amp;主题： C++， SLAM， 三维重建， std标准库， STL模板， 算法导论， LEETCODE</p>
<p>重新开始经营我的github,以及我的个人博客，记录生活的点点滴滴，一部一脚印。三十年以来的输入足够我输出一些东西了，积极认真地输出自己的观点，去和这个可爱的世界碰撞摩擦吧！马上要三十岁了，走在这个重要的节点上，希望自己成为有担当，值得信任，靠谱的人。更希望自己打破自我设限的枷锁，去勇敢探索生活，探索生命，去冒险，去舞蹈，去歌唱，这是每个人唯一一次的人生阿，已然安然度过了30年了，没有什么再让你值得畏惧了，那就放手去做吧。</p>
<h3 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h3><p>首先是运动和减肥！！！</p>
<p>关于生活，最大的关键字可能是安逸，但影响最大的词应该是疾病。无论精神上还是身体上，长时间缺乏对生活的激情与热情容易致抑。更进一步引起睡眠紊乱，身体亚健康的各种慢性病也冒出来，比如湿疹，这两年简直痛苦不堪，夜不能寐。战胜严重的皮肤慢性病，需要持之以恒的耐心，需要强颜欢笑的乐观，需要时刻注意控制行为。多少次深夜里，我甚至愿意用各种誓言，只为换来自己的身体健康。年轻时拥有的一切是如此轻而易举而又在后来失去时觉得弥足珍贵。</p>
<p>困扰我工作生活生命已经两年的湿疹，在近期终于在积极阳光的生活中得到一丝丝的控制，明年我并不奢望和贪心康复，只希望面积能缩小至不影响作息，毕竟良好的作息和生活习惯是每一天元气能量的源泉。</p>
<p>另一方面，说到生活，最应该被提起的就是家人与朋友。关于朋友，虽然有丝许的进步，得到现在算法组同事的互动来往，但可能是自身技术不够牛逼或者是不苟言笑，或者是不够真挚待人。虽然入职半年，但真正有互动能见面言笑的人可能两个手也数得完，希望新的一年也继续勇敢表达自我，真挚对待别人。然后就是最重要的家人，来到深圳后，在顺德待的时间大幅减少，一个月能有两次回家看看就不错了。另外和珊珊结婚后尚未育儿，随着年岁渐长，年近30的我们迫切需要生儿育女了，而这一点更是双方家长最迫切的事情了，希望明年能有新的突破。说实话，没有完美的工作，只有称心如意的工作，在HOLA的工作让我慢慢走出自己人生的低谷，work-life balance的双休与无加班节奏也很好的平衡我身体上遇到的种种问题。虽然作为程序员毫无忠诚度可言，但我从心底感激和感恩HOLA，让我重新支棱起了自己，不再是瘫倒地上的烂泥，明年愿自己慢慢成为高飞天际的雄鹰。</p>
]]></content>
      <categories>
        <category>年终总结</category>
      </categories>
  </entry>
  <entry>
    <title>经典话术</title>
    <url>/2021/12/21/rizhi/%E7%BB%8F%E5%85%B8%E8%AF%9D%E6%9C%AF/</url>
    <content><![CDATA[<p><code>格林先生说</code></p>
<p>1.yes and 法则<br>通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”</p>
<p>正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。<br>e.g. …确实会…,不过有时候…</p>
<p>2.即兴表达框架-PREP<br>Point-&gt;Reason-&gt;Example-&gt;Point</p>
<p>3.SCQ-A<br>提出问题，寻求帮助。Situation-&gt;Conflict-&gt;Question-&gt;Answer<br>常用于工作汇报，包括问题背景，问题原因，主要问题，如何解决。</p>
<p>4.FFC 赞美法则<br>Feel-&gt;Fact-&gt;Compare<br>（Feel）我觉得今天你搭配很有气质<br>（Fact）因为腰线能突出身形<br>(Compare) 这是我今年见到的最潮的连衣裙</p>
<p>5.引导选择<br>模板：是…还是…/ 是否…/ 要不要…,好处是这样<br>提问封闭，只需选择，无需开放式思考</p>
<p>6.万能表达：观察+感受+需求+请求<br>（观察）珊珊，你最近每晚都是凌晨才睡觉<br>（感受）我觉得有干扰<br>（需求）而且我希望你能身体健康，这样白天才精神<br>（请求）所以希望明天开始，能不能11点准时关灯</p>
<p>7.汇报FFA法则<br>Fact-&gt;Feeling-&gt;Action<br>最近工作如何，我感觉主要是跟不上进度，接下来一周我会如何做。</p>
<p><code>蛋蛋碎嘴子</code></p>
<p>1.工作汇报老手<br>新项目砸了=进行了积极的试错，吸收了宝贵的经验<br>数据不好看=有较大的增长空间<br>啥也没干=稳定发展<br>接下来依旧打算啥也不干=保持现有成绩，稳定成果<br>数据稍微好看一点=取得了较大增长</p>
<p>2.一个人一直墨迹跟你说话不好意思打断，可以尝试：<br>“好的”，“那确实不错”，“的确是这样”，“嗯你说的对”</p>
<p>3.接到不想做的任务可以说<br>“领导，我仔细看了一下这个需求，我这里可能存在XXX方面的短板”<br>“想要推进这个事情的话，我可能需要XXX方面的支持”<br>暗含“我可说清楚了，办砸了可不赖我”</p>
<p>4.当想刺探秘密时，先说结论，然后观察对方的反应<br>“我们公司下个月要发奖金你”</p>
<p>5.汇报模板：<br>【日常在做什么】+【做这件事的目的】+【做这件事有什么困难】+【怎么做得更好】</p>
<p>6.当别人布置杂活，不想做就死死的抠细节<br>“你说的这件事大概什么时候需要？”<br>“这个时间点具体到几点？”<br>“我是微信给你还是邮箱给你？”<br>“那我需要先出一个计划，你帮我看看安排合不合适？”<br>如此一来，极大增加之间的沟通成本，让对方崩溃而不想给你安排了。</p>
<p><code>清闲的九夏</code></p>
<p>1.别人求你办事，如果想要资源置换，就说：“这事儿不太好办阿”</p>
<p>2.拒绝借钱：“你知道的，我最近XX，也没钱。”</p>
<p>3.汇报话术：”这边，我们做了A，B两种方案，各有优势，希望给点意见，看选哪个做比较佳“</p>
<p>4.经常使用分点叙述<br>我是这么认为的，第一，X；第二，X；第三，X。</p>
<p>5.请求帮忙时，先提出自己的办法<br>”经过了解，遇到一些问题，我的解决办法是XX，大家看看还有没有更好的办法?”<br>不论多平庸都要提一个。</p>
<p>6.请求帮忙“不好意思，可以插一下队吗？因为我真的很急”</p>
<p>7.聊天想聊下去：揪住对方的关键词+延伸过往彼此交流过的信息</p>
<p>“今天又加班，很烦”<br>“怎么又加班，又是上次那个领导吗”</p>
<p>“我爱豆塌房子了”<br>“哪个，上回说的那个吗，我去”</p>
<p>8.不想聊下去<br>“今天又加班”<br>“怎么又加班，这算啥事”</p>
<p>“我爱豆塌房子了”<br>“又他”</p>
<p>9.领导说“辛苦了”<br>你：“从中学到很多，很有收获。”</p>
<p>10.领导的节日问候（也可不发，上班的时候再热情问候即可）：<br>尊称+感谢+互动+祝福</p>
<p>11.说服别人，改变一个人的想法<br>认同立场，替换观点。</p>
<p>自嘲： 是阿…而且…</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>知乎</tag>
      </tags>
  </entry>
  <entry>
    <title>努力方向之正解</title>
    <url>/2021/12/21/shisan/%E5%8A%AA%E5%8A%9B%E6%96%B9%E5%90%91%E4%B9%8B%E6%AD%A3%E8%A7%A3/</url>
    <content><![CDATA[<p><code>文章摘自微信公众号：十三先生手记</code></p>
<p>人们总是误以为”方向不对，努力白费“</p>
<p>所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？<br>看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？<br>于是乎，在很长一段时间里，你在方向的选择上纠结，大量耗费了精力；久而久之，方向选择对你的意义就逐步降低；久而久之，你在没有了方向的努力中不断的迷茫，努力所收获到的就多半不如意；久而久之，你便自然逐步丧失了努力的动力。</p>
<p>所以其中蕴含<em><strong>真正的智慧</strong></em>是什么呢？<br>此刻，十三先生要你深深的明白：对于你真正想要成就的方向而言，基于外在目标而牵引你的行动方向就是你的迷障，基于你内心真正愿意去做的方向才是真正利于你达成整体目标的方向。若是你在每次做选择之际，你都按你内心真正未权衡的意愿立刻去着手行动，并在行动的过程中，实事求是的不断优化解决遇到的问题，而不是在事前先拿你预设的可能遇到的问题去和你的资源做权衡匹配，在来做方向选择的决定，假以时日，必定你会不断收获到你真正想要收获到的利益。</p>
<h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>与其纠结于方向正确，不如尽快行动起来，尽快在行动中感受自我。那些未经反复驱动，内心自发想要完成的事情就是你人生的正确方向了。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>奖惩精要</title>
    <url>/2021/12/27/shisan/%E5%A5%96%E6%83%A9%E7%B2%BE%E8%A6%81/</url>
    <content><![CDATA[<p><code>摘自微信公众号十三手记</code></p>
<p>自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚至因为错用奖惩而受到惩罚。</p>
<h4 id="首先，奖惩时为了更好的控制别人吗？"><a href="#首先，奖惩时为了更好的控制别人吗？" class="headerlink" title="首先，奖惩时为了更好的控制别人吗？"></a>首先，奖惩时为了更好的控制别人吗？</h4><p>你以为是，但必定不是。若是为了更好的控制别人，为何那么多人用了奖惩手段并未真正收到真正控制别人的真正效果？  </p>
<h4 id="那么，奖惩到底是为了什么？"><a href="#那么，奖惩到底是为了什么？" class="headerlink" title="那么，奖惩到底是为了什么？"></a>那么，奖惩到底是为了什么？</h4><p>那是为了促进对方强大的同时与其交心。  </p>
<h4 id="何时奖惩？"><a href="#何时奖惩？" class="headerlink" title="何时奖惩？"></a>何时奖惩？</h4><p>尽快，及时  </p>
<h4 id="何处奖惩？"><a href="#何处奖惩？" class="headerlink" title="何处奖惩？"></a>何处奖惩？</h4><p>公开的要公开，私下的要私下，否则就是反效果。</p>
<p>此刻，十三先生要你深深的明白：在你的人际关系管理中，若是你的奖惩只是你控制别人的手段，那你的手段最多只是临时效果，最终必定不能如你所愿，甚至受到反效果；若是你的奖惩是在用心反馈你对别人行为有效性的重视，是为了及时给予对方诚意的肯定或是改进提醒，那你就是在用奖惩的办法促进对方强大的同时与其交心，假以时日，你必定能收获到奖惩给你的人际关系处理的真实力量和价值。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>恐惧之破</title>
    <url>/2022/01/05/shisan/%E6%81%90%E6%83%A7%E4%B9%8B%E7%A0%B4/</url>
    <content><![CDATA[<p>你有恐惧吗？  想必有的<br>你想解除恐惧吗？  必定想的<br>可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。</p>
<h3 id="那么恐惧从何而来？"><a href="#那么恐惧从何而来？" class="headerlink" title="那么恐惧从何而来？"></a>那么恐惧从何而来？</h3><p>从曲解真相而来</p>
<h3 id="恐惧是什么？"><a href="#恐惧是什么？" class="headerlink" title="恐惧是什么？"></a>恐惧是什么？</h3><p>是你的人生大礼给你的提醒。</p>
<h3 id="此刻要你深深明白"><a href="#此刻要你深深明白" class="headerlink" title="此刻要你深深明白"></a>此刻要你深深明白</h3><p>二元有相世界，恐惧来自于你对真相的无视或者曲解。如此，只要你无视或者曲解了真相，必定会形成相应的恐惧；如此，你内心恐惧的形成是为了提醒你搞清楚恐惧背后的真相；如此，若是你逃避真相，你必定会反复感受到恐惧；如此，当你心有恐惧，请直面你所恐惧的东西，并搞清楚其真相，当你一旦真正清楚真相，恐惧必定就会随之而消失；与此同时，必定你就能在搞清楚真相的过程中收获到你人生的大礼。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>接纳麻烦</title>
    <url>/2022/01/18/shisan/%E6%8E%A5%E7%BA%B3%E9%BA%BB%E7%83%A6/</url>
    <content><![CDATA[<p><code>摘自微信号十三手记</code></p>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>什么是麻烦？<br>是那些你特别想忽略或粗糙嫌弃的事。</p>
<p>麻烦是什么？<br>是你逃避直面真实自己的托词。</p>
<p>既然如此，还有真正的麻烦吗？<br>没有，麻烦都是必要的，都是来成就你的礼物。</p>
<p>类似的麻烦为何会反复出现？<br>因为你一直没有透过直面解决这些麻烦去解除生命中的困惑。</p>
<p>如此一来，不解决麻烦的结果是什么？<br>你始终不能真正感受自己内心的智慧与力量。</p>
<h3 id="此刻你要明白"><a href="#此刻你要明白" class="headerlink" title="此刻你要明白"></a>此刻你要明白</h3><p>在你的人生旅程中，你与别人的整体差距，就是你们解决麻烦的程度的差距，如此，当你遇到你以为的麻烦，请不要嫌弃和忽略，请你力所能及的去具体解决，尽量到位，因为在这些解决行为里，不仅有你值得提升的认知，也有你智慧与力量的创造，也有你生命活性的体验，更加你累积人生成就的大礼。</p>
<h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>虽然我们需要惜时，但也要耐心解决问题，大大小小的问题都是提升自我的途径，尽管麻烦也要去接纳。如果重复度大的则可以考虑自动化去解决。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>洞见睡眠</title>
    <url>/2021/12/28/shisan/%E6%B4%9E%E8%A7%81%E7%9D%A1%E7%9C%A0/</url>
    <content><![CDATA[<p><code>摘自微信号十三手记</code></p>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>定时睡眠和睡眠时长时一个人精神饱满的关键吗？<br>你以为是，其实不是。<br>为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  </p>
<ul>
<li><p>人的系统能量是怎么消耗的？<br>眼耳鼻舌身的功能运行和头脑里的各种念想。 </p>
</li>
<li><p>系统能量是怎么补充的？<br>适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。</p>
</li>
</ul>
<h3 id="要你深深明白"><a href="#要你深深明白" class="headerlink" title="要你深深明白"></a>要你深深明白</h3><p>二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  </p>
<p>如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。</p>
<h3 id="附赠"><a href="#附赠" class="headerlink" title="附赠"></a>附赠</h3><p>失眠是什么？<br>是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？</p>
<h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>人类对自己的认知是那么的不足，对睡眠也几乎是一无所知。十三手记表达了令人惊奇的观点，人恢复能量和元气并不完完全全依赖于睡眠。虽然大部分时候睡眠质量很重要，但同时也没有必要一直纠结于自身的睡眠质量。能量的恢复是自然而然的，而人的感官意识都是无时无刻在耗费精力的，但当你关闭了这些感官和意识时，其实你就已经在休整，你的能量就已经是呈现上升的态势。所以，关于休息，我们应该更少焦虑的纠结于睡眠，更多关注我们感官意识的状态。这就是所谓的闭目养神，同时冥想可能可带来注意力的自主调整和加快能量恢复，以致于很多人推荐。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>能量朗读</title>
    <url>/2021/12/20/shisan/%E8%83%BD%E9%87%8F%E6%9C%97%E8%AF%BB/</url>
    <content><![CDATA[<p><code>文章摘自微信公众号：十三先生手记</code></p>
<p>小时候，我就一直渴望幸福，一直渴望坚强；<br>小时候，我就一直渴望正直，一直渴望善良；<br>小时候，为就一直渴望快乐，一直渴望成长；<br>现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！<br>我知道，我不能再这样消极的逃避。<br>我知道，我不能再这样平庸的彷徨。<br>我知道，我要全力迸发我的热情；我要勇敢的收复我的希望。<br>我知道，我要真诚的对待身边每一个人，这样，我才能被每一个人真诚的对待；<br>我知道，我要用心的对待每天的时光，这样，我才能收获每天的力量；<br>我知道，我要帮助身边每一个人达成心愿，这样，大家才能帮助我实现梦想。<br>从今天起，我要打败我的懒惰，重拾我的阳光；<br>从今天起，我要改变我的粗俗，提升我的修养；<br>从今天起，我要挑战我的懦弱，找回我的坚强；</p>
<p>我是为爱这个世界而来<br>我要让世界因我的爱而更加美丽，<br>我要让世界因我的爱而更加安康，<br>我要让世界因我的爱而更加真诚，<br>我要让世界因我的爱而更加和畅。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>金钱之二元整体观</title>
    <url>/2021/12/22/shisan/%E9%87%91%E9%92%B1%E4%B9%8B%E4%BA%8C%E5%85%83%E6%95%B4%E4%BD%93%E8%A7%82/</url>
    <content><![CDATA[<p><code>摘自微信号十三手记</code></p>
<p>金钱只是金钱的样子吗？<br>你以为是，但必定不是。</p>
<p>首先明白，金钱的有形或无形形式为什么存在？<br>是为了运行金钱背后的实际价值</p>
<p>对于金钱而言，一般有三种状态：获取，存储，使用<br>三种状态在一起就是你金钱的留存路径，也是金钱存在的整体。</p>
<p>此时，十三先生要你深深的明白：只要你对待金钱的这三种状态不平衡，只偏向执着于其一或其二，被你忽略掉的部分都必定会让你体验到金钱的匮乏，你都必定会经历金钱的反复障碍，无论金钱多少，你都是被金钱牵制捆绑的奴才；若是你懂得了今天讲的金钱整体性，在金钱对境中，把这三部分中你当时所处的部分运作出最大的价值和质感，并透过自己的障碍和痛苦主动去发现自己的单边局限，并及时主动透过逆袭自己的小气和不尊重金钱之粗糙的行为来扩大自己的金钱进出通道和格局，如此，假以时日，你便不会被金钱三部分中任何一部分障碍，你便会逐步成为内心富足的金钱主人。</p>
<p><strong>一条手记</strong>：二元有相世界，金钱是你自己其中一个相，你对待金钱的状态就是你对待自己和对待世界的状态。</p>
<h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>这边十三先生提到关于金钱从获得，存储和使用三个维度分析，从提升个人金钱观上升提高个人世界观。</p>
<ul>
<li>关于获得：没有人会嫌钱多，在尽个人最大努力以及精力下，应最高效提升金钱的获得效率。</li>
<li>关于存储：有了上一步，存储才有意义，如何有效理财，提升金钱的有效价值；另外，足够的存储才能带给个人底气和自信。</li>
<li>关于使用：根据上两步的情况，具体规划用度，及时安抚自我，时刻让自己充满斗志与动力。</li>
</ul>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>金钱的实际价值</title>
    <url>/2021/12/24/shisan/%E9%87%91%E9%92%B1%E7%9A%84%E5%AE%9E%E9%99%85%E4%BB%B7%E5%80%BC/</url>
    <content><![CDATA[<p><code>摘自十三手记</code></p>
<p>若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。</p>
<p>但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。</p>
<p>此时，十三先生要你深深的明白：二元有相世界，金钱的实际价值必定等于你诚意付出之时创造出的相应实际价值，但是你却一直有种想付出更少收获更多金钱的想法，所以你不自知的不愿搞清楚。因为一旦你搞清楚了这个核心原理，你就无法继续投机取巧，就无法继续偷懒了。但是，只要你真正诚意看懂并接纳了这个关键点，你就能更加务实的面对自己所面对的一切人和事，你才能因此而尽可能减少多余的动作，你才能因减少多余动作而减少障碍环节，你才能因减少障碍环节而减少不必要的消耗，如此，你整体的行动才能更加高效，反而你才能走上人生各种成功的捷径。</p>
<h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>回忆过去，确有种种如此的感觉。上高中和大学的时候，每一分钱都来自父母，舍不得多花乱花。出来工作后，可能得益于名校光环，匹配一些不太核心的岗位时候，工作的艰辛就远不及当初，于是感觉金钱就来得容易了，殊不知金钱其实也流入并不富裕，只因个人消费比较简单，只花该花的钱，只享受该享受的事。于是渐渐，也失去了赚大钱的欲望，虽说不能没有，但明显不及年少时的强烈，花钱也比较随意，一直没有大的积蓄，理财也是三天打鱼四天撒网的状态。希望认真对待工作中的每一件事，认清金钱来之不易，努力增长自己的财富，也能合理地用度。</p>
<p>另外，而立之年，却没有多余的精力和财产赡养父母，更多的是让父母为自己忧心忡忡，目前为止，依然算不上才社会能游刃有余，立足四方。此后，应<strong>挖掘自己的兴趣目标，提升个人在社会中的价值</strong>。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>需求正解</title>
    <url>/2022/01/10/shisan/%E9%9C%80%E6%B1%82%E6%AD%A3%E8%A7%A3/</url>
    <content><![CDATA[<p><code>文章摘自微信公众号：十三先生手记</code></p>
<h3 id="何谓需求"><a href="#何谓需求" class="headerlink" title="何谓需求"></a>何谓需求</h3><p>你清晰什么是真正的需求吗？<br>必定不清晰</p>
<p>那什么是真正的需求？<br>对境需求，不是过去的需求，更不是未来的需求。</p>
<p>什么是境的需求？<br>是适合你当时的实际需求。</p>
<p>需求有几种？<br>两种：人事物本身，以及附加给人事物的概念</p>
<p>人事物本身是什么意思？<br>是人事物本来的功能和价值。</p>
<p>概念需求是什么意思？<br>是附加到人事物的功能和价值上的概念，是让你产生欲望后误以为自己需求的迷障。</p>
<p>谁附加的概念？<br>是你自己或者是外界。</p>
<h3 id="此刻要你深深的明白"><a href="#此刻要你深深的明白" class="headerlink" title="此刻要你深深的明白"></a>此刻要你深深的明白</h3><p>由于你的贪心，你分不清自己真正的需求。所以，你过去总被人事物的附加概念牵动而消耗了大量资源和精力，所以只有你真正懂得了你要的是人事物本身的功能和价值，你才不会被这些附加的概念干扰和误导，你才真正懂得了珍惜物命，你才真正懂得了珍惜缘分，你才真正懂得了珍惜人生。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>高效行动</title>
    <url>/2022/01/18/shisan/%E9%AB%98%E6%95%88%E8%A1%8C%E5%8A%A8/</url>
    <content><![CDATA[<p><code>摘自微信号十三手记</code></p>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>为什么那么忙，却没有达到想要的效果？<br>因为多余动作太多</p>
<p>什么是多余动作？<br>对事情发展本身不直接着力的动作</p>
<p>多余动作为什么会出现？<br>因为你害怕不利的结果来得太快，所以，你内心的恐惧感让你不自知的搞了这些动作来减缓进展的速度，虽然你以为这样做可以更好的优化过程，可以更快得到有利的结果。</p>
<p>多余动作会产生什么效果？<br>你以为会让事态进展更高效，但，其实必定会生出更多跟事件发展本身无关的新问题，进而形成层层阻碍。</p>
<h3 id="此刻你要明白"><a href="#此刻你要明白" class="headerlink" title="此刻你要明白"></a>此刻你要明白</h3><p>在事情发展过程中，只有你的行为尽量实事求是的直接着力于事件本身，你才能尽量减少多余动作产生的能耗，你才能让事件在发展过程中更加清晰的优化，你才能让事件的进展更加高效。</p>
<h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>对于自我而言，其实是逃避真正问题的根因。有时候明知道面前有必须要解决的问题，但是总是希望从外界或者其他不相关的内容中得到方法，而非从自身出发努力去解决问题。因此往往会偏离有价值的行为，以及有效的解决真正问题，因此才一直无法有效解决问题。</p>
]]></content>
      <categories>
        <category>十三手记</category>
      </categories>
      <tags>
        <tag>十三手记</tag>
      </tags>
  </entry>
  <entry>
    <title>软技能</title>
    <url>/2022/02/21/reading/%E8%BD%AF%E6%8A%80%E8%83%BD/</url>
    <content><![CDATA[<p>主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。</p>
<h3 id="职业篇"><a href="#职业篇" class="headerlink" title="职业篇"></a>职业篇</h3><p><code>你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然丧失。职业发展的驱动力一定是来自个体本身。记住：工作属于公司的，而职业生涯却属于你自己的。 -- 厄尔.南丁格尔</code></p>
<h4 id="自我驱动"><a href="#自我驱动" class="headerlink" title="自我驱动"></a>自我驱动</h4><p>拥有商业心态：时刻将自己的软件开发事业当作一桩生意来对待，不要被愚弄了。当你为了谋生一头扎进代码世界时，其实你和中世纪小镇开铁匠铺的铁匠没有什么差别。不要让特定的岗位或者角色固化了你和你的整个职业生涯。转变心态，从卖身契的仆人转变为拥有自己生意的商人，从仰人鼻息的弱势地位转换成自我治理和自我引导的主动地位。</p>
<p>要做到：</p>
<ul>
<li>专注于你正在提供怎样的服务，以及如何营销这项服务；</li>
<li>想方设法提升你的服务；</li>
<li>思考你可以专注为哪一特定类型的客户或行业提供特定的服务；</li>
<li>集中精力成为专家，专门为某一特定类型的客户提供专业的整体服务；（只有真正专注于一类客户，才能找到非常好的工作）<br>再者，如何更好地宣传你的服务，更好地找到你的客户。</li>
</ul>
<h4 id="沟通能力"><a href="#沟通能力" class="headerlink" title="沟通能力"></a>沟通能力</h4><p>建议阅读《人性的弱点》–Dale Camegie</p>
<p>每个人都希望自己重要，永远不要批评，学会换位思考，思考他人而言什么才最重要。将注意力转移到他们身上，用他们的角度思考问题，什么让他们索然无味，什么让他们聚精会神。你的建议出发点理由可能是“让软件更稳定”或者“让软件按时交付”。</p>
<p>当你学会了如何以令人愉悦的方式与他人互动和交往时，自己的生活也越来越愉快，通过习得这些技能，积累了让自己获益终生的财富，这样的价值无法用金钱衡量。</p>
<p>还要学会逃离“毒瘤”，争吵时试着果断站在对手一边，结果可能会大吃一惊。</p>
<h4 id="关于面试"><a href="#关于面试" class="headerlink" title="关于面试"></a>关于面试</h4><p>高级的入职流程：<br>从期待加入的公司里找到联系人-&gt;与联系人建立紧密关系-&gt;获得个人推荐-&gt;面试</p>
<p>正式面试：自信的展示自己的能力，展示工作需要做的内容</p>
<p>从雇主的角度，招聘员工是一项投资，需要花费时间和金钱，当然希望看到良好的投资回报率。<br>明确知道自己要做什么以及怎样去做，需要集中精力证明自己是无需督促也能发自做好事情的员工。<br>确保自己技术能力，一直阅读技术书籍和博客，花时间提升自己的技能。<br>为了获得面试经验，也要去面试，多多练习。</p>
<p>采取行动：</p>
<ul>
<li>即使无需努力找工作，也要整理一份清单，列出想去的公司以及你认识的这些公司的人。</li>
<li>如果公司一个人都不认识，那么制定计划至少去认识其中的一位员工并与之建立联系。</li>
<li>在所在领域找出至少一个本地用户组，参与聚会，把自己介绍给尽可能多的人。</li>
</ul>
<p>关于职业的选择：雇员、独立咨询师（外包服务）、创业者，从雇员稳定开始，结识各类型的朋友并向他们了解如何走上以及走好他们的路。</p>
<p>关于求职：缩小工作机会池，提高被录取的机会；如何选择专业：</p>
<ul>
<li>现在或以前工作的公司里，有哪些主要痛点？你能成为一名专门解决这些痛点的专家吗？</li>
<li>有没有一种特定的工作无人能做，或者缺乏经验丰富的人？成为这个领域的专家，你会获得大量业务。</li>
<li>在各种会议上和用户组中哪些话题最常出现？</li>
<li>哪类问题你回复得最多，无论是针对同事还是Stack Overflow这样的网站上？<br>尽可能地具体，使得在细分市场上更抢手。</li>
</ul>
<p>采取行动：</p>
<ul>
<li>列出想到所有软件开发的专业领域，从广义范畴逐一细分，看看你能细化到多具体</li>
<li>当前的专业领域是什么？如果没有，希望选择专攻哪个领域</li>
<li>主流的招聘网站看看自己的专业领域市场行情如何，确定专业化道路让自己受益还是限制了自己的选择</li>
</ul>
<p>关于公司<br>| 公司规模 | 优点 | 缺点 |<br>| 小 | 承担多种责任，工作影响力大 | 没法安静写代码，稳定性差 |<br>| 中 | 稳定，加班少 | 变化慢，难涉及前沿技术 |<br>| 大 | 完备的流程和规范，培训以及大型有影响力的项目 | 官僚主义，只负责代码库的小部分，难受关注 |</p>
<h4 id="晋升之路"><a href="#晋升之路" class="headerlink" title="晋升之路"></a>晋升之路</h4><p>在更多金钱还是更多责任的选择上，长远看，正确选择几乎是更多责任。</p>
<p>如何让自己承担更多责任：</p>
<ul>
<li>不受重视的项目，你能负责它吗</li>
<li>你能帮助团队里的新人快速成长吗</li>
<li>你能负责文档制作流程，并保证及时更新文档吗</li>
<li>哪项工作没有人愿意做，你愿意承担并将其简化或者自动化吗</li>
</ul>
<p>如何让自己引人注目:</p>
<ul>
<li>每天记录自己的活动日志-把日志以周报的形式发送给经理</li>
<li>提供演讲或培训-选择一个对团队有用的话题</li>
<li>发表意见-只要在会议上就这么做，或者只要你能得到的机会就这么做</li>
<li>保证“曝光度”-定期与老板会面，确保你经常被注意到</li>
</ul>
<h4 id="如何成为专业人士"><a href="#如何成为专业人士" class="headerlink" title="如何成为专业人士"></a>如何成为专业人士</h4><p><code>The War of Art: 成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</code></p>
<p>认真规划自己的：已经做了什么、计划做什么、有哪些障碍</p>
<p>培养正确的习惯，推荐阅读《习惯的力量》</p>
<h4 id="关于赢得自由：为自己工作"><a href="#关于赢得自由：为自己工作" class="headerlink" title="关于赢得自由：为自己工作"></a>关于赢得自由：为自己工作</h4><p>辞掉之前需要一个切实可行的计划，强烈推荐用业余时间启动想创建的业务，等从该业务中产生足以维持生计的收入时，你再转为全职。迫于现实现金流的问题，制订一个计划：什么时候就得认怂做回雇员。以后总可以东山再起，只要没有巨额信用卡债务，没有房屋抵押，没有从亲朋好友借钱而影响到自己的未来。</p>
<p>为自己工作的意义：1.会比为别人工作时更努力 2.你会更热爱在做的事情，但不要指望持续很久，时间的流逝会使热情变得捉摸不定甚至消逝殆尽 3.突如的工作量使得不止工作8小时<br>推荐书目《So Good They Can’t Ignore You》</p>
<p>如何行动<br>1.减每月开支并累积资金:确保生存<br>2.保障常规工作之余每周投入15小时做自己的事情，并坚持执行半年以上，确保收入<br>3.提前计算好确切日期，早在一年前做好准备</p>
<h4 id="关于创业"><a href="#关于创业" class="headerlink" title="关于创业"></a>关于创业</h4><p>了解孵化器或者加速器，注入小额资金换取公司小量股份，通常只持续数月并快速成长。<br>采取行动：</p>
<ul>
<li>研究以下一两家心仪的创业公司历史，注意它们是如何开始以及获得融资的</li>
<li>创立时是单创始人还是多创始人</li>
<li>创始人还成功创立过其他公司吗</li>
<li>什么时候开始获得融资的，获得了多少</li>
<li>这些公司启动时是否加入加速器计划</li>
</ul>
<h4 id="关于远程办公"><a href="#关于远程办公" class="headerlink" title="关于远程办公"></a>关于远程办公</h4><p>接受新的工作模式以及迎接新挑战</p>
<ul>
<li>时间管理上：建立缜密规律的时间管理，提前计划安排，迎接变化</li>
<li>自我激励上：建议阅读《驱动力》-Daniel Pink,用习惯驱动自己，排除干扰</li>
<li>孤独感：周而复始孤独一个人肯定会产生负面影响，走出去，寻找社交生活：参与本地的软件开发者小组聚会，到咖啡馆或者书店工作，规律性到健身房或者运动<br>开始关注允许远程工作的公司，或者完全分布式工作的团队</li>
</ul>
<h4 id="关于成功"><a href="#关于成功" class="headerlink" title="关于成功"></a>关于成功</h4><p>“假装自己能成功”，进行自我心理暗示：</p>
<ul>
<li>你仿佛已经具备了成功完成任务的技能和天分</li>
<li>你仿佛已经成为自己想成为的那类人</li>
<li>仿佛战斗已经结束，而你大获全胜，因为你深知如果自己坚持不懈，胜利就在眼前</li>
<li>你仿佛已经对即将踏上的未知道路驾轻就熟</li>
</ul>
<p>这是有意识地让自己身处逆境，迫使自己学会拼搏。正是在生活中有这样的心态，带领自己勇敢走向未知领域，坚信挑战与机会并存。如果想学会“假装自己能成功”，你就必须拥有破釜沉舟的勇气。</p>
<p>采取行动：</p>
<ul>
<li>诚实地评估一下自己。面对困境，你的心态如何？当遭遇新问题或者不熟悉的问题时，你会怎样做？回想以下，上一次面对困难或者不熟悉的形势时，你是怎么做的？</li>
<li>你该怎样树立一种自信而不自负的心态？自信与自负之间的区别是什么？为了强化“假装自己能成功”的能力，你现在应该做什么？</li>
<li>小练习：有目的地将自己置于困境，演练以下自己既定的应对策略。</li>
<li>Fake it till you make it</li>
</ul>
<h4 id="关于技术"><a href="#关于技术" class="headerlink" title="关于技术"></a>关于技术</h4><p>很多情况下，解决问题并不只有一个好的或者是最好的方法。同理，最好的编程语言、框架、操作系统甚至是文本编辑器都不会只有一种，你可找到最适合自己的技术和编程语言以及工具。</p>
<p>采取行动：</p>
<ul>
<li>列出你钟爱的所有技术，或者你觉得更胜一筹的技术</li>
<li>针对表的每一项，想想它为什么吸引你，你做了哪些比较确定它确实“更胜一筹”？你真的使用过它们的竞争对手吗？</li>
<li>挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公讨论为什么他们喜欢，更进一步，你试着去使用</li>
</ul>
<h3 id="自我营销"><a href="#自我营销" class="headerlink" title="自我营销"></a>自我营销</h3><p>营销追求“实现价值在先，要求回报在后”，你的营销越好，你的才华才能表现得越发淋漓尽致，自我营销的正确方式是为他人提供价值。</p>
<p>自我营销无非就是学习如何控制好要传达的信息，塑造好自己的形象，扩展信息传达的人群。当开始营销自己的时候，你就是在积极地管理自己的职业生涯，有目的地选择好如何塑造自己，以及将塑造好的自己主动推送给那些对你感兴趣的人。</p>
<p>采取行动：</p>
<ul>
<li>如果你还没有博客，开通一个吧。想想看，你会专注在哪些主题上？</li>
<li>给你的新博客至少想出20篇文章</li>
<li>现在做一个时间表，列出开通博客的具体时间以及内容编排</li>
</ul>
<h4 id="打造引人注目的品牌"><a href="#打造引人注目的品牌" class="headerlink" title="打造引人注目的品牌"></a>打造引人注目的品牌</h4><p>品牌的四要素：要传递的信息、品牌一致性、品牌的视觉符号、品牌的曝光率</p>
<p>信息是目的性，传达承载的情感诉求;一致性、视觉符号以及曝光容易增强影响力；</p>
<p>步骤：</p>
<ul>
<li>明确传达的品牌信息</li>
<li>挑选细分市场</li>
<li>创建品牌口号</li>
<li>创建电梯内销售概要：电梯时间介绍完自我</li>
<li>创建视觉符号</li>
</ul>
<h4 id="博客的重要性"><a href="#博客的重要性" class="headerlink" title="博客的重要性"></a>博客的重要性</h4><p>一方面面试评估技术技能非常困难，博客包含丰富的相关信息，代码示例以及深入分析；另一方面流量足够大可以用于推销自己产品的平台；带来一定的业界声望，提高你的沟通能力以及组织自己的思想转化成能力。提高内容的质量，尽量尝试编写高质量的博客文章。</p>
<p>提高访问量：尝试建设性的评论，并附上个人链接。增加方便分享的功能。</p>
<h3 id="为他人增加价值"><a href="#为他人增加价值" class="headerlink" title="为他人增加价值"></a>为他人增加价值</h3><p><code>不要努力成为一个成功的人，而要努力成为一个有价值的人   --阿尔伯特.爱因斯坦</code></p>
<h4 id="给人们想要的东西"><a href="#给人们想要的东西" class="headerlink" title="给人们想要的东西"></a>给人们想要的东西</h4><p>通过现象看本质，找到方法来提供自己的价值。唯一的标准是通过你的方法，可以有效解决真实的问题。</p>
<p>采取行动</p>
<ul>
<li>什么样的内容会让你觉得最有价值？有没有哪个特别的博客会让你每周都去阅读，或者哪个博客的内容如此有价值让你欲罢不能，以至于一点都不想落下</li>
<li>你可以提供给自己的受众或者你的细分市场最大价值是什么？你认为什么样的内容对于你的受众群体而言最有价值的？</li>
<li>善于运用社交媒体：如何界定价值：你认为有用或有趣的。</li>
</ul>
<p>通过社交媒体分享的内容</p>
<ul>
<li>博客文章：转帖一些博客文章或者自己的博客</li>
<li>新闻报道：转载一些有趣的文章，尽量与自己的细分领域有关，或者与软件开发相关</li>
<li>励志名言：名人名言，特别是鼓舞人心、非常流行的名言警句</li>
<li>技巧、小窍门：任何你所了解的特殊技巧或者知识，别人会很欣赏</li>
<li>幽默故事：发一点幽默故事挺不错的，但是一定要确保好笑，另外千万别冒犯别人</li>
<li>吸引人的问题：这是一个很棒的吸引你的听众并和他们互动的方法</li>
<li>自己的一些推广方式活动：别太多，并且跟其他内容混合在一起<br>正如产品和服务90%免费一样，分享的内容也要90%有价值的</li>
</ul>
<h4 id="保持活跃度"><a href="#保持活跃度" class="headerlink" title="保持活跃度"></a>保持活跃度</h4><p>社交媒体一大挑战需保持活跃度，如若没有持之以恒，很容易丢掉大量粉丝。选择一到两个心仪的平台，不同社交具有不同的功能划分。</p>
<p>演讲的地雷：对公众面前演讲怀有恐惧<br>没关系，大部分人都有此症，公共演讲恐惧症是最常见的一种恐惧症。对此你可以做什么呢？好的，有相关组织让你在舒适的氛围中克服公共演讲的恐惧，你可以加入他们。也可以从较小规模场合的演讲做起，比如会议上站起来发言，或者在一群你熟知的人面前做讲座。当你对此越来越轻车熟路，你就可以到更令人生畏的地方公开演讲了。<br>你要记住，作为人类，我们拥有良好的适应能力。只要你把一件事情重复足够多次，你自然就会接纳它。伞兵第一次跳出机舱时候都很害怕，但是经过成功跳伞之后，恐惧最终都会消失。如果你一直坚持公共场合发表演说，你一定会应对自如，恐惧感终将消散。</p>
<h4 id="做培训"><a href="#做培训" class="headerlink" title="做培训"></a>做培训</h4><p>刚开始可以在免费视频网站youtube做一些教学，然后写书或者开展课程。<br>采取行动：</p>
<ul>
<li>列出你所在地区的所有用户组清单，同时列出你能去发表演讲的代码训练营清单。挑选一个自己觉得比较有把握的专题发表一次演讲</li>
<li>列出网上提供的哪些针对软件开发人员的培训课程，无论是付费的还是免费的，关注并记录找出成功的培训师是怎么做的</li>
<li>试着以截屏视频的形式创建自己的短时培训课程，然后在免费网站上发布</li>
<li>创建一个列表，列出所有你可以发表演讲的主题</li>
</ul>
<h4 id="关于写书"><a href="#关于写书" class="headerlink" title="关于写书"></a>关于写书</h4><p>如果某人在某特定主题写过书或者发表过文章，那么他们可能是这方面的专家。当人们坐下来读你写的书时，你会长期被他们关注。</p>
<p>一方面，书籍畅销带来收入；更重要的是，通过出版，你能获得更广泛的知名度和声望。</p>
<p>明确一个有市场需求的主题，同时能充分展示你作为该领域专家的学识。主题越聚焦越专注，越容易证明你的专业能力。准备一份翔实的写作提纲，清晰概括自己的写作目的，明确本书的目标读者，以及为何认为本书会成功，为何你是写作本书的最佳人选。最后就是每天坚持去写，开始主要是写些博客文章，随着实践推移你的写作技能终将会得到提升。</p>
<p>采取行动：</p>
<ul>
<li>查看亚马逊与软件开发相关的畅销书列表，找出哪种类型的书销量最好</li>
<li>写长篇大作之前，先从杂志文章这样的短篇着手。找出一些发行量不高的软件开发类杂志，提交一篇文章摘要。</li>
</ul>
<h4 id="关于脆弱的自尊心"><a href="#关于脆弱的自尊心" class="headerlink" title="关于脆弱的自尊心"></a>关于脆弱的自尊心</h4><p>如果你想成功，你必须要学会收起自己脆弱的自尊心，勇敢走出去，别害怕让自己出丑。每一个著名的演员、音乐家、专业运动员和公共演说家都曾有过表现不佳的时候，他们自觉地选择了出走困境，尽力而为。成功终将会来，你不可能专注做某件事而毫无长进，你只要坚持足够长的时间就会有所收获。你的生存之道就是不必太在意，别害怕被人看作傻瓜。</p>
<p>采取行动：</p>
<ul>
<li>让自己勇敢起来，今天就是你的大日子。走出去做一些令你害怕的事情，大小都不要紧，迫使自己处于不自在的环境，并提醒自己“这没什么大不了的”</li>
<li>现在，重复上一步，至少每周一次</li>
</ul>
<h3 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h3><p><code>教育就是当一个人把在学校所学全部忘光之后剩下的东西 -爱因斯坦</code></p>
<p>代码世界变化万千，每天都有新的技术出现，昨天学的东西今天可能没有意义。<br>如何学习成为当代最重要的课题。动手实践和教会他人让我们学得更好。</p>
<h4 id="快速学习"><a href="#快速学习" class="headerlink" title="快速学习"></a>快速学习</h4><p><code>教育的首要目标，并不在于“知”而在于&quot;行&quot;   -赫伯特.斯宾塞</code></p>
<p>可以把学到的新知识重新应用于实践，看看新方法能否解决已有问题。你可以继续探索新领域，发现需要解决的新问题。<strong>以解决实践过程中发现的问题</strong>为目标，在向着知识前进的道路上重复这个循环，周而复始。</p>
<p>采取行动</p>
<ul>
<li>你最近一次自学了什么？你的学习过程是怎样的？</li>
<li>你上一次对兴趣爱好感到激动是在什么时候？你对此爱好了解多少？你是经过刻苦学习才培养此兴趣的，还是通过玩耍自然而然地就学会了？</li>
</ul>
<p>快速学习三个要点：</p>
<ul>
<li>如何开始：想要开始使用自己所学的，我需要掌握哪些基本知识</li>
<li>学科范围：我现在学的东西有多宏大？我应该怎么做？在开始阶段，我不需要了解每个细节，但是如果我能对该学科的轮廓有大致的了解，那么将来我就能发现更多细节</li>
<li>基础知识：不止在开始阶段，要想使用一项特定的技术，我需要了解基本的用户案例和最常见的问题，也需要知道自己学的哪20%就能满足80%的日常应用</li>
</ul>
<h4 id="十步学习法体系"><a href="#十步学习法体系" class="headerlink" title="十步学习法体系"></a>十步学习法体系</h4><p>基本思想：要对自己要学的内容有个基本了解，了解自己不知道什么足矣。然后利用这些信息勾勒出学习的范围，即需要学哪些内容，以及学成之后又会收获什么。依靠这些知识，你可以找出各种资源来帮助自己学习。最后你可以创建自己的学习计划，列出要去学习哪些相关课程，筛选学习材料，只保留能帮助自己达成目标的优质内容。</p>
<p>一旦如此，你就可以把控自己的学习计划中的每个关键点，通过学习-实践-掌握-教授（Learning Doing Learning and Teaching, LDLT)的过程获得对该学科的深刻理解，也向着自己的目标前进。</p>
<p>十步学习法：</p>
<ul>
<li>1.了解全局</li>
<li>2.确定范围</li>
<li>3.定义目标</li>
<li>4.寻找资源</li>
<li>5.创建学习计划</li>
<li>6.筛选资源</li>
<li>7.开始学习，浅尝即止</li>
<li>8.动手操作，边学边玩</li>
<li>9.全面掌握，学以致用</li>
<li>10.乐为人师，融会贯通<br>这是通过“聚焦学习范围，让你关注重点内容”的快速学习方法，迫使你通过“自我探索”和“主动教学”的方式将真正重要的内容印刻在自己的大脑中。</li>
</ul>
<p>采取行动：挑选一项你已经烂熟于胸的技术，看看你能否明确以下几点</p>
<ul>
<li>如何开始使用它</li>
<li>该技术的应用广度如何</li>
<li>利用你需要知道的20%发挥出80%功效</li>
</ul>
<h4 id="1-6只做一次"><a href="#1-6只做一次" class="headerlink" title="1-6只做一次"></a>1-6只做一次</h4><p>第一步需要对学的课题做一些基础性研究，有一个全局性的了解。第二步聚焦一个范围，尽可能保持专注。第三步清晰定义成功的标准。第四步查阅尽可能多的与自己所选主题相关的资源，此时无需考虑资源的质量。第五步学习是自然的过程，层层递进。需要<strong>找出最短的时间从A到Z的正确路径，并且到达沿途的重要地标</strong>。另一个好方法就是观察别人是如何教你这个感兴趣的主题的，此时可以翻看第四步中的图书目录，如果五位不同的作者都把内容分解为相同的模块和顺序，那我就会遵循这样的方法制订自己的学习计划。</p>
<p>至此你知道自己要学什么以及以什么顺序学，那么就是时候决定使用哪些资源来完成自己的学习任务了。在收集了与研究主题相关的所有资源，制订了个人学习计划后，对资源筛选并挑选最有价值的几项来帮助实现自己的目标。</p>
<p>采取行动：</p>
<ul>
<li>挑选你想要了解的一项课题，实际演练上述六个步骤。可以从规模较小的课题开始，以让自己习惯这一过程。注意的是，一定要实际运用。</li>
</ul>
<h4 id="7-10循环往复"><a href="#7-10循环往复" class="headerlink" title="7-10循环往复"></a>7-10循环往复</h4><p>学习到这一步开始最有趣的部分，你从掌握恰到好处可以开始的基础知识开始，然后通过操作来学习，同时也通过自我探索收集问题。之后，你掌握了足够多有用的知识。最后你能将自己学到的教给他人，以此来弥补自己在学习过程中的不足，同时通过深入思考巩固知识。</p>
<p>第七步谨慎两种错误：1.在知之不多的情况下盲目开始，即行动太快； 2.行动之前准备过多，即行动太晚。 要取得平衡，你掌握的知识恰到好处足以让你开始学习，但又不会多到让你无力探索。</p>
<p>第八步边玩边学，无需提前了解全部内容，首要的事就是亲自操作和亲身体验。通过探索和实践来学习，这个过程中你的大脑自然地产生各种问题：它是如何工作的？如果我这么做，会发生什么？我该如何解决这个问题？这些问题引导你走向真正重要的方向。回头寻找问题答案时，不只这些问题迎刃而解，你记得的东西比学习的要多得多。不要担心结果，勇敢探索。把一些暂时没有答案的问题记录下来，下一步有机会找出这些问题的答案。</p>
<p>第九步：好奇心时学习特别是自学的重要组成部分，通过动手操作法线的一些没有答案的问题，利用先前收集的资料深入学习，满足自我的好奇心。这一步阅读文字、观看视频、与人交流都是必要的手段，不要害怕回头去操作。给自己足够多的时间去深入理解自己的主题。</p>
<p>第十步： <code>你告诉我的，我都忘了。你教会我的，我都记得。让我乐在其中，我就一定能学会  -富兰克林</code></p>
<p>用多种方式将自己所学教给别人，可以是博客，可以是视频，也可以是探讨，将自己所学解释给他。重点在于要花实践将自己学到的东西从大脑提取出来，以别人能够理解的方式组织起来。经历整个过程之后会法线，有很多你以为自己明白了的知识点其实并没有摸透，于是之前没太明白的东西联系起来，简化已有的信息，将它们浓缩并经常复习。</p>
<p>教授知识的途径：</p>
<ul>
<li>撰写博客文章</li>
<li>创建YOUTUBE视频教程</li>
<li>发表演讲</li>
<li>与朋友或爱人进行对话探讨</li>
<li>在线上论坛回答问题</li>
</ul>
<p>最后的思考：学会自我教育需要奉献精神和辛勤工作，但你也能从中收获无比丰厚的回报。十步学习法不能让你瞬间聪明伶俐，但可以让你的学习过程结构化，而非漫无目的地扎进浩渺的知识海洋中。这利用人天生的好奇心来帮助你吸收更多的知识，而我们大多数人正是通过好奇心驱使才学到很多本领的。</p>
<p>采取行动：</p>
<ul>
<li>针对学习计划的每一个模块执行7-10，完成学习实验</li>
<li>现在不要跳过任何步骤，研究以下如何让该方法奏效，然后尝试优化它</li>
</ul>
<h4 id="寻找导师"><a href="#寻找导师" class="headerlink" title="寻找导师"></a>寻找导师</h4><p>检查单：</p>
<ul>
<li>他们做到了我想要去做的？</li>
<li>他们曾经帮助他人做到了我想做的？</li>
<li>他们现在取得了什么可以展示的成就？</li>
<li>你能和这个人和睦相处？他充满智慧吗？</li>
</ul>
<p>寻找导师的方式最好从自己的熟人、家人和密友推荐。<br>采取行动：</p>
<ul>
<li>在寻找之前，必须明确，需要导师帮忙解决什么问题？思考为何需要导师，希望从中获得什么</li>
<li>列出所有你认识的人作为导师，希望别人也帮忙列出</li>
<li>想一想为了换取导师帮助，你能给他提供什么</li>
</ul>
<p>拥有一位导师是非常好的，而成为导师更是好上加好。回馈社会是非常重要的，不仅因为这是一件正确的事，还因为它可以让你自己受益无穷。</p>
<p>花点时间思考你会比谁领先一步，谁正在努力学习你已经知道的东西。</p>
<p>做导师的好处：</p>
<ul>
<li>帮助他人时的成就感</li>
<li>深入学习和领悟知识的途径</li>
<li>你的徒弟有朝一日会帮到你</li>
<li>自身的成长。帮助别人成长的过程也就是你成长的过程</li>
</ul>
<p>如何成为授业者：</p>
<ul>
<li>想出一个你可以教别人的话题并教给别人。本周你要尝试一些教学方法，如写博客、发表演讲、录制截屏等</li>
<li>当你做教学准备的时候，要特别注意这些准备工作时如何提升自己对某个主题的理解的。对那些没打算去教别人就不可能发现的自己的知识短板要多加注意。</li>
</ul>
<h4 id="关于学位"><a href="#关于学位" class="headerlink" title="关于学位"></a>关于学位</h4><p>拥有学位不是成功所必需的，但它肯定是一个限制性因素。软件开发不同于其他行业：领域总是不断变化，每天都有新的框架和技术问世，在教育机构中培养能适应真实工作环境的软件开发人员几乎不可能的。等到教材出版、课表排好的时候，很多东西已经改变了。但这不意味着软件开发不存在永恒不变的核心领域：比如算法、操作系统、关系型数据库理论和编译原理等主题。然而在工作中很少用到学校的技能，我们大部分的工作是如何使用新技术完成工作，很少需要回溯到计算机科学的本源，因此工作中取得成功的直接因素还是相关的工作经验。</p>
<p>采取行动：</p>
<ul>
<li>如果你没有学位，看看哪些网上课程或者业余课程可以参加。看看它会花费多少，多久会让你毕业</li>
<li>如果你决定完全放弃学位教育，那么一定要确保自己有一个非常出色的作品集。花时间把写过的代码整理一下，证明你了解所做的工作。</li>
</ul>
<h4 id="找出自己的短板"><a href="#找出自己的短板" class="headerlink" title="找出自己的短板"></a>找出自己的短板</h4><p>如何识别？ 看看哪些工作上花费大量时间，可以改进的重复性劳动，自己没有完全理解的东西，你回答不出来的面试题。</p>
<p>采取行动：</p>
<ul>
<li>接下来随身带个记事本，把遇到不明白的地方记下来</li>
<li>在谈话中遇到自己不明白的地方，即使觉得尴尬，也要有意识地提问</li>
<li>明确一天中的某些“痛点”，弥补知识上的短板，找出消除痛点的方法</li>
</ul>
<h3 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h3><p><code>外行静坐等待灵感，内行则唤起激情努力工作。  --斯蒂芬.金</code></p>
<h4 id="一切始于专注"><a href="#一切始于专注" class="headerlink" title="一切始于专注"></a>一切始于专注</h4><p>什么是专注？  就是注意力分散的对立面，全身心投入到单个项目上。</p>
<p>始终坚信专注是提高生产力的灵丹妙药，如果能买到专注，我会刷爆信用卡，有多少all in多少，因为我知道这笔投资回报绝对有保障。实际同样如此，专注就是如此重要。</p>
<p>专注的状态：你全心工作，感觉毫不费力。进入这种状态常常需要点时间，但是一旦找到状态，你就能短期内完成很多任务。</p>
<p>如何更专注？挑选一些耗时15-30分钟的任务，完全专注做这件事，不要想别的事情，只关注这一项任务。<br>要进入专注模式需要累积冲量，必须克服将自己的思绪集中于单一任务时那种痛感。关键在于要意识到，这种痛苦和不适只是暂时的，不会持续很久。</p>
<p>这里有个开车比作专注的例子，想象进入专注就是汽车在高速公路上行驶的提速过程，车子进入高速行驶之前需要更换几个档位，如果你总是不断起步停车，那么你的整体速度就会很慢很慢。要让车回到高速换到五档需要花点时间。但是，一旦开到五档，就能轻松巡航了。</p>
<p>一个好的方法是：坐在电脑前开始打字，旁若无人，心无杂念。用自己的意志力将注意力保持在手上的任务上，起初这种专注是被迫的，但是随着冲量建立，推动你进入专注状态。你的目标是熬过前5～10分钟，如果能撑过10分钟，你就有足够的冲量继续。在这种情形下，即使轻微的分心也不大可能打破你的专注</p>
<p>采取行动：</p>
<ul>
<li>想想你极度专注于工作的时候，那是一种什么感觉？是什么令你进入这种专注模式？又是什么最终打破了你的专注。</li>
<li>时不时实践以下专注，选一项大概需要占用你半小时或者更长时间的任务，给完成这项任务分配一个完整的时间段。完全专注于这项任务，迫使自己只集中精力在这一项任务上。当你进入专注状态时，在心里记住是什么感觉。</li>
</ul>
<h4 id="提升计划"><a href="#提升计划" class="headerlink" title="提升计划"></a>提升计划</h4><p>知名的方法有：GTD(getting things done),番茄工作法以及 Don’t break the chain等等。<br>作者建议把一周的时间分配给一个一个用时不超过两小时的小任务。使用看板安排一周的活动，看板主要有几个列，你可以轻松地在列之间移动任务项。用敏捷方法管理状态包括：未启动、进行中和已完成。具体做法可参考《看板实战》(Kanban in Action)</p>
<p>计划从“季度”开始，把一年分成4个季度，会尽力列出想在本季度完成的每一个大项目，同时制订一些较小的目标。然后思考每一周每一天分别完成哪些工作，让自己清楚了解自己的主要目标是什么，同时会让自己保持专注。按照设定的轨道运转对富有成效地工很重要，应该为自己设定一些制度，确保自己获得持续的成果，把每周的任务记下来，看看可以为自己制订一个能按月周天可重复使用的方法。</p>
<p>养成使用番茄钟的习惯，学会规划自己的25分钟的任务，跟踪记录番茄钟，安排好每天每个番茄钟。一个较好的用法：高效地跟踪自己一天内完成了多少个番茄钟，并为每天要完成的番茄钟的数量设定目标。以此真正评估自己每日工作的努力程度，也知晓自己的工作能力。同时以此调整自己的任务优先级以及工作量。正常而言，每天10个番茄钟已经非常繁重，一周50～55个。刚开始6个已然困难。开始你的番茄钟挑战把！</p>
<p>采取行动：</p>
<ul>
<li>尝试使用番茄工作法，不用担心要给每天设置多少个番茄钟的目标。列出一整周完成的工作</li>
<li>一旦了解自己一周能完成多少个番茄钟，你就可以给下一周设定目标了，看看能否达标，留意你最后完成了多少工作，以及完成每天设定的番茄钟后感觉如何。</li>
</ul>
<h4 id="定额工作法"><a href="#定额工作法" class="headerlink" title="定额工作法"></a>定额工作法</h4><p>生产力提升方法主要问题：对于每天重复发生的任务似乎束手无策，且无法正常达到预期的计划</p>
<p>给计划实施定额制，长期如此可以将工作量和时间正相关并提前预估。<br>定额示例：</p>
<ul>
<li>每周跑步3次</li>
<li>每周发布一篇博客</li>
<li>写书：每天写一章</li>
<li>每周完成50个番茄钟</li>
</ul>
<p>定额不要太高，遵循一个规则：不能在定额必须完成的有效时间段内放弃。宁可降低定额的配额，保持对定额的尊重以及积极完成的习惯。</p>
<p>定额工作法的规则：</p>
<ul>
<li>挑选一项重复性任务</li>
<li>明确有效时限，在此期间该任务被重复执行</li>
<li>明确在给定的有效时间内完成该任务完成的次数配额</li>
<li>给自己承诺：一定达到定额</li>
<li>调整：适当地调高或者调低定额，但是不能在有效时间段之内调整</li>
<li>开始的时候可以将该法只应用到一件事情上<br>个人心得：定额工作法主要结合番茄钟形成个人习惯，并量化优化习惯的进度。<br>该法成功的秘密：以缓慢但稳定的节奏工作，要优于快速但缺乏持久和坚持的工作方法。关键保证方法落实到位，保证自己每天每月每周都在进展即可。定额可以帮助克服意志力的问题，习惯消除了作出决策的部分，因此可以快速转化成行动。</li>
</ul>
<p>采取行动：</p>
<ul>
<li>列出生活中需要重复做的所有任务，特别专注于那些目前你还无法持续完成但一旦完成就会从中受益的事情</li>
<li>选择至少一项任务，承诺规定时间段内完成额度。认真对待这一承诺，试着坚持至少5个时间段。想象以下，如果自己能坚持几个月或者几年，会发生什么变化。</li>
</ul>
<h4 id="对自己负责"><a href="#对自己负责" class="headerlink" title="对自己负责"></a>对自己负责</h4><p>工作主要两大动机：来自内心的冬季和来自外部奖励或者惩罚的动机<br>通常内在动机比外在有效得多：自我的激励工作，我们能完成更多的工作，也更倾向于把工作做得更好。感兴趣可研读《内驱力》</p>
<p>内部问责：<br>每天按时上下班是对雇主负责，工作的责任感促使我们做一些自主决定不愿意做的事情，培养出没有人监督自己的时候也能高效工作的自我责任感非常重要，也可称为性格或者素质。如果缺乏对自我的责任感，你将永远依赖外部动机来驱使努力工作，自我控制是自我激励的艺术，核心在于自我责任感。<br>为自己制订一些规则，以便让自己的生活井然有序。</p>
<p>外部问责：<br>请别人来监督自己履行责任，每周例会讲解自己这周以及计划的任务，通过内部讨论每人的计划互相监督落实。</p>
<p>采取行动：</p>
<ul>
<li>抉择以下：你想如何度过自己的一生，花点时间创建一些自己的规则，确保自己朝着正确的方向前进</li>
<li>创建自己的责任制度，帮助自己严格执行规则</li>
</ul>
<p>选择批量处理而不是并行处理，适合批量处理的领域：处理电子邮件，打电话沟通，修复bug，开短会</p>
<p>采取行动：</p>
<ul>
<li>停止任何并非真正的多任务并行的多任务并行，每天力争一个时间段只做一件事。番茄工作法巩固加强这一方法</li>
<li>一次性批量处理小任务，而非每天或者每周做许多次</li>
<li>找出能够真正实现多任务并行的领域，将不需要耗费脑力的活动都可与其他活动结合。任何耗费脑力的活动可于简单体育运动结合。</li>
</ul>
<h4 id="职业倦怠的解药"><a href="#职业倦怠的解药" class="headerlink" title="职业倦怠的解药"></a>职业倦怠的解药</h4><p>生产力的最大障碍之一是身体和心理上的倦怠。</p>
<p>生物新鲜感和好奇心的原因，做事的动机和兴趣逐渐濒临谷底，同时成果并未到来，因此撞倒了那堵看不见的“墙”。大部分人没有穿过那堵墙看到成功的彼岸。只要坚持，越过大部分人，你将收获少数人带来的巨大成就感以及快乐。</p>
<p>采取行动：</p>
<ul>
<li>想一想以前哪些项目是你付出努力却没有最终完成而半途而废了。是什么原因让你放弃的？你现在对这件事有什么感受？</li>
<li>下次开始新项目的时候，下定决心：你一定会完成或者完全掌握。设定规则和约束条件，强迫自己穿过那堵不可避免的墙</li>
<li>如果你正面临职业生涯或者个人生活中的一堵墙，试着去穿越它。想想墙的另一侧有怎样的收获在等着你。想象自己的动机和兴趣终将获得回报。</li>
</ul>
<h4 id="时间怎样被浪费掉"><a href="#时间怎样被浪费掉" class="headerlink" title="时间怎样被浪费掉"></a>时间怎样被浪费掉</h4><p>减少被浪费的时间，停止电视等娱乐视频，注意社交时间以及开会。<br>一些常见的时间杀手：</p>
<ul>
<li>电视</li>
<li>社交媒体</li>
<li>新闻网站</li>
<li>不必要会议</li>
<li>烹饪</li>
<li>电子游戏</li>
<li>段视频</li>
</ul>
<p>采取行动：</p>
<ul>
<li>下一周，精心地跟踪自己时间花费，获得精确的数字，了解每天每小时怎样花掉的，找出最大的2～3个时间杀手</li>
<li>如果有看电视习惯，尝试离开电视一周，度过一个“无电视周”</li>
<li>弄清楚哪些时间是可以“买回来的”，比如雇人做保洁，切断电视等</li>
</ul>
<h4 id="每天的惯例"><a href="#每天的惯例" class="headerlink" title="每天的惯例"></a>每天的惯例</h4><p>挑选好大目标，接下来想清楚怎样才能每天每周推进，最终实现目标。如果想减肥，每周要减掉几斤。</p>
<p>采取行动：</p>
<ul>
<li>你目前有哪些惯例？跟踪一下你的日常活动，看看你已经在遵循的惯例有哪些</li>
<li>选择一个大目标，以每个工作日为单位例行安排。计算以下，如果每天朝这个目前前进，一年下来你会取得多大的成就</li>
</ul>
<h4 id="培养习惯：刷新你的代码"><a href="#培养习惯：刷新你的代码" class="headerlink" title="培养习惯：刷新你的代码"></a>培养习惯：刷新你的代码</h4><p><code>成就我们的恰恰就是那些不断重复做的事情。因此，优秀不是一种行为，而是一种习惯   --亚里士多德</code></p>
<p>好的习惯推动我们前进，帮助我们成长。坏的习惯阻止我们前进，阻碍我们成长。养成良好的习惯，帮助你无需刻意努力就保持很高的生产效率。惯例是我们可以控制的，而习惯却不受我们控制。更深了解阅读《习惯的力量》</p>
<p>习惯三要素：暗示、惯例和奖励；一件事做得越多越能形成习惯，习惯力量基于奖励的价值。可变化的奖励要比已知的标准奖励更令人着迷。</p>
<p>重要的一点：找出坏习惯，改掉。比如说：坐在电脑前就不自觉浏览无聊资讯或者无益的内容。分析这个习惯过程：首先暗示是坐在电脑面前，接下来就是无益的行为，最后空虚快乐的奖励；</p>
<p>不要试图马上改变它，相反尽量找出习惯是被什么触发的。意识到奖励是期待能实现但从未兑现的承诺。一旦你能够掌控习惯本身，你就会发现自己对习惯可以保持更清醒的认知，甚至于近距离审视一个习惯而打破并改变它。同时努力找出是否有别的惯例可以代替当前这个为了某个习惯而执行的惯例，如果可能尽量寻找那些会带来相似的奖励甚至相同的奖励的事情。<br>最后也是最重要的部分是，强迫自己坚持足够长的时间，以使得新的习惯能取代旧有习惯。只要能在新习惯坚持足够久，新习惯一定会变得轻松而且自发的。</p>
<p>试想，你想要完成的大目标是什么，你是否能养成某种习惯，推动你奔向大目标的方向上前进，你的习惯越积极，你向着目标前进的过程就越轻松。</p>
<p>采取行动</p>
<ul>
<li>跟踪你的习惯，哪些习惯对你目前的生活影响最大？你认为其中多少是好习惯，多少是坏习惯</li>
<li>挑选一项你的坏习惯，试图将它转变成好习惯。开始前，现在脑海里设想一周后，一月后以及一年后你有什么成果。</li>
</ul>
<h4 id="分解任务：如何吃掉一头大象"><a href="#分解任务：如何吃掉一头大象" class="headerlink" title="分解任务：如何吃掉一头大象"></a>分解任务：如何吃掉一头大象</h4><p><code>要吃掉一头大象，每次吃一口。   --克雷顿</code></p>
<p>克服拖延的提高生产力窍门之一：分解任务，让自己更有动力去完成它们，更加稳妥地朝目标前进。</p>
<p>大型任务给人带来沉重的心理负担。面对大问题，我们倾向于花更多时间思考问题本身，而不是采取实际行动去解决问题。人类倾向于选择阻力最小的路径。另外任务越大，越难明确定义。</p>
<p>采取行动：</p>
<ul>
<li>当前你因规模惊人而放弃了哪些大任务？你会在打扫车库、写博客文章、解决复杂算法事情上拖延吗</li>
<li>选出当前面临的大问题，看看能否找到好办法将它分解成更小的任务。</li>
</ul>
<h4 id="努力工作的价值"><a href="#努力工作的价值" class="headerlink" title="努力工作的价值"></a>努力工作的价值</h4><p>努力工作是成功的必要条件，无法逃避。努力工作总是枯燥的。<br><code>人生长跑比的是谁耐力更长久，而不是看谁冲刺更有力。  --约翰杰克斯</code><br>只有少数人能到达顶峰，只有少数人能看到真正的成功，大多数人都在自己的职业生涯中碌碌无为。</p>
<p>必须认识到，想要实现目标，发挥出自己全部潜力，唯一的途径是自愿咬紧牙关，硬着头皮开始工作。</p>
<p>采取行动：</p>
<ul>
<li>你曾经投身哪些艰苦的工作中？有哪些任务你会因为不喜欢而拖延？找出其中一项任务，毫不犹豫地马上去做，养成雷厉风行的习惯并且立即在需要做的工作中付诸行动。</li>
</ul>
<h4 id="任何行动都比不采取行动好"><a href="#任何行动都比不采取行动好" class="headerlink" title="任何行动都比不采取行动好"></a>任何行动都比不采取行动好</h4><p><code>任何行动往往都比没有行动好，特别是当你一直停滞在不愉快的情势下很长时间的时候。如果这是一个错误，至少你学到了一些东西。这样一来，它就不再是一个错误。如果你仍然停滞不前，那么你就学不到任何东西。  --《当下的力量》</code></p>
<p>无所行动的原因主要源于恐惧，害怕把事情搞砸。恐惧改变，恐惧做不一样的事情。很多时候我们宁可无所作为也不愿意选择次优方案或者承担失败的风险。跑起来的汽车更容易转向。</p>
<p>采取行动：</p>
<ul>
<li><p>挑选你知道你应该采取行动的事项，回答其中的问题：阻碍我采取行动的障碍是什么？如果我需要作出选择，选择是什么，我要从哪些中作出？错误的选择导致最坏的结果是什么？如果选择失误，我可以退回去其他选择吗，代价高吗？选择之间区别大吗，我能选立即行动的次优方案吗？我当前面临的问题有助于自我发现吗？如果采取一些行动，我在正确行动之前还能调整吗？如果我不行动，会发生什么，代价是什么，浪费时间错过机会还是损失金钱？</p>
</li>
<li><p>识别过去因不采取行动而错过的机会，如购买出售股票，投资公司或创业</p>
</li>
<li><p>如上述事项没如你希望那样发展，最坏的结果是什么</p>
</li>
<li><p>最好的结果又是如何</p>
</li>
<li><p>如果当前的行动目标过于复杂，难以决断，你能做哪些一丁点的决定来继续前进？例如你决定到底学吉他还是钢琴，你可以决定先暂时学哪一样，同时决定长期学习哪一样吗？</p>
</li>
</ul>
<h3 id="理财篇"><a href="#理财篇" class="headerlink" title="理财篇"></a>理财篇</h3><p><code>金钱只是一种工具。它会带你去往任何你想去的地方，但不会取代你成为司机。  --爱思.然德</code></p>
<p>什么是资产？ 实用价值高于维护成本的东西，能够带来比自身成本更高的价值。<br>什么是负债？成本高与带来价值的东西。</p>
<p>“任何能把钱装在你口袋里的东西才是资产，任何需要你把钱从口袋里掏出来的东西都是负债。”</p>
<p>采取行动：</p>
<ul>
<li>算以下每个月你经手的资金。看看每个月赚多少钱，这些钱最后去了哪里。是否大部分资金最后都变成了负债而非资产？</li>
<li>计算一下，为了达到在银行存款500万的目标，每年你得存多少钱。再算一算，如果不做投资，你一辈子能赚够这么多钱吗？</li>
<li>开始问自己“我能攒多少钱”，而不是“我能花多少钱。”</li>
</ul>
<h4 id="薪酬谈判"><a href="#薪酬谈判" class="headerlink" title="薪酬谈判"></a>薪酬谈判</h4><p>评价和把控所服务的公司对你的看法。</p>
<p>谈判能力很大程度受声望影响。基本策略尽可能让自己的名字出现在各种媒体上。写博客、做播客、写书或文章。获得工作的方式也至关重要。</p>
<p>招聘启示是最糟糕的方式，另外一种是通过他人推荐，这种绝对比自己申请职位好很多。应该尽量尝试获得个人推荐，一方面雇主不确定你在积极找工作，因此你不显得那么被动和迫切。另一方面你具备了一定的可信度。推荐人在公司的声誉越高，你的可信度就越高。</p>
<p>另外，最佳的方式显然是一家公司知道你，然后无需任何面试直接为你提供一份职位，这是建立在你的声望上的。</p>
<p>关于出价，一条重要法则就是先出价的人会处于明显的劣势。容易失去了议价权，如果被要求先出价，可以直接说“不”。可以刻意回避“在给出一个确切的数额之前，我更愿意多了解以下贵公司，多了解一些我未来职位的工作内容。基于此，你们对该职位的预算范围是多少？”“好吧，如果你告诉我预算范围，尽管我无法准确说出期望薪酬，但是我可以告诉贵司薪酬预算是否符合心理预期。”只有确切数额的Offer是真正的offer。事实上，一旦收到offer,不可能撤销，雇主投入了大量时间面试，做出offer，不会希望重来一遍。薪酬的理由绝对不是“我需要”，而是为什么“我值得”.</p>
<p>采取行动：</p>
<ul>
<li>尽可能练习谈判技巧，克服谈判的恐惧感。下次去商店买东西，试着讨价还价，即使不成功，也会获得一些宝贵经验。</li>
<li>仔细研究以下行业薪酬水平，了解自己值什么价钱。试着找出所在领域的公司给职员的薪酬是多少，跟自己当前的薪资情况比较以下</li>
<li>即使不找工作，也可以参加一下面试。也许你会发现，当你无所求的时候，谈判更容易。说不定能通过这种锻炼找到更好的工作。</li>
</ul>
<h4 id="期权：所有乐趣之所在"><a href="#期权：所有乐趣之所在" class="headerlink" title="期权：所有乐趣之所在"></a>期权：所有乐趣之所在</h4><p>什么是期权？允许某人为未来的某个日期买入或卖出股票的权利付费。<br>支付权利金，如果大涨可以赚去涨幅；如果大跌可以不履行，亏损掉权利金。</p>
<p>采取行动：</p>
<ul>
<li>在熟悉的股票中找依照，能否找到“期权链”。</li>
<li>了解一下该期期权链，计算一下购买未来一个月内的某个股票期权成本是多少。</li>
</ul>
<h4 id="房地产投资"><a href="#房地产投资" class="headerlink" title="房地产投资"></a>房地产投资</h4><p>房地产最大优点是稳定性，稳定的收入在于租金，瞄准租金收入。而且属于低风险，高负债的投资类型。以租养贷，你的贷款从根本上由你的租户偿还，你却可以免费得到一处房产。</p>
<p>为什么房地产是很好的投资？购置房产用于出租，并且每个月按固定贷款利率还款，从房产中的收入就会非常稳定；你可以利用银行的钱支付购买房产所需的大部分费用，从而让自己利用资本负债获得高额回报；如果通货膨胀，你的房产投资可将资本负债作为对冲工具从中受益。</p>
<p>但如果相信自己可以倒卖房产或者低价购买抵押房产快速致富，那终究会自食恶果。做好投入耐心、勤勉和大量时间的准备，20～30年后才盈利的打算。聘请物业管理公司打理租赁房产。要货比三家，找到最诚信，服务质量最佳的物业管理公司。</p>
<p>采取行动：</p>
<ul>
<li>找出本地一份你所在区域可供出租用的房产清单，看看是否有可能购买此处房产确保你的现金流是正向的，或者至少收支平衡。</li>
</ul>
<h4 id="你真的了解自己的退休计划吗"><a href="#你真的了解自己的退休计划吗" class="headerlink" title="你真的了解自己的退休计划吗"></a>你真的了解自己的退休计划吗</h4><p>“慵懒地躺在沙滩上，捧一本书，酌一口冰镇朗姆酒，任海浪拍打在脚面上“ 这大概是梦想的退休生活，而且通常认为发生在60岁之后。事实上，从现在开始计划，可以让你的退休计划来得更早一些。</p>
<p>退休计划就是利用逆向思维：很多人认为退休人士的财务需求与在职人士一样，事实上当你拥有充裕的空闲时间的时候，当你再也不用储蓄或者上下班的时候，有些开销就会大幅减少。从现在起，缩减每个月的开支，不但不会令你感到生活水准下降，甚至让你提早退休。不用投资、不用工作也不必祈求加薪，没有什么比勤俭持家更能让你获益良多。勤俭节约才能细水长流。</p>
<p>加速退休进程的三个主要方法：1.削减开支：买租最小的公寓，或者免费跟父母住。买二手车或者无车生活，切断有线电视，不外出吃饭，买旧家具用。生活开支越少，省下来投资的钱越多 2.赚更多的钱：搬到薪水更高的大城市，如果可以，着手开始一份兼职或者自由职业 3.做有利可图的投资，投资越谨慎，获益越高资金增长越快。</p>
<p>采取行动：</p>
<ul>
<li>计算当前月支出，看看愿意作出一些牺牲，能削减多少开支</li>
<li>精简后，每月要赚多少钱才能实现退休，及的给自己留有缓冲余地</li>
<li>弄清楚不同投资回报（2%,5%,10%)，要有多少钱才能退休的时候每个月有足够的收入</li>
</ul>
<p>债务的危害，采取行动：                                  </p>
<ul>
<li>列出你的所有债务清单，把它们区分两类：好的和不好的</li>
<li>把不好的债务按照利率从高到低排序，计算多久可以清偿所有债务</li>
</ul>
<p>我从不追求永远不再工作，但是我一直追求在不想工作的时候就不工作。</p>
<h3 id="健身篇"><a href="#健身篇" class="headerlink" title="健身篇"></a>健身篇</h3><p><code>人的身体就是人的灵魂最好写照   --路德维希.维特根斯坦</code></p>
<p><code>健身不仅是保持健康体魄的关键要素之一，也是灵活的具有创造性的脑力活动的基础。  --约翰.肯尼迪</code></p>
<p>当你总觉得疲倦、无心工作的时候，或者状态不佳时，改善饮食和加强锻炼可以让你的身心同时获得新活力。</p>
<p>健身让你的身体变得健康，同时带给你个人自信，自信的人更容易迈向成功。</p>
<p>采取行动：</p>
<ul>
<li>深入本章前，你要对自己的健康作出承诺。也许已经很健康了，那么各部分内容不过帮助你复习一下。但是，如果你知道自己需要获得健康，承诺你将认真对待自己的健康，也会在生活中作出一些改变。</li>
</ul>
<h4 id="设定你的健身标准"><a href="#设定你的健身标准" class="headerlink" title="设定你的健身标准"></a>设定你的健身标准</h4><p>没有目标，你永远达不到目标，如同需要知道写的代码是用来做什么一样，你需要知道忍饥挨饿、挥汗如雨要得到怎样的结果，否则你就是浪费时间。</p>
<p>挑选具体的健身目标，可能是：</p>
<ul>
<li>减肥，减掉脂肪</li>
<li>增肌，增长肌肉</li>
<li>增加力量，不一定是肌肉，可能是某些项目的力量</li>
<li>增加肌肉耐力（改善运动表现）</li>
<li>改善心血管健康</li>
<li>在某些运动上表现更好</li>
</ul>
<p>建立里程碑，关注两周的目标，正确的方法测量进展，跟踪了解自己是否朝着正确的方向前进，选择单一主要的测量项。</p>
<p>采取行动：</p>
<ul>
<li>确定一个大的健身目标，写下来</li>
<li>接着，列出一系列切合实际的里程碑来实现这一目标</li>
<li>确定自己实现第一个里程碑要采取的行动</li>
</ul>
<p>建议适合减重的运动：跳绳、游泳、爬楼梯、跑步、骑车、健身操、羽毛球、跳舞、瑜伽、走路、篮球。</p>
<p>控制好饮食，制造热量缺口，采取行动：</p>
<ul>
<li>跟踪至少3天摄入的卡路里总量，正确了解自己的热量摄入。跟踪记录前，做一个估算，看看是否与实际结果靠近</li>
<li>计算自己的新陈代谢率，结合运动近似计算每天燃烧的热量近似值，结合卡路里数量观察自己的重量是在增加还是减少</li>
<li>不论减肥还是增重，利用这些信息制订基础计划，同时考虑热量和运动量两方面</li>
</ul>
<h4 id="让你的屁股离开椅子"><a href="#让你的屁股离开椅子" class="headerlink" title="让你的屁股离开椅子"></a>让你的屁股离开椅子</h4><p>健身目标最难的是：获得并保持健身的动力。必须自我学会如何激励自己，如何持久地保持动力。</p>
<p>思考什么能激励自己前进，避免过早奖励自己。合理制订奖励计划，如坚持三个月跑步或者减重至67kg，可以奖励自己一双优质跑鞋等等。如坚持健康饮食一周，可以去买入更多优质健康的食品等。</p>
<p>保持动力的做法：事实上，在操作过程中会不断失去当初的动力。而此时，在各个地方张贴图片提醒自己想变成的样子是保持动力的一种好方法，制作进度图表并且不断提醒自己已经实现了多少也是有帮助的。最后另外一种强大的动力方法是游戏化，可以参考一些健身应用游戏。</p>
<p>例如：只有跑步或者举重的时候听播客或者有声书，因此每天期待运动。只有在跑步机上才可以看电视。外出跑步看风景。</p>
<p>最后当动力消失殆尽，需要用原则底线来代替激励。如一些人生格言激励：</p>
<ul>
<li>善始善终</li>
<li>成功者决不放弃，而放弃者永远不会成功</li>
<li>一分耕耘，一分收获</li>
<li>时间短暂，如果生命中要做某件事，那么现在就去做</li>
<li>一切都会过去</li>
<li>坚持到底就是胜利</li>
</ul>
<p>采取行动：</p>
<ul>
<li>列出你要健身或者改善健康状况的原因。从这份清单中，明确三项最重要的激励因素，打印出来并张贴在不同的地方，确保自己每天能看到</li>
<li>将讲述保持动力的做法选几条，在生活实践。找几个可以激励你的人的照片，张贴出来，或者找一个新的健身应用，将锻炼变成乐趣</li>
<li>在达成计划某个里程碑时给自己奖励，将进展状况画成图表，达成阶段奖励自己</li>
<li>运动中断步伐的时候，问问自己如果坚持三个月，一年后，会变成怎样</li>
</ul>
<p>增强肌肉主要分为推、拉、腿部练习等。关于腹肌，需要将身体的脂肪降到一个很低的百分比。这是与自己身体进行一场生死较量。</p>
<h4 id="为什么跑步"><a href="#为什么跑步" class="headerlink" title="为什么跑步"></a>为什么跑步</h4><p>跑步最大的好处是心血管健康，可以抑制食欲。同时是治疗轻度抑郁的天然良药，让你感觉更好。至于其他好处如增强膝盖和其他关节，提升骨密度，降低癌症风险也能延长寿命。</p>
<h4 id="站立式办公及其他窍门"><a href="#站立式办公及其他窍门" class="headerlink" title="站立式办公及其他窍门"></a>站立式办公及其他窍门</h4><p>站立式比久坐办公要好得多，另外番茄钟间可以进行拉伸、俯卧撑、引体向上等练习。<br>饮食可以多摄入鸡蛋、低脂酸奶以及半成品的鸡肉，蔬菜等。</p>
<p>采取行动：</p>
<ul>
<li>查看哪些饮食窍门可以应用于生活，让你轻松实现健身目标</li>
<li>查看现在的日程和健身计划，找出最耗时和恼人的部分。思考怎样做能找出窍门，让事情变得简单容易。</li>
</ul>
<h4 id="高科技健身"><a href="#高科技健身" class="headerlink" title="高科技健身"></a>高科技健身</h4><p>利用计步器fitbit来改变行为习惯，让你更具活力。无线体重计，不仅记录体重，体脂率，而且上传云端，看到自身的变化曲线。更多的组合设备可以测量心率、血氧含量、活动及体温。以及一幅好的耳机很重要。</p>
<h3 id="精神篇"><a href="#精神篇" class="headerlink" title="精神篇"></a>精神篇</h3><p><code>如果你不征服自己，你就会被自己征服  --拿破仑</code></p>
<p>世界存在着另一股强大的力量，它带领我们走上成功之路，把我们推向成功。你可以按照自己的意愿称呼这种力量，这里可以暂称为“精神”。它其实是身体与心灵之间的无形联系，它能激发我们采取行动，并最终控制我们充分发挥自己的潜能，或者只能退回到相信自己就是周遭环境受害者的无奈境地。</p>
<p>这里的目标是用精神工具武装自己，让你征服你所面对的最强大敌人-你自己。</p>
<h4 id="心灵影响身体"><a href="#心灵影响身体" class="headerlink" title="心灵影响身体"></a>心灵影响身体</h4><p><code>信念决定思想，思想决定语言，语言决定行动，行动决定习惯，习惯决定价值，价值决定命运。  --圣雄甘地</code></p>
<p>采取行动：</p>
<ul>
<li>找出心灵和身体之间的联系。试着在自己的生活中找一个例子，什么样的想法给现实带来了积极的影响，什么样的想法又给现实带来了消极的影响？</li>
<li>你最近一次取得巨大成功的时候，心态是什么样的。</li>
<li>你最近一次遭遇重大挫败的时候，心态是什么样的。</li>
</ul>
<h4 id="拥有正确的心态：重新启动"><a href="#拥有正确的心态：重新启动" class="headerlink" title="拥有正确的心态：重新启动"></a>拥有正确的心态：重新启动</h4><p>积极思考不只外表乐观，而且对健康有益，能延年益寿，给生活提供其他好处，事实上积极的态度是可以传染的。</p>
<p>积极思考问题的根源来自一种信念：你比你所处的环境更伟大。这让你总先看到事物好的一面，无论身处何种环境，你都有能力改变自己的未来。积极的心态来自于这些美好想法的积累，随着时间推移这些想法由内而外地彻底改变你。当你拥有一个积极态度的时候，你就不是活在现实分离的虚幻世界里，而是生活在一个最理想的世界里，一个你能看到的最理想的未来世界，一个你一直以来都在苦苦追求并努力实现的未来世界。</p>
<p>积极思考带来正面的作用，带来幸福的感受：</p>
<ul>
<li>发展友谊</li>
<li>婚姻美满</li>
<li>收入更高</li>
<li>身体更健康</li>
<li>延年益寿<br>当我保持一个积极的态度，我更愿意去面对任何障碍，把挑战看成要克服的困难，而不是消极地认为是环境把我逼到了绝境。</li>
</ul>
<p>如何改变：养成积极思考的习惯，一定有力量选择更积极的想法。频繁练习这种思维方式，让自己假象一幅积极的画面，然后你看到一线曙光，你就越容易将它变成你的习惯。从而训练你的大脑从更积极的而不是从消极的角度看待问题。</p>
<p>花点时间养成冥想的习惯，更容易体会到正面情绪，从而提高你积极思维能力的修炼之道。</p>
<p>另外注意劳逸结合，许多负面情绪与忘记休息相关，适当休息更容易保持积极心态。推荐阅读《积极思考就是力量》，积极思考能让你活得更长久，更健康，更成功，同时也让你获得更有乐趣，同时影响你周围的人同样生活越来越有乐趣。</p>
<p>采取行动：</p>
<ul>
<li>捕捉你的想法，记录帮助你理解脑子里想什么，让你更专注于你想专注的事情。记一周的思维日志，只要有机会就把自己的想法写下来，不管是积极的还是消极的，每一天都将这一天发生的任何有意义的事情记录成日志，给每天固定的时间段都创建一个条目。</li>
<li>审视你的思维日志。几乎都是积极的想法还是消极的想法？消极的想法源自哪里？积极的见解呢？</li>
<li>试着控制自己的想法尽可能唤出积极的想法，当某件事发生在你身上的时候，花点时间去了解并非整个世界与你作对–并非只有你一人碰到这样的事，强迫自己找出一线曙光，不要只是消除消极的想法，同时要将消极想法替换成积极的想法。</li>
</ul>
<h4 id="构建积极的自我形象"><a href="#构建积极的自我形象" class="headerlink" title="构建积极的自我形象"></a>构建积极的自我形象</h4><p><code>那些不能激励自己的人，一定甘于平庸。无论他们的才能多么令人印象深刻。 --Andrew Carnegie</code></p>
<p>每个人内心深处，都有一个自己的形象，这将真实地反映出我们的大脑对真实的我们自己的看法。自我形象难以改变，同时也是自我设限。但始终要相信，“我可以决定我想成为怎样的人”这样的想法，才能真正改变自己。不断设想自己想成为的清晰形象，只有足够清晰才能带领你的大脑带领身体到达彼岸。</p>
<p>树立一个牢固的形象-“这就是我想要成为的形象，没有什么能够阻止我”。如同运动员在想象画面中提高自己的成绩。</p>
<p>采取行动：</p>
<ul>
<li>列出你的优点和缺点。不仅试着想想你是如何认知自己的，也试着想想别人是如何认知你的。这份清单不一定完全正确–你的自我形象很多方面被埋在了潜意识深处，但它会是很好的起点</li>
<li>这里面的清单哪些方面无法改变？为什么？想想这些是永久性的还是因为信念带来的局限</li>
<li>尝试至少改变自我形象的一个负面方面，试着“假装自己能成功”的方法和正面的肯定来强化自己的新信念。</li>
</ul>
<p>提高个人魅力，采取行动：</p>
<ul>
<li>回想你怎样流露出“绝望”的情感，看看你和别人在社交媒体沟通的内容，你是如何与朋友互动，你的语言和表达是自信的还是空虚的</li>
<li>你的交际圈多宽？你给自己足够机会寻找“真爱”了吗？走出去，去和别人接触，花点时间感受一下这是什么感觉。一旦你意识到这种感觉不错，接近他人时就更加自信，因为你不害怕后果</li>
<li>切实做些事来提升自信心，比如开始执行一个健身计划或者涉及一些会对你自己感觉更好的其他活动</li>
</ul>
<h3 id="作者的成功书单"><a href="#作者的成功书单" class="headerlink" title="作者的成功书单"></a>作者的成功书单</h3><p>自我提升励志类：《The War of Art》《人性的弱点》《思考致富》《心理控制方法》《积极思考就是力量》《阿特拉斯耸耸肩》</p>
<p>软件开发类：《代码大全》《代码整洁之道》《Head First设计模式》</p>
<p>投资类：《The Millionaire Real Estate Investor》《富爸爸，穷爸爸》《No-Hype Options Trading:Myths, Realities, and Strategies That Really Work》</p>
<h3 id="积极面对失败"><a href="#积极面对失败" class="headerlink" title="积极面对失败"></a>积极面对失败</h3><p><code>跌到七次，爬起来八次。  --日本谚语</code></p>
<p>要实现不畏惧失败，第一步是真正意识到失败不是终点。能否从失败站起来，取决于是否决定为自己最值得拥有的东西战斗，取决于是否要享受获得成功后的喜悦和快乐，这些来自于战胜困难的成就感。</p>
<p>学会拥抱失败、期待失败、接受失败并准备直面失败。</p>
<p>大多数伟大的人取得最大成功与它们所精力的最大失败只有一步之遥</p>
<p>采取行动：</p>
<ul>
<li>对失败的恐惧如何让你退缩？想想生活中那些你想做但由于一时犹豫或者自尊受损而没有做的事情</li>
<li>承诺至少做一件因为害怕失败而一直回避的事情。不要敷衍了事，很多人明知道有些事会失败还是去“尝试”，这样做不会让他们真正失败，因为“没有真正尝试过”才会是失败。真的去尝试，真的去体验失败吧</li>
</ul>
<h4 id="结语和附录"><a href="#结语和附录" class="headerlink" title="结语和附录"></a>结语和附录</h4><p>关于食物的热效应：指食物被人消化吸收耗掉原本能量的比例，例如蛋白质高达2～3成，例如纤维和粗粮。<br>未经加工的食物是最健康的食品：鸡肉、蔬菜、水果、红薯、糙米、蛋类、燕麦、坚果和鱼。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>心态练习</title>
    <url>/2022/01/28/xinli/%E5%BF%83%E6%80%81%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="可以刻意练习的六种心态"><a href="#可以刻意练习的六种心态" class="headerlink" title="可以刻意练习的六种心态"></a>可以刻意练习的六种心态</h3><p>1.旁观者心态<br><strong>方法：任何不喜欢的事情发生了，你就想象一个画面-你从身体跳出来了，你在5米之外看自己。</strong><br>作用：可以四两拨千斤，化解所有烦恼。开悟者常用，但一般需要经历太多苦修才能达到境界。</p>
<p>从旁观者看，这个人既陌生又熟悉，但这人终究是陌生人，他发生的任何事都和你没有关系，甚至很搞笑好玩。</p>
<p>原理：练习久了，你基本不会被情绪困扰，旁观者心态是不响应生理性、基因性、即时性、冲动性和本能性的反应。这些反应是所有痛苦的根源，不但解决不了问题，反而会让事情变得更加糟糕。</p>
<p>2.归零者心态<br>当感觉做人不容易，压力特别大，心情非常沮丧，非常迷茫的时候，用这个心态可以安静下来找到目标，让自己的人生变清晰，恢复自信。</p>
<p><strong>方法：想象过去的一切一切都只是你的一个梦而以。既然过去的一切一切都是梦，全部归零了。现在的自己就是新生婴儿，未来的自己一切都是崭新的。</strong></p>
<p>原理：既然是新生的，就不要带有包袱，不管是荣誉的还是耻辱的。人生最可怕的事情就是路径依赖。归零者厉害之初在于让你突破路径依赖，成为改变命运的起点。</p>
<p>3.一日囚心态<br>用于对抗消费主义陷阱，远离个人经济危机</p>
<p><strong>方法：想买东西的时候，想象自己只能活在今天了，买来的东西今天用不上的话就会消失。</strong></p>
<p>4.造物主心态<br>献给低自尊，低价值感，低存在感的同学们<br>是不是特别爱觉得对不起？是不是觉得自己终究是不配了？是不是觉得强者的世界中自己就像一颗无足轻重的露珠？</p>
<p>请大胆勇敢使用造物主心态</p>
<p><strong>方法：这个世界是你创造的，所有人所有事都是你脑袋里长出来的，它们对你来说，才终究是不配了。</strong></p>
<p>原理：这其实就是世界运作的本质和人生的真相，可以多读相关的书了解</p>
<p>应用场景：面对应试面试，演讲；面对弱智和杠精；教员就是造物主心态的代表性人物，参见相关诗词“五岭逶迤腾细浪，乌蒙磅翎走泥丸“</p>
<p>5.复仇者心态<br>弱者最大的问题在于甘于弱势地位，认为“大家不都这样过的吗”，但凡能成就的人都有卧薪尝胆的复仇之心，老天爷不会平白无故帮助一个过于佛系的人。</p>
<p>首先要找个仇人（不是真正意义上的，是为了成就自己找的一个靶子），可以虚构一个人出来。他和你有着不共戴天之仇，而且如果5年后比他钱少，他就能弄死你。反复构建比较细节，直到可恨。</p>
<p>方法：如何复仇？如何5年后弄死虚构的人；现在存的每一分钱都是对他的一记耳光。每一分钟认真的工作都是一记飞腿。每一次毫无意义的消费都是仇人射来的箭。每一次自甘堕落都是对手的励精图治。</p>
<p>可以用于办公室政治，追求对象，追求财富，追求成就上。</p>
<p>6.永生者心态</p>
<p>方法：就像永远不会死那样，去追求道德和精神生活的完善。</p>
<p>“积善之家必有余庆，及不善之家必有余殃”</p>
<p>总结：心态改变行为，行为改变命运。</p>
<h3 id="高赞的回答"><a href="#高赞的回答" class="headerlink" title="高赞的回答"></a>高赞的回答</h3><p>1.不内耗<br>不让负面情绪影响自己超过3天，不苦情。有想表达的事情勇敢争取表达；遇到负面反馈再应对，不猜测不内耗。</p>
<p>2.不让别人消耗自己<br>与简单的人做朋友，远离强势，带来压迫感，会负面打击别人的人。</p>
<p>3.戒掉虚荣心<br>认清事物的本质，刨去表面毫无用处的附加值</p>
<p>4.表达出来与内心完全一致，相信别人也如此<br>不害怕表达真实的自己，表达出来的跟内心完全一致，不让别人猜；推己及人，相信别人表达出来的也跟内心一致</p>
<p>5.练习深度工作<br>专注工作，控制自控力，集中精力在眼前有难度，有挑战的事情上。</p>
<p>6.做长期主义者<br>人人都渴望“快速成功”，但真正成功的事情都是经历播种、施肥、浇灌而成的。</p>
<p>7.社交时，不把自己放在被评价的位置<br>遇到比自己强的人，不要在意，承认对方优点，也不否定自我，没有必要太在意别人的看法。</p>
<p>8.克制自我的同理心<br>太敏感感知别人情绪，容易成为讨好型人格。</p>
]]></content>
      <categories>
        <category>心理</category>
      </categories>
      <tags>
        <tag>心理</tag>
      </tags>
  </entry>
</search>
