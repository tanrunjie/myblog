<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇幻物语</title>
  
  <subtitle>诗酒趁年华!</subtitle>
  <link href="http://tanrunjie.github.io/atom.xml" rel="self"/>
  
  <link href="http://tanrunjie.github.io/"/>
  <updated>2021-12-28T12:34:39.532Z</updated>
  <id>http://tanrunjie.github.io/</id>
  
  <author>
    <name>神秘囚徒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洞见睡眠</title>
    <link href="http://tanrunjie.github.io/2021/12/28/%E6%B4%9E%E8%A7%81%E7%9D%A1%E7%9C%A0/"/>
    <id>http://tanrunjie.github.io/2021/12/28/%E6%B4%9E%E8%A7%81%E7%9D%A1%E7%9C%A0/</id>
    <published>2021-12-28T12:24:03.000Z</published>
    <updated>2021-12-28T12:34:39.532Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自微信号十三手记</code></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>定时睡眠和睡眠时长时一个人精神饱满的关键吗？<br>你以为是，其实不是。<br>为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  </p><ul><li><p>人的系统能量是怎么消耗的？<br>眼耳鼻舌身的功能运行和头脑里的各种念想。 </p></li><li><p>系统能量是怎么补充的？<br>适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。</p></li></ul><h3 id="要你深深明白"><a href="#要你深深明白" class="headerlink" title="要你深深明白"></a>要你深深明白</h3><p>二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  </p><p>如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。</p><h3 id="附赠"><a href="#附赠" class="headerlink" title="附赠"></a>附赠</h3><p>失眠是什么？<br>是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自微信号十三手记&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;定时睡眠和睡眠时长时一个人精神饱满的关键吗？&lt;br&gt;你以为是，其实不是。&lt;br&gt;</summary>
      
    
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂-C++11多线程</title>
    <link href="http://tanrunjie.github.io/2021/12/28/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82-C-11%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://tanrunjie.github.io/2021/12/28/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82-C-11%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-12-28T07:58:29.000Z</published>
    <updated>2021-12-28T11:30:36.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h3><p>多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入操作类，重载运算符()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fctor</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:    <span class="comment">// 参数使用引用减少多线程资源拷贝</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string&amp; msg)</span>     <span class="comment">// opt: string msg</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      cout &lt;&lt;<span class="string">&quot;from f1:&quot;</span> &lt;&lt; msg&lt;&lt;endl;</span><br><span class="line">      msg = <span class="string">&quot;changed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s = <span class="string">&quot;not changed&quot;</span>;</span><br><span class="line">  cout &lt;&lt; this_thread::<span class="built_in">get_id</span>()&lt;&lt;endl;</span><br><span class="line">  <span class="function">thread <span class="title">t1</span><span class="params">((Fctor()), ref(s))</span></span>;    <span class="comment">// move(s),此时最后输出的s为空。</span></span><br><span class="line">  t1.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; thread::<span class="built_in">hardware_concurrency</span>() &lt;&lt; endl; <span class="comment">//当前设备核心数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// thread_id</span></span><br><span class="line"><span class="comment">// from f1:not changed</span></span><br><span class="line"><span class="comment">// not changed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据竞争及互斥对象"><a href="#数据竞争及互斥对象" class="headerlink" title="数据竞争及互斥对象"></a>数据竞争及互斥对象</h3><p>避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lock_guard构建f单例，保证独占fout资源，从而保证线程安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>()&#123;</span><br><span class="line">        f.<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        f&lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt;<span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex m_mutex;</span><br><span class="line">        ofstream f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护</span></span><br><span class="line"><span class="comment">mutex mu;</span></span><br><span class="line"><span class="comment">void shared_print(string msg, int id)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    lock_guard&lt;mutex&gt; guard(mu);</span></span><br><span class="line"><span class="comment">    // mu.lock();</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; msg &lt;&lt; id &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    // mu.unlock();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile&amp; log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&gt;<span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;from main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>避免死锁：</p><ul><li>评估线程是否需要两个或以上的互斥对象</li><li>避免在锁住资源的同时去调用一些不熟悉的函数</li><li>使用lock函数帮助mutex顺序一致</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环依赖产生的死锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lock</span>(m_mutex, m_mutex2);  </span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, adopt_lock)</span></span>;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker2</span><span class="params">(m_mutex2, adopt_lock)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print2</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lock</span>(m_mutex, m_mutex2); <span class="comment">// 用lock确保互斥顺序一致</span></span><br><span class="line"></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker2</span><span class="params">(m_mutex2, adopt_lock)</span></span>; <span class="comment">// 若调换，则可避免</span></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, adopt_lock)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex m_mutex;</span><br><span class="line">    mutex m_mutex2;</span><br><span class="line">    ofstream f; <span class="comment">// 被m_mutex保护的对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile &amp;log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &gt; <span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print2</span>(<span class="string">&quot;from main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Unique-Lock和lazy-Initialization"><a href="#Unique-Lock和lazy-Initialization" class="headerlink" title="Unique Lock和lazy Initialization"></a>Unique Lock和lazy Initialization</h3><p>加锁的方式：</p><ol><li>lock_guard<mutex></li><li>mutex.lock</li><li>unique_lock(推荐，但占用更多系统资源)</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所占用的资源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>()&#123;</span><br><span class="line">        f.<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// lock_guard&lt;mutex&gt; locker(m_mutex);  </span></span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, defer_lock)</span></span>; <span class="comment">// unique_lock占用更多系统资源</span></span><br><span class="line">        <span class="comment">// do_sth()  unlock</span></span><br><span class="line">        <span class="comment">// ...        </span></span><br><span class="line"></span><br><span class="line">        locker.<span class="built_in">lock</span>();</span><br><span class="line">        f &lt;&lt; id &lt;&lt;<span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        locker.<span class="built_in">lock</span>(); <span class="comment">// another unique_lock</span></span><br><span class="line"></span><br><span class="line">        unique_lock&lt;mutex&gt; locker2 = <span class="built_in">move</span>(locker);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex m_mutex;</span><br><span class="line">        ofstream f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile&amp; log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&gt;<span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h3><p>结合unique_lock和lambda，让线程之间高效相互响应执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">mutex mu;</span><br><span class="line">condition_variable cond;  <span class="comment">// 条件变量</span></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">        q.<span class="built_in">push_front</span>(count);</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cond.<span class="built_in">notify_one</span>();</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者：条件变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(data!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">        cond.<span class="built_in">wait</span>(locker, []()&#123; <span class="keyword">return</span> !q.<span class="built_in">empty</span>(); &#125;); <span class="comment">// 只能搭配unique_lock使用，用Lambda函数避免自解锁</span></span><br><span class="line">        data = q.<span class="built_in">back</span>();</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;t2 got a value from t1: &quot;</span> &lt;&lt; data&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不优雅</span></span><br><span class="line"><span class="comment">void function_2()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int data = 0;</span></span><br><span class="line"><span class="comment">    while(data!=1)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        unique_lock&lt;mutex&gt; locker(mu);</span></span><br><span class="line"><span class="comment">        if(!q.empty())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            data = q.back();</span></span><br><span class="line"><span class="comment">            q.pop_back();</span></span><br><span class="line"><span class="comment">            locker.unlock();</span></span><br><span class="line"><span class="comment">            cout &lt;&lt;&quot;t2 got a value from t1: &quot; &lt;&lt; data&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else &#123;</span></span><br><span class="line"><span class="comment">            locker.unlock();</span></span><br><span class="line"><span class="comment">            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(function_2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;线程管理&quot;&gt;&lt;a href=&quot;#线程管理&quot; class=&quot;headerlink&quot; title=&quot;线程管理&quot;&gt;&lt;/a&gt;线程管理&lt;/h3&gt;&lt;p&gt;多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数</summary>
      
    
    
    
    
    <category term="C++ 多线程 并发" scheme="http://tanrunjie.github.io/tags/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>c++并发实战</title>
    <link href="http://tanrunjie.github.io/2021/12/28/c-%E5%B9%B6%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    <id>http://tanrunjie.github.io/2021/12/28/c-%E5%B9%B6%E5%8F%91%E5%AE%9E%E6%88%98/</id>
    <published>2021-12-28T02:48:17.000Z</published>
    <updated>2021-12-28T07:58:08.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="chap1-c-并发世界"><a href="#chap1-c-并发世界" class="headerlink" title="chap1 c++并发世界"></a>chap1 c++并发世界</h3><p>C++98的13年后，2011的C++11成为新的规范，同时确认了每三年发布新的扩展技术规范。<br>在C++11中，c++ standard第一次承认多线程存在于C++语言中，意味CPP编写与平台无关的多线程程序成为可能。以往编写多线程并发需要针对运行平台部署依赖扩展库，如今可移植性成为可能。</p><p><code>何谓并发和多线程？</code><br>单核的并发存在切换上下文的不必要损耗。<br>多线程：一个进程下，多个小单元共用数据资源，单机并发较常用，实际上CPP支持的是多线程。<br>多进程：开辟多个共用数据资源，多个进程并行，占用大量资源，通讯成本加大，适用于多机。</p><p>并行：关注性能； 并发：关注任务分离；</p><p><code>为什么要并发?</code>  </p><ol><li>关注分离：将相关代码与无关代码分离，使得程序更容易理解和测试。</li><li>关注性能：将任务并行以及可以将数据并行<br>不使用并发的原因：收益比不上成本，一方面脑力以及代码维护成本，一方面是线程资源。尤其32位地址的架构，<br>对于4G(32bit)的架构，每个线程占用1MB，那么开4096个就用尽所有地址，运行太多会出问题。对于现用的板子有1GB的内存可用。对于现用的64位PC，开一个线程ulimit -s可知为8MB;ulimit -u可以看当前可开多少个线程上限，64GB可开约26万个上限。<br>由于多线程使代码复杂且难以理解，只有显著提升性能才值得一干。</li></ol><h3 id="chap2-线程管理"><a href="#chap2-线程管理" class="headerlink" title="chap2 线程管理"></a>chap2 线程管理</h3><ul><li>线程启动：std::thread对象用函数或者类初始化的同时，开始自动启动线程。</li><li>线程等待与分离：join为等待线程执行完成；detach则让线程分离自主执行，此时访问已销毁的变量会引起错误。如果线程已使用过join,则不可再次join。joinable()返回false。<br>解决方法：将数据复制到线程中，可以总结用一个访问局部变量的函数创建线程是危险行为。</li><li>分离线程：通常又称守护线程，没有任何显式的用户接口并在后台运行的线程，通常长时间运行。</li><li>转移线程： thread2 = std::move(thread1);若thread2已有线程，则系统直接调用terminate结束错误。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;chap1-c-并发世界&quot;&gt;&lt;a href=&quot;#chap1-c-并发世界&quot; class=&quot;headerlink&quot; title=&quot;chap1 c++并发世界&quot;&gt;&lt;/a&gt;chap1 c++并发世界&lt;/h3&gt;&lt;p&gt;C++98的13年后，2011的C++11成为新的规范，</summary>
      
    
    
    
    
    <category term="c++ 多线程 并发" scheme="http://tanrunjie.github.io/tags/c-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>奖惩精要</title>
    <link href="http://tanrunjie.github.io/2021/12/27/%E5%A5%96%E6%83%A9%E7%B2%BE%E8%A6%81/"/>
    <id>http://tanrunjie.github.io/2021/12/27/%E5%A5%96%E6%83%A9%E7%B2%BE%E8%A6%81/</id>
    <published>2021-12-27T06:48:52.000Z</published>
    <updated>2021-12-27T06:57:04.026Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自微信公众号十三手记</code></p><p>自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚至因为错用奖惩而受到惩罚。</p><h4 id="首先，奖惩时为了更好的控制别人吗？"><a href="#首先，奖惩时为了更好的控制别人吗？" class="headerlink" title="首先，奖惩时为了更好的控制别人吗？"></a>首先，奖惩时为了更好的控制别人吗？</h4><p>你以为是，但必定不是。若是为了更好的控制别人，为何那么多人用了奖惩手段并未真正收到真正控制别人的真正效果？  </p><h4 id="那么，奖惩到底是为了什么？"><a href="#那么，奖惩到底是为了什么？" class="headerlink" title="那么，奖惩到底是为了什么？"></a>那么，奖惩到底是为了什么？</h4><p>那是为了促进对方强大的同时与其交心。  </p><h4 id="何时奖惩？"><a href="#何时奖惩？" class="headerlink" title="何时奖惩？"></a>何时奖惩？</h4><p>尽快，及时  </p><h4 id="何处奖惩？"><a href="#何处奖惩？" class="headerlink" title="何处奖惩？"></a>何处奖惩？</h4><p>公开的要公开，私下的要私下，否则就是反效果。</p><p>此刻，十三先生要你深深的明白：在你的人际关系管理中，若是你的奖惩只是你控制别人的手段，那你的手段最多只是临时效果，最终必定不能如你所愿，甚至受到反效果；若是你的奖惩是在用心反馈你对别人行为有效性的重视，是为了及时给予对方诚意的肯定或是改进提醒，那你就是在用奖惩的办法促进对方强大的同时与其交心，假以时日，你必定能收获到奖惩给你的人际关系处理的真实力量和价值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自微信公众号十三手记&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚</summary>
      
    
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>UNIX_Tutorial</title>
    <link href="http://tanrunjie.github.io/2021/12/27/UNIX-Tutorial/"/>
    <id>http://tanrunjie.github.io/2021/12/27/UNIX-Tutorial/</id>
    <published>2021-12-27T02:55:55.000Z</published>
    <updated>2021-12-27T06:46:52.524Z</updated>
    
    <content type="html"><![CDATA[<p>Unix和Linux的基本指令<br><a href="http://www.ee.surrey.ac.uk/Teaching/Unix/">http://www.ee.surrey.ac.uk/Teaching/Unix/</a></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>内核(Kernel): 分配时钟和内存给程序和处理文件存储以及系统交互<br>Shell:用户和内核的命令交互<br>UNIX中要么时文件，要么是程序</p><h3 id="Tutorial-One-amp-Two"><a href="#Tutorial-One-amp-Two" class="headerlink" title="Tutorial One &amp; Two"></a>Tutorial One &amp; Two</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line"><span class="comment">// search sci in file.txt</span></span><br><span class="line"><span class="comment">// Method 1</span></span><br><span class="line">less file.txt</span><br><span class="line">/sci  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Method 2</span></span><br><span class="line">grep sci file.txt <span class="comment">//-i mean &#x27;ignore up/low case&#x27;</span></span><br><span class="line"></span><br><span class="line">wc -l file.txt  <span class="comment">// count line in file.txt</span></span><br><span class="line"></span><br><span class="line">clear <span class="comment">// clean monitor</span></span><br></pre></td></tr></table></figure><h3 id="Tutorial-Three-amp-Four"><a href="#Tutorial-Three-amp-Four" class="headerlink" title="Tutorial Three &amp; Four"></a>Tutorial Three &amp; Four</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; list1  <span class="comment">// output to list1</span></span><br><span class="line">cat &gt;&gt; list1 <span class="comment">// append to list1</span></span><br><span class="line">cat list1 list2 &gt; biglist <span class="comment">// concat list1 and list2 to biglist</span></span><br><span class="line"></span><br><span class="line">sort &lt; biglist &gt; slist <span class="comment">// sort biglist and output to slist</span></span><br><span class="line">command1 | command2  <span class="comment">// pipe the output of command1 to the input of command2</span></span><br><span class="line"></span><br><span class="line">ls list*</span><br><span class="line">ls ?list</span><br><span class="line"></span><br><span class="line"><span class="comment">// getting help</span></span><br><span class="line">man wc</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>Command</th><th>Meaning</th></tr></thead><tbody><tr><td>command &gt; file</td><td>redirect standard output to a file</td></tr><tr><td>command &gt;&gt; file</td><td>append standard output to a file</td></tr><tr><td>command &lt; file</td><td>redirect standard input from a file</td></tr><tr><td>command1 | command2</td><td>pipe output of command1 to input of command2</td></tr><tr><td>who</td><td>list users currently logged</td></tr></tbody></table><h3 id="Tutorial-Five-amp-Six"><a href="#Tutorial-Five-amp-Six" class="headerlink" title="Tutorial Five &amp; Six"></a>Tutorial Five &amp; Six</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line"></span><br><span class="line">-rwxrw-r-- <span class="number">1</span> ee51ab beng95 <span class="number">2450</span> Sept29 <span class="number">11</span>:<span class="number">52</span> file1</span><br><span class="line"></span><br><span class="line"><span class="comment">// read/write/execute rights in owner/group/everyone</span></span><br><span class="line"><span class="comment">// file_size time file_name</span></span><br><span class="line"></span><br><span class="line">chmod a+x ex <span class="comment">// add permission to execute ex to all</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Symbol</th><th>Meaning</th></tr></thead><tbody><tr><td>u</td><td>user</td></tr><tr><td>g</td><td>group</td></tr><tr><td>o</td><td>other</td></tr><tr><td>a</td><td>all</td></tr><tr><td>r</td><td>read</td></tr><tr><td>w</td><td>write and delete</td></tr><tr><td>x</td><td>execute and access directory</td></tr><tr><td>+</td><td>add permission</td></tr><tr><td>-</td><td>take away permission</td></tr></tbody></table><h4 id="summary-of-process-control"><a href="#summary-of-process-control" class="headerlink" title="summary of process control"></a>summary of process control</h4><p>foreground: terminal suspend and wait<br>background: terminal can go on</p><table><thead><tr><th>Command</th><th>Meaning</th></tr></thead><tbody><tr><td>ls -lag</td><td>list access rights for all files</td></tr><tr><td>chmod [options] file</td><td>change access rights for named file</td></tr><tr><td>command &amp;</td><td>run command in background</td></tr><tr><td>^C</td><td>kill the job running in the forground</td></tr><tr><td>^Z</td><td>suspend the job running in the foreground</td></tr><tr><td>jobs</td><td>list current jobs</td></tr><tr><td>bg %2</td><td>background the suspended job</td></tr><tr><td>fg %1</td><td>foreground job number 1</td></tr><tr><td>kill %1</td><td>kill job number 1</td></tr><tr><td>ps</td><td>list current processes</td></tr><tr><td>kill 310</td><td>kill process id 310</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df .  <span class="comment">// report space left on the file system</span></span><br><span class="line">ls -lh</span><br><span class="line">gzip</span><br><span class="line">gunzip  <span class="comment">// unzip</span></span><br><span class="line">tar -xvf .tar <span class="comment">// extract</span></span><br><span class="line">diff file1 file2  <span class="comment">// &lt; denotes file1, &gt; denotes file2</span></span><br><span class="line"></span><br><span class="line">history <span class="comment">// terminal history</span></span><br><span class="line">!! <span class="comment">// recall last command</span></span><br><span class="line">!<span class="number">-3</span> <span class="comment">// recall third most recent command</span></span><br><span class="line">!grep <span class="comment">// recall last command starting with grep</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Tutorial-Seven-amp-Eight"><a href="#Tutorial-Seven-amp-Eight" class="headerlink" title="Tutorial Seven &amp; Eight"></a>Tutorial Seven &amp; Eight</h3><p>Install software:</p><ol><li>Locate and download the source code(which is usually compressed)</li><li>Unpack the source code</li><li>Compile the code(Most difficult)</li><li>Install the resulting executable</li><li>Set paths to the installation directory</li></ol><p><strong>make</strong>:manage large programs and only compiling those parts changed<br><strong>Makefile</strong>: record the related make rules, contains information on how to compile the software.</p><p>Some simplest way to compile a package:</p><ol><li><strong>cd</strong> to the directory containing the packages’ source code.</li><li>Type <strong>./configure</strong> to configure the package for your system</li><li>Type <strong>make</strong> to compile the package</li><li>Optionally, type <strong>make check</strong> to run any self0tests that come with the package.</li><li>Type <strong>make install</strong> to install the programs and any data files and documentation.</li><li>Optionally, type <strong>make clean</strong> to remove the program binaries and object files from the source code directory.</li></ol><h4 id="UNIX-variables"><a href="#UNIX-variables" class="headerlink" title="UNIX variables"></a>UNIX variables</h4><p>two categories: Environment variables, Shell variables<br>Shell variables: apply only to the current instance of shell and set short-term working conditions.<br>Environment variables: system environment with UPPER CASE name</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH <span class="comment">// print system environment</span></span><br><span class="line">set PATH=($PATH ~/new_path/)  <span class="comment">// add path to PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Unix和Linux的基本指令&lt;br&gt;&lt;a href=&quot;http://www.ee.surrey.ac.uk/Teaching/Unix/&quot;&gt;http://www.ee.surrey.ac.uk/Teaching/Unix/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduc</summary>
      
    
    
    
    
    <category term="bash" scheme="http://tanrunjie.github.io/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>金钱的实际价值</title>
    <link href="http://tanrunjie.github.io/2021/12/24/%E9%87%91%E9%92%B1%E7%9A%84%E5%AE%9E%E9%99%85%E4%BB%B7%E5%80%BC/"/>
    <id>http://tanrunjie.github.io/2021/12/24/%E9%87%91%E9%92%B1%E7%9A%84%E5%AE%9E%E9%99%85%E4%BB%B7%E5%80%BC/</id>
    <published>2021-12-24T09:40:17.000Z</published>
    <updated>2021-12-27T02:43:52.121Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自十三手记</code></p><p>若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。</p><p>但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。</p><p>此时，十三先生要你深深的明白：二元有相世界，金钱的实际价值必定等于你诚意付出之时创造出的相应实际价值，但是你却一直有种想付出更少收获更多金钱的想法，所以你不自知的不愿搞清楚。因为一旦你搞清楚了这个核心原理，你就无法继续投机取巧，就无法继续偷懒了。但是，只要你真正诚意看懂并接纳了这个关键点，你就能更加务实的面对自己所面对的一切人和事，你才能因此而尽可能减少多余的动作，你才能因减少多余动作而减少障碍环节，你才能因减少障碍环节而减少不必要的消耗，如此，你整体的行动才能更加高效，反而你才能走上人生各种成功的捷径。</p><h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>回忆过去，确有种种如此的感觉。上高中和大学的时候，每一分钱都来自父母，舍不得多花乱花。出来工作后，可能得益于名校光环，匹配一些不太核心的岗位时候，工作的艰辛就远不及当初，于是感觉金钱就来得容易了，殊不知金钱其实也流入并不富裕，只因个人消费比较简单，只花该花的钱，只享受该享受的事。于是渐渐，也失去了赚大钱的欲望，虽说不能没有，但明显不及年少时的强烈，花钱也比较随意，一直没有大的积蓄，理财也是三天打鱼四天撒网的状态。希望认真对待工作中的每一件事，认清金钱来之不易，努力增长自己的财富，也能合理地用度。</p><p>另外，而立之年，却没有多余的精力和财产赡养父母，更多的是让父母为自己忧心忡忡，目前为止，依然算不上才社会能游刃有余，立足四方。此后，应<strong>挖掘自己的兴趣目标，提升个人在社会中的价值</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自十三手记&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。&lt;/p&gt;
&lt;p&gt;但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>TSDF算法</title>
    <link href="http://tanrunjie.github.io/2021/12/23/TSDF%E7%AE%97%E6%B3%95/"/>
    <id>http://tanrunjie.github.io/2021/12/23/TSDF%E7%AE%97%E6%B3%95/</id>
    <published>2021-12-23T08:54:25.000Z</published>
    <updated>2021-12-24T09:47:46.682Z</updated>
    
    <content type="html"><![CDATA[<p>具体学习于 <a href="https://github.com/andyzeng/tsdf-fusion">https://github.com/andyzeng/tsdf-fusion</a></p><h3 id="Why-TSDF"><a href="#Why-TSDF" class="headerlink" title="Why TSDF"></a>Why TSDF</h3><p>三维重建首当其冲的问题是如何保存以及如何表示模型，通常而言会有点云，mesh等；<br>但是对于室内三维重建，TSDF是一个不错的选择，其优点是</p><ul><li>非常适合CUDA并行运算，从而达到实时。</li><li>开辟固定的内存/显存，模型大小相对可控</li><li>模型大小不随数据量变化，网格的细节比较好<br>缺点：CPU计算耗时，在边缘以及前后景交界出现拖尾现象（体素g在像素坐标系投影有一定的误差）</li></ul><h3 id="How-TSDF"><a href="#How-TSDF" class="headerlink" title="How TSDF"></a>How TSDF</h3><p>1.建立长方体包围盒（能包住房间，一般预设参数：可通过设定划分网格以及网格大小得到)<br>2.将每个体素v转化成三维座标点g(根据模型起点和网格推算)<br>3.对于新来的每一帧深度图：<br>    遍历每一个体素g：<br>        3.1.根据相机外参，将g在世界坐标系转换到相机坐标系的点c,再由相机内参转换到像素坐标系x;<br>        3.2.深度相机像素深度为value(x),点c到相机坐标原点的距离为distance(v)<br>        3.3.sdf(g) = value(x) - distance(v).<br>        3.4.求tsdf(g).<code>预设截断距离t = voxel_size * t_n, 则t以内，tsdf(g) = sdf(p)/|u|;在t以外时，if sdf(p)&gt;1, tsdf(p) = 1;if sdf(p)&lt;-1, tsdf(p)=-1;</code><br>        3.5.权重w(p) = cos(theta)/distance(v), theta为投影光线与表面法向的夹角<br>至此，得到当前帧所有体素的tsdf值以及权重值<br>4.当前帧与全局模型融合<br>    4.1 若当前帧为第一帧，即为融合结果；否则与之前的模型融合,公式如下，其中W(p)为融合权重，w(p)为当前帧权重<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTEzMzY5Ni02ZWY1Yzk2YWUwMWFlNTZmLnBuZw?x-oss-process=image/format,png"></p><h3 id="Detail-and-Analysis"><a href="#Detail-and-Analysis" class="headerlink" title="Detail and Analysis"></a>Detail and Analysis</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;具体学习于 &lt;a href=&quot;https://github.com/andyzeng/tsdf-fusion&quot;&gt;https://github.com/andyzeng/tsdf-fusion&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Why-TSDF&quot;&gt;&lt;a href=&quot;#Why-T</summary>
      
    
    
    
    
    <category term="SLAM" scheme="http://tanrunjie.github.io/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>异常处理</title>
    <link href="http://tanrunjie.github.io/2021/12/23/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://tanrunjie.github.io/2021/12/23/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-12-23T02:27:32.000Z</published>
    <updated>2021-12-23T03:04:07.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="处理可能出现异常的方法"><a href="#处理可能出现异常的方法" class="headerlink" title="处理可能出现异常的方法"></a>处理可能出现异常的方法</h3><ul><li>调用abort()或exit()结束程序</li><li>返回错误码</li><li>异常机制：1.使用try块执行可能出现异常的代码段 2.throw引发异常 3.catch捕获并处理对应情况</li></ul><h3 id="throw机制"><a href="#throw机制" class="headerlink" title="throw机制"></a>throw机制</h3><p>若throw引发异常后，匹配对应catch。而后不是将控制权返回调用程序，而是引导程序沿着函数调用序列后退，直到找到try块中的函数<br>若没有throw出异常，则catch被跳过</p><h3 id="通常用对象作为异常类型处理"><a href="#通常用对象作为异常类型处理" class="headerlink" title="通常用对象作为异常类型处理"></a>通常用对象作为异常类型处理</h3><p>好处是：直接根据类型区分异常，另外对象可以携带信息确定原因，catch根据信息来执行对应的操作</p><h3 id="堆栈解退（unwinding-the-stack）"><a href="#堆栈解退（unwinding-the-stack）" class="headerlink" title="堆栈解退（unwinding the stack）"></a>堆栈解退（unwinding the stack）</h3><p>假设函数出现异常，而不是正确返回而终止。程序释放堆栈中的内存，但不会在释放堆栈的第一个返回地址后停止，而是继续释放堆栈，直到找到位于try块的返回地质。</p><p><img src="/images/12_23_1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;处理可能出现异常的方法&quot;&gt;&lt;a href=&quot;#处理可能出现异常的方法&quot; class=&quot;headerlink&quot; title=&quot;处理可能出现异常的方法&quot;&gt;&lt;/a&gt;处理可能出现异常的方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;调用abort()或exit()结束程序&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>六年前的自己</title>
    <link href="http://tanrunjie.github.io/2021/12/22/%E5%85%AD%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>http://tanrunjie.github.io/2021/12/22/%E5%85%AD%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/</id>
    <published>2021-12-22T07:17:53.000Z</published>
    <updated>2021-12-22T13:12:35.387Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://csrjtan.github.io/">https://csrjtan.github.io/</a><br>回看六年前的自己，摘录一些当时有意义的文段</p><h3 id="23岁的生日"><a href="#23岁的生日" class="headerlink" title="23岁的生日"></a>23岁的生日</h3><p>重读六年前的自己，用文字记录对这个世界的感受和认知，那时候的自己充满了希望，虽然能力配不上欲望而渐渐失落，但依然希望找到那种年轻的感觉。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>当年的愿望：</p><ul><li>工作上：提高编程和学术能力</li><li>生活上：爱家人，爱生活，爱伴侣</li><li>日常上：坚持读，坚持写，坚持学，坚持感受，坚持表达</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">《成长的天空》 </span><br><span class="line">我沉浸在自己的世界里</span><br><span class="line">写着无关是非的歌谣</span><br><span class="line">点蓝的笔触</span><br><span class="line">划过了年轻的天空</span><br><span class="line">一只飞鸟带走我的青春</span><br><span class="line">还我，岁月沉淀的帽子</span><br><span class="line">轻声说道</span><br><span class="line">年轻总不是永远的借口</span><br></pre></td></tr></table></figure><h3 id="回看中秋自省的自己"><a href="#回看中秋自省的自己" class="headerlink" title="回看中秋自省的自己"></a>回看中秋自省的自己</h3><p>经过5年起起落落，心态转变得很明显甚至于有点得过且过的样子，现在自己比年轻的自己多了一点能力和资源，却失去了做大梦的勇气和毅力。希望自己能依然不断找到人生的兴奋点，勇往直前地去追寻探索，从今天开始，真正的为自己而活，不在乎别人的眼光，不在乎可能会失去的安逸。</p><h3 id="家人信息简要"><a href="#家人信息简要" class="headerlink" title="家人信息简要"></a>家人信息简要</h3><p>爸：1961.7.8，牛，会计。爱好军事政治经济唱歌。性格硬朗好面子。优点：精神好，能干，勤勉<br>妈：1961.11.12，牛，仓管（退休）。爱好家庭家人养生。优点：节俭，爱戴我们，慈祥<br>哥：1987.8.9，兔，前端全栈，爱好广泛潮流酷玩。优点：工程能力强，迁就随和<br>为：1992.08.13，猴，算法攻城狮。爱好：声乐，运动，游戏。优点：耐受力，随和</p><h3 id="选书策略"><a href="#选书策略" class="headerlink" title="选书策略"></a>选书策略</h3><p>出版社-&gt;作者-&gt;版次-&gt;印次-&gt;印数</p><h3 id="追逐幸福的要素"><a href="#追逐幸福的要素" class="headerlink" title="追逐幸福的要素"></a>追逐幸福的要素</h3><ul><li>找到喜欢的工作，有收入又受到社会尊重</li><li>减少上下班耗费的时间，有充足的社交时间</li><li>对国家和社会有政治热情，有参与度</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">不论曾经的彼此多么幼稚，多么可笑</span><br><span class="line">终有一天我们都变得成熟；</span><br><span class="line">也终有一天，我们都会老去；</span><br><span class="line">可是，却没有人可以永远不长大，</span><br><span class="line">却没有人可以永远年轻，</span><br><span class="line">成熟，有时候会让人心痛、很无奈。</span><br><span class="line">那个时候才会懂得：</span><br><span class="line">爱情本不是件该执着的事情。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://csrjtan.github.io/&quot;&gt;https://csrjtan.github.io/&lt;/a&gt;&lt;br&gt;回看六年前的自己，摘录一些当时有意义的文段&lt;/p&gt;
&lt;h3 id=&quot;23岁的生日&quot;&gt;&lt;a href=&quot;#23岁的生日&quot; class=</summary>
      
    
    
    
    
    <category term="博客迁移" scheme="http://tanrunjie.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>金钱之二元整体观</title>
    <link href="http://tanrunjie.github.io/2021/12/22/%E9%87%91%E9%92%B1%E4%B9%8B%E4%BA%8C%E5%85%83%E6%95%B4%E4%BD%93%E8%A7%82/"/>
    <id>http://tanrunjie.github.io/2021/12/22/%E9%87%91%E9%92%B1%E4%B9%8B%E4%BA%8C%E5%85%83%E6%95%B4%E4%BD%93%E8%A7%82/</id>
    <published>2021-12-22T04:14:05.000Z</published>
    <updated>2021-12-27T02:47:52.637Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自微信号十三手记</code></p><p>金钱只是金钱的样子吗？<br>你以为是，但必定不是。</p><p>首先明白，金钱的有形或无形形式为什么存在？<br>是为了运行金钱背后的实际价值</p><p>对于金钱而言，一般有三种状态：获取，存储，使用<br>三种状态在一起就是你金钱的留存路径，也是金钱存在的整体。</p><p>此时，十三先生要你深深的明白：只要你对待金钱的这三种状态不平衡，只偏向执着于其一或其二，被你忽略掉的部分都必定会让你体验到金钱的匮乏，你都必定会经历金钱的反复障碍，无论金钱多少，你都是被金钱牵制捆绑的奴才；若是你懂得了今天讲的金钱整体性，在金钱对境中，把这三部分中你当时所处的部分运作出最大的价值和质感，并透过自己的障碍和痛苦主动去发现自己的单边局限，并及时主动透过逆袭自己的小气和不尊重金钱之粗糙的行为来扩大自己的金钱进出通道和格局，如此，假以时日，你便不会被金钱三部分中任何一部分障碍，你便会逐步成为内心富足的金钱主人。</p><p><strong>一条手记</strong>：二元有相世界，金钱是你自己其中一个相，你对待金钱的状态就是你对待自己和对待世界的状态。</p><h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>这边十三先生提到关于金钱从获得，存储和使用三个维度分析，从提升个人金钱观上升提高个人世界观。</p><ul><li>关于获得：没有人会嫌钱多，在尽个人最大努力以及精力下，应最高效提升金钱的获得效率。</li><li>关于存储：有了上一步，存储才有意义，如何有效理财，提升金钱的有效价值；另外，足够的存储才能带给个人底气和自信。</li><li>关于使用：根据上两步的情况，具体规划用度，及时安抚自我，时刻让自己充满斗志与动力。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自微信号十三手记&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;金钱只是金钱的样子吗？&lt;br&gt;你以为是，但必定不是。&lt;/p&gt;
&lt;p&gt;首先明白，金钱的有形或无形形式为什么存在？&lt;br&gt;是为了运行金钱背后的实际价值&lt;/p&gt;
&lt;p&gt;对于金钱而言，一般有三种状态：获取，存储，使用&lt;br</summary>
      
    
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>经典话术</title>
    <link href="http://tanrunjie.github.io/2021/12/21/%E7%BB%8F%E5%85%B8%E8%AF%9D%E6%9C%AF/"/>
    <id>http://tanrunjie.github.io/2021/12/21/%E7%BB%8F%E5%85%B8%E8%AF%9D%E6%9C%AF/</id>
    <published>2021-12-21T06:49:08.000Z</published>
    <updated>2021-12-21T10:06:22.236Z</updated>
    
    <content type="html"><![CDATA[<p><code>格林先生说</code></p><p>1.yes and 法则<br>通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”</p><p>正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。<br>e.g. …确实会…,不过有时候…</p><p>2.即兴表达框架-PREP<br>Point-&gt;Reason-&gt;Example-&gt;Point</p><p>3.SCQ-A<br>提出问题，寻求帮助。Situation-&gt;Conflict-&gt;Question-&gt;Answer<br>常用于工作汇报，包括问题背景，问题原因，主要问题，如何解决。</p><p>4.FFC 赞美法则<br>Feel-&gt;Fact-&gt;Compare<br>（Feel）我觉得今天你搭配很有气质<br>（Fact）因为腰线能突出身形<br>(Compare) 这是我今年见到的最潮的连衣裙</p><p>5.引导选择<br>模板：是…还是…/ 是否…/ 要不要…,好处是这样<br>提问封闭，只需选择，无需开放式思考</p><p>6.万能表达：观察+感受+需求+请求<br>（观察）珊珊，你最近每晚都是凌晨才睡觉<br>（感受）我觉得有干扰<br>（需求）而且我希望你能身体健康，这样白天才精神<br>（请求）所以希望明天开始，能不能11点准时关灯</p><p>7.汇报FFA法则<br>Fact-&gt;Feeling-&gt;Action<br>最近工作如何，我感觉主要是跟不上进度，接下来一周我会如何做。</p><p><code>蛋蛋碎嘴子</code></p><p>1.工作汇报老手<br>新项目砸了=进行了积极的试错，吸收了宝贵的经验<br>数据不好看=有较大的增长空间<br>啥也没干=稳定发展<br>接下来依旧打算啥也不干=保持现有成绩，稳定成果<br>数据稍微好看一点=取得了较大增长</p><p>2.一个人一直墨迹跟你说话不好意思打断，可以尝试：<br>“好的”，“那确实不错”，“的确是这样”，“嗯你说的对”</p><p>3.接到不想做的任务可以说<br>“领导，我仔细看了一下这个需求，我这里可能存在XXX方面的短板”<br>“想要推进这个事情的话，我可能需要XXX方面的支持”<br>暗含“我可说清楚了，办砸了可不赖我”</p><p>4.当想刺探秘密时，先说结论，然后观察对方的反应<br>“我们公司下个月要发奖金你”</p><p>5.汇报模板：<br>【日常在做什么】+【做这件事的目的】+【做这件事有什么困难】+【怎么做得更好】</p><p>6.当别人布置杂活，不想做就死死的抠细节<br>“你说的这件事大概什么时候需要？”<br>“这个时间点具体到几点？”<br>“我是微信给你还是邮箱给你？”<br>“那我需要先出一个计划，你帮我看看安排合不合适？”<br>如此一来，极大增加之间的沟通成本，让对方崩溃而不想给你安排了。</p><p><code>清闲的九夏</code></p><p>1.别人求你办事，如果想要资源置换，就说：“这事儿不太好办阿”</p><p>2.拒绝借钱：“你知道的，我最近XX，也没钱。”</p><p>3.汇报话术：”这边，我们做了A，B两种方案，各有优势，希望给点意见，看选哪个做比较佳“</p><p>4.经常使用分点叙述<br>我是这么认为的，第一，X；第二，X；第三，X。</p><p>5.请求帮忙时，先提出自己的办法<br>”经过了解，遇到一些问题，我的解决办法是XX，大家看看还有没有更好的办法?”<br>不论多平庸都要提一个。</p><p>6.请求帮忙“不好意思，可以插一下队吗？因为我真的很急”</p><p>7.聊天想聊下去：揪住对方的关键词+延伸过往彼此交流过的信息</p><p>“今天又加班，很烦”<br>“怎么又加班，又是上次那个领导吗”</p><p>“我爱豆塌房子了”<br>“哪个，上回说的那个吗，我去”</p><p>8.不想聊下去<br>“今天又加班”<br>“怎么又加班，这算啥事”</p><p>“我爱豆塌房子了”<br>“又他”</p><p>9.领导说“辛苦了”<br>你：“从中学到很多，很有收获。”</p><p>10.领导的节日问候（也可不发，上班的时候再热情问候即可）：<br>尊称+感谢+互动+祝福</p><p>11.说服别人，改变一个人的想法<br>认同立场，替换观点。</p><p>自嘲： 是阿…而且…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;格林先生说&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1.yes and 法则&lt;br&gt;通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”&lt;/p&gt;
&lt;p&gt;正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。&lt;br</summary>
      
    
    
    
    
    <category term="知乎" scheme="http://tanrunjie.github.io/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>努力方向之正解</title>
    <link href="http://tanrunjie.github.io/2021/12/21/%E5%8A%AA%E5%8A%9B%E6%96%B9%E5%90%91%E4%B9%8B%E6%AD%A3%E8%A7%A3/"/>
    <id>http://tanrunjie.github.io/2021/12/21/%E5%8A%AA%E5%8A%9B%E6%96%B9%E5%90%91%E4%B9%8B%E6%AD%A3%E8%A7%A3/</id>
    <published>2021-12-21T03:09:26.000Z</published>
    <updated>2021-12-21T03:17:26.564Z</updated>
    
    <content type="html"><![CDATA[<p><code>文章摘自微信公众号：十三先生手记</code></p><p>人们总是误以为”方向不对，努力白费“</p><p>所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？<br>看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？<br>于是乎，在很长一段时间里，你在方向的选择上纠结，大量耗费了精力；久而久之，方向选择对你的意义就逐步降低；久而久之，你在没有了方向的努力中不断的迷茫，努力所收获到的就多半不如意；久而久之，你便自然逐步丧失了努力的动力。</p><p>所以其中蕴含<em><strong>真正的智慧</strong></em>是什么呢？<br>此刻，十三先生要你深深的明白：对于你真正想要成就的方向而言，基于外在目标而牵引你的行动方向就是你的迷障，基于你内心真正愿意去做的方向才是真正利于你达成整体目标的方向。若是你在每次做选择之际，你都按你内心真正未权衡的意愿立刻去着手行动，并在行动的过程中，实事求是的不断优化解决遇到的问题，而不是在事前先拿你预设的可能遇到的问题去和你的资源做权衡匹配，在来做方向选择的决定，假以时日，必定你会不断收获到你真正想要收获到的利益。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;文章摘自微信公众号：十三先生手记&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;人们总是误以为”方向不对，努力白费“&lt;/p&gt;
&lt;p&gt;所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？&lt;br&gt;看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？&lt;br&gt;于是</summary>
      
    
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>内存模型</title>
    <link href="http://tanrunjie.github.io/2021/12/20/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://tanrunjie.github.io/2021/12/20/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-12-20T13:03:52.000Z</published>
    <updated>2021-12-22T07:09:05.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="头文件通常包含的内容"><a href="#头文件通常包含的内容" class="headerlink" title="头文件通常包含的内容"></a>头文件通常包含的内容</h3><ul><li>函数原型</li><li>使用了#define或const定义的符号常量</li><li>结构声明</li><li>类声明</li><li>模板声明</li><li>内联函数<br>用#include “”率先在当前工作目录或者源代码目录下找<br>用#include &lt;&gt;率先在标准头的目录下找</li></ul><h3 id="同一个头文件只包含一次"><a href="#同一个头文件只包含一次" class="headerlink" title="同一个头文件只包含一次"></a>同一个头文件只包含一次</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INCLUDE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_H_</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="多个库的链接"><a href="#多个库的链接" class="headerlink" title="多个库的链接"></a>多个库的链接</h3><p>需要确保对象文件或库都是由同一个编译器生成的，若不同的编译器，会为同一个函数生成不同的修饰名称。若有源代码建议用<strong>自己的编译器全部重新编译</strong>，以消除链接错误。</p><h3 id="存储数据的三种方案"><a href="#存储数据的三种方案" class="headerlink" title="存储数据的三种方案"></a>存储数据的三种方案</h3><ul><li>自动存储持续性：函数中声明的变量以及函数参数，会在执行中自动创建，执行完自动释放</li><li>静态存储持续性：使用static关键字的变量，在整个程序运行过程均存在</li><li>动态存储持续性：用new分配的内存，一直存在直到delete</li></ul><h3 id="编译器把自动变量用堆栈的形式管理"><a href="#编译器把自动变量用堆栈的形式管理" class="headerlink" title="编译器把自动变量用堆栈的形式管理"></a>编译器把自动变量用堆栈的形式管理</h3><p>register的变量放在寄存器，依然没有链接性</p><h3 id="静态存储提供三种链接性"><a href="#静态存储提供三种链接性" class="headerlink" title="静态存储提供三种链接性"></a>静态存储提供三种链接性</h3><ul><li>外部链接性：全局（外部链接性）变量（main函数外)</li><li>内部链接性：static的全局变量</li><li>无链接性: 内部的static变量<br>静态变量持续整个程序执行期间，编译器将分配固定的内存块来管理。默认情况下，静态数组以及结构的成员都设置为0。</li></ul><h3 id="外部链接性使用"><a href="#外部链接性使用" class="headerlink" title="外部链接性使用"></a>外部链接性使用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1</span></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">100</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;file2.hpp&quot;</span></span></span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// file2</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> status;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果file2中，用status int status或者 extern int status=20;都会报重新定义的错误。</p><h3 id="应使用外部变量在多文件程序的不同部分共享数据"><a href="#应使用外部变量在多文件程序的不同部分共享数据" class="headerlink" title="应使用外部变量在多文件程序的不同部分共享数据"></a>应使用外部变量在多文件程序的不同部分共享数据</h3><p>内部链接性的静态变量用于多个函数之间共享数据(名称空间提供了新的共享数据方法，static的内部链接性逐步淘汰)</p><h3 id="存储说明符：auto-register-static-extern-mutable"><a href="#存储说明符：auto-register-static-extern-mutable" class="headerlink" title="存储说明符：auto, register, static, extern, mutable"></a>存储说明符：auto, register, static, extern, mutable</h3><p>auto为自动变量;register为寄存器存储；static在整个cpp文件的声明具有函数间的链接性；extern是多文件的外部链接性；mutable使const临时失效；<br>volatile指程序代码没有对内存单元修改，其值也可能发生变化。即每次使用该变量都应其查找，别用缓存。</p><p>另外</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> fingers = <span class="number">10</span>; <span class="comment">//same as static const int fingers;</span></span><br></pre></td></tr></table></figure><p>const使全局变量变成了内部链接性。</p><p>但是在另外的文件用 extern const int fingers;又可以强行变成外部链接性而可用。</p><h3 id="关于函数的链接性"><a href="#关于函数的链接性" class="headerlink" title="关于函数的链接性"></a>关于函数的链接性</h3><p>由于C++不允许函数中定义另外的函数，所以所有函数都为静态存储持续性。但依然可以用extern来使函数为另一个文件使用。使用该函数的每个文件应包含函数原型（方便了解接口的描述，内联函数可以无需接口描述）</p><h3 id="语言链接性"><a href="#语言链接性" class="headerlink" title="语言链接性"></a>语言链接性</h3><p>由于C和C++编译器对函数翻译不一致，在调用C外部链接函数时，应该标注extern “C”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">void</span> <span class="title">spiff</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="布局new占位符"><a href="#布局new占位符" class="headerlink" title="布局new占位符"></a>布局new占位符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUF = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[BUF];</span><br><span class="line"><span class="keyword">double</span> *pd1 = <span class="keyword">new</span> <span class="keyword">double</span>[BUF];</span><br><span class="line"><span class="keyword">double</span> *pd2 = <span class="built_in"><span class="keyword">new</span></span> (buffer)<span class="keyword">double</span>[BUF];</span><br></pre></td></tr></table></figure><p>上述两个指针，pd2为交由程序员自身管理的动态内存；且pd2在delete管辖区域之外。</p><h3 id="命名空间及前途"><a href="#命名空间及前途" class="headerlink" title="命名空间及前途"></a>命名空间及前途</h3><ul><li>命名空间具有外部链接性</li><li>使用在已命名的名称空间中声明的变量，而不是使用外部全局变量</li><li>使用在已命名的名称空间中声明的变量，而不是使用静态全局变量</li><li>如果开发函数库或者类库，将其放入一个名称空间中。如当前C++提倡标准库的都放入std空间中</li><li>不要在头文件使用using,这样会掩盖了可用的名称；另外包含头的顺序会影响程序的行为；若坚持则应在所有的#include后用</li><li>导入名称时，首选用作用域解析或using声明</li><li>对于using声明，首选将作用域于局部，而非全局</li></ul><p>命名空间可以是全局的，也可以位于另一个名称空间中，但<strong>不能位于代码块中</strong></p><p>using namespace std;就是using编译指令，使整个名称空间可用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;头文件通常包含的内容&quot;&gt;&lt;a href=&quot;#头文件通常包含的内容&quot; class=&quot;headerlink&quot; title=&quot;头文件通常包含的内容&quot;&gt;&lt;/a&gt;头文件通常包含的内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数原型&lt;/li&gt;
&lt;li&gt;使用了#define或const定义</summary>
      
    
    
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>能量朗读</title>
    <link href="http://tanrunjie.github.io/2021/12/20/%E8%83%BD%E9%87%8F%E6%9C%97%E8%AF%BB/"/>
    <id>http://tanrunjie.github.io/2021/12/20/%E8%83%BD%E9%87%8F%E6%9C%97%E8%AF%BB/</id>
    <published>2021-12-20T02:43:29.000Z</published>
    <updated>2021-12-21T03:14:12.980Z</updated>
    
    <content type="html"><![CDATA[<p><code>文章摘自微信公众号：十三先生手记</code></p><p>小时候，我就一直渴望幸福，一直渴望坚强；<br>小时候，我就一直渴望正直，一直渴望善良；<br>小时候，为就一直渴望快乐，一直渴望成长；<br>现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！<br>我知道，我不能再这样消极的逃避。<br>我知道，我不能再这样平庸的彷徨。<br>我知道，我要全力迸发我的热情；我要勇敢的收复我的希望。<br>我知道，我要真诚的对待身边每一个人，这样，我才能被每一个人真诚的对待；<br>我知道，我要用心的对待每天的时光，这样，我才能收获每天的力量；<br>我直到，我要帮助身边每一个人达成心愿，这样，大家才能帮助我实现梦想。<br>从今天起，我要打败我的懒惰，重拾我的阳光；<br>从今天起，我要改变我的粗俗，提升我的修养；<br>从今天起，我要挑战我的懦弱，找回我的坚强；</p><p>我是为爱这个世界而来<br>我要让世界因我的爱而更加美丽，<br>我要让世界因我的爱而更加安康，<br>我要让世界因我的爱而更加真诚，<br>我要让世界因我的爱而更加和畅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;文章摘自微信公众号：十三先生手记&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;小时候，我就一直渴望幸福，一直渴望坚强；&lt;br&gt;小时候，我就一直渴望正直，一直渴望善良；&lt;br&gt;小时候，为就一直渴望快乐，一直渴望成长；&lt;br&gt;现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！&lt;br</summary>
      
    
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>逻辑控制</title>
    <link href="http://tanrunjie.github.io/2021/12/16/%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6/"/>
    <id>http://tanrunjie.github.io/2021/12/16/%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6/</id>
    <published>2021-12-16T07:09:48.000Z</published>
    <updated>2021-12-20T03:48:51.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="do…while…-至少会执行一次的循环逻辑"><a href="#do…while…-至少会执行一次的循环逻辑" class="headerlink" title="do…while… 至少会执行一次的循环逻辑"></a>do…while… 至少会执行一次的循环逻辑</h3><p>哨兵(sentinel)字符: 一直读取，直到’他‘为止</p><h3 id="检查文件是否正确打开很关键"><a href="#检查文件是否正确打开很关键" class="headerlink" title="检查文件是否正确打开很关键"></a>检查文件是否正确打开很关键</h3><p>用string读ifstream数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    ifstream inFile;</span><br><span class="line">    inFile.<span class="built_in">open</span>(filename);</span><br><span class="line">    <span class="keyword">if</span>(!inFile.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;Failed Open&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 逐行读放在string</span></span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(inFile, str);</span><br><span class="line">    <span class="comment">//stoi, stof, stod </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于函数，真正的乐趣在于编写自己的函数，函数库"><a href="#关于函数，真正的乐趣在于编写自己的函数，函数库" class="headerlink" title="关于函数，真正的乐趣在于编写自己的函数，函数库"></a>关于函数，真正的乐趣在于编写自己的函数，函数库</h3><h3 id="指向const的指针以及const指针"><a href="#指向const的指针以及const指针" class="headerlink" title="指向const的指针以及const指针"></a>指向const的指针以及const指针</h3><p><img src="/images/12_17_1.png"></p><h3 id="递归使用"><a href="#递归使用" class="headerlink" title="递归使用"></a>递归使用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recurs</span><span class="params">(arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">stat1</span></span><br><span class="line"><span class="function">    <span class="title">if</span><span class="params">(test)</span></span></span><br><span class="line"><span class="function">        <span class="title">recurs</span><span class="params">(arg)</span></span></span><br><span class="line"><span class="function">    stat2</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>先执行stat1,打开满足条件，打开新的递归；直到新的递归不满足条件，逐步执行stat2并关闭当前函数；直到所有打开的函数都关闭了。</p><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>用函数指针将第一函数找到第二函数，而非直接调用；虽然笨拙，但好处是可以在不同时间传递不同的函数地址；<br>语法：double (*pf)(int);</p><h3 id="应尽量使用const"><a href="#应尽量使用const" class="headerlink" title="应尽量使用const"></a>应尽量使用const</h3><p>1.使用const可以避免无意中修改数据的失误<br>2.使用const使函数能够处理const和非const实参，否则将不能处理const实参<br>3.使用const引用使函数能够正确生成并使用临时变量</p><h3 id="引用非常适合用于结构和类"><a href="#引用非常适合用于结构和类" class="headerlink" title="引用非常适合用于结构和类"></a>引用非常适合用于<strong>结构和类</strong></h3><p>何时使用引用参数：1.能够修改调用函数中的数据对象 2.通过传递引用而非拷贝提高程序运行速度</p><h3 id="语法糖：函数默认参数从右往左"><a href="#语法糖：函数默认参数从右往左" class="headerlink" title="语法糖：函数默认参数从右往左"></a>语法糖：函数默认参数从右往左</h3><h3 id="函数多态：重载函数"><a href="#函数多态：重载函数" class="headerlink" title="函数多态：重载函数"></a>函数多态：重载函数</h3><p>不应滥用，适用于不同参数类型输入，完成基本一致功能的多个函数使用，const与非const也不一样</p><h3 id="函数多态：模板编程"><a href="#函数多态：模板编程" class="headerlink" title="函数多态：模板编程"></a>函数多态：模板编程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;  <span class="comment">// typename -&gt; class is ok</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译器如何匹配最佳函数是一个复杂而完备的过程，大致规则如下：<br>1.完全匹配，但常规函数优于模板<br>2.提升转换（char/shorts提升至int, float提升至double)<br>3.标准转换（int 转换char, long 转换double)<br>4.用户定义的转换，如类声明</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;do…while…-至少会执行一次的循环逻辑&quot;&gt;&lt;a href=&quot;#do…while…-至少会执行一次的循环逻辑&quot; class=&quot;headerlink&quot; title=&quot;do…while… 至少会执行一次的循环逻辑&quot;&gt;&lt;/a&gt;do…while… 至少会执行一次的循环</summary>
      
    
    
    
    
    <category term="c++ primer" scheme="http://tanrunjie.github.io/tags/c-primer/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://tanrunjie.github.io/2021/12/15/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://tanrunjie.github.io/2021/12/15/%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-12-15T08:08:04.000Z</published>
    <updated>2021-12-16T07:47:39.782Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-style字符串"><a href="#C-style字符串" class="headerlink" title="C-style字符串"></a>C-style字符串</h3><p>结尾带’\0’,这对于很多处理字符串的函数很关键。#include <cstring>包含大量C语言字串的操作函数如strlen, strcpy, strcat…</p><p>strlen():只计算数组或者指针中的字符个数，不带结尾</p><p><code>cin.getline(name,20)</code>:读取整行的字串到name,最多20个<br>cin.get()：类似，但下一次调用开头会带有换行(换行缓存到下次get)，顺便检查了上一次输入的正确程度。</p><p>针对string类的getline(cin, string); 与cin混合使用时，在cin&gt;&gt;完成后，getline前需要通过getline(cin,”\n”)清除缓存，否则不进入getline输入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除缓存</span></span><br><span class="line">string str=<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br></pre></td></tr></table></figure><h3 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">std::string</span><br></pre></td></tr></table></figure><p>更方便，也更安全。像vector一样管理char.</p><h3 id="struct和union"><a href="#struct和union" class="headerlink" title="struct和union"></a>struct和union</h3><p>union只能同时存储<strong>一种</strong>类型，其他类型的会lost</p><h3 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h3><ul><li>不要delete释放不是new的内存</li><li>不要delete同一块内存两次</li><li>new[]数组应当用delete []释放</li><li>若用new[]为单一实体分配内存，应使用delete（不带方括号）释放</li><li>对空指针delete是安全的</li></ul><h3 id="cin与cin-getline区别"><a href="#cin与cin-getline区别" class="headerlink" title="cin与cin.getline区别"></a>cin与cin.getline区别</h3><p>cin.getline(addr,80) 与cin&gt;&gt;addr<br>getline:读整行直到‘回车’<br>cin:首先跳过‘空格’，读取字串，再次遇‘空格’停止；即跳过前面的空格，读取单个单词。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;ch;</span><br><span class="line">cin.<span class="built_in">get</span>(ch);</span><br><span class="line">ch=cin.<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure><p>上面区别主要是cin&gt;&gt;ch直接跳过空格换行以及制表符</p><h3 id="string格式化输出4位数字-前面补0，多用于文件名操作"><a href="#string格式化输出4位数字-前面补0，多用于文件名操作" class="headerlink" title="string格式化输出4位数字,前面补0，多用于文件名操作"></a>string格式化输出4位数字,前面补0，多用于文件名操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num_zero = <span class="number">4</span>;</span><br><span class="line">string num = <span class="built_in">to_string</span>(int_val);</span><br><span class="line">string new_num = <span class="built_in">string</span>(num_zero-num.<span class="built_in">length</span>(),<span class="string">&#x27;0&#x27;</span>) + num;</span><br></pre></td></tr></table></figure><p>注意int_val长度小于num_zero。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;C-style字符串&quot;&gt;&lt;a href=&quot;#C-style字符串&quot; class=&quot;headerlink&quot; title=&quot;C-style字符串&quot;&gt;&lt;/a&gt;C-style字符串&lt;/h3&gt;&lt;p&gt;结尾带’\0’,这对于很多处理字符串的函数很关键。#include &lt;cst</summary>
      
    
    
    
    
    <category term="c++ primer" scheme="http://tanrunjie.github.io/tags/c-primer/"/>
    
  </entry>
  
  <entry>
    <title>cpp生成代码及数据类型</title>
    <link href="http://tanrunjie.github.io/2021/12/14/cpp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://tanrunjie.github.io/2021/12/14/cpp%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-12-14T02:58:56.000Z</published>
    <updated>2021-12-16T07:10:08.068Z</updated>
    
    <content type="html"><![CDATA[<p>c++基本数据类型主要有<em>bool, char, int, float, double</em>。具体如下：</p><p><img src="/images/12_14_2.png" alt="basic data structure"><br><img src="/images/12_14_3.png" alt="basic data structure2"></p><p>另外，C++<strong>生成代码的过程</strong>是：1.程序员编写源代码 2.编译器正确翻译C++为目标代码 3.链接器将环境启动的代码以及引入库的代码与目标代码正确链接 4.最后才输出机器认识的可执行代码<br><img src="/images/12_14_1.png" alt="code procedure"></p><p>整型提升(integral promotion): 计算表达式时，bool, char, unsigned char, signed char short会转换为int，即int为计算机最自然的类型，也是运算速度可能最快的。较小与较大运算也可能提升。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;c++基本数据类型主要有&lt;em&gt;bool, char, int, float, double&lt;/em&gt;。具体如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/12_14_2.png&quot; alt=&quot;basic data structure&quot;&gt;&lt;br&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="c++ primer" scheme="http://tanrunjie.github.io/tags/c-primer/"/>
    
  </entry>
  
  <entry>
    <title>《浪潮之巅》第4版：读书笔记</title>
    <link href="http://tanrunjie.github.io/2021/11/26/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85/"/>
    <id>http://tanrunjie.github.io/2021/11/26/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85/</id>
    <published>2021-11-26T09:39:52.000Z</published>
    <updated>2021-12-07T06:30:14.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一部工业革命后的近代科技发展史"><a href="#一部工业革命后的近代科技发展史" class="headerlink" title="一部工业革命后的近代科技发展史"></a>一部工业革命后的近代科技发展史</h3><p>第一次阅读这本书大概是在大学的时期，当时应该还是第一第二版的样子。可惜当时认知有限或者是兴趣使然，确实是没有坚持读下来。作为一本信息科技人的导论书籍，吴军老师主要是从<strong>创始人及公司基因，资本加速以及调整创新</strong>等多个维度阐释每一个时代的技术浪潮。也让我重新认识硅谷，重新认识所有信息产业耳熟能详的近代技术及工业制品。有点后悔当初年少没有认认真真开启好这一本导论，以致于没有一个非常完备的大局观去规划个人职业生涯以及技术路线。弯弯曲曲之下，也就不难预见自己人生所能触及的高度了。</p><h3 id="重新认识知名或者耳闻的科技公司发展"><a href="#重新认识知名或者耳闻的科技公司发展" class="headerlink" title="重新认识知名或者耳闻的科技公司发展"></a>重新认识知名或者耳闻的科技公司发展</h3><p>读完整篇最大的收获一方面是吴军老师分析浪潮与技术史的方法论与发展观，另外就是让我重新其认识那些早有耳闻的科技大公司以及了解他们所处时代的科技浪潮与技术产品。按照章节来列举的话：</p><ul><li>chap 1 北美最大的通讯服务商AT&amp;T及其贝尔实验室，对应国内就是国家垄断的电信移动联通三巨头。信息社会中，通讯业至关重要，从通讯硬件供应商以及软件算法的比如思科，华为；到对接用户的服务供应商，只要能分享整个通讯产业链的某一部分就存在巨大的利润。而且通讯的技术和协议也在不断更迭，从有线-&gt;无线-&gt;光纤-&gt;WIFI6，从2G到5G等等。</li><li>chap 2 最早真正研制出计算机的IBM以及其从卖服务器PC到后来成为最大的服务提供商。说实话，IBM的名字在大学时期是如雷贯耳但我却从来不知道他是做什么的。而且至今，我对这家公司的印象和认知可以说都是比较模糊的，但我知道他的TO B服务应该很强。</li><li>chap 3 “八叛徒”引出了硅谷不断开拓创新的精神，从一个核心技术到多个子公司分门立派相互竞争促进，大大加快了IC电路的发展，让我们真正迎来经久不衰的半导体时代。这个有点像一套绝世武功，虽然细节粗糙，但核心理论和精神质变于现有的功法。于是所学的弟子们都自立门派，却又各负盛名。最大的点是芯片技术乍看只是两个核心专利的技术，却影响千千万万，甚至于卡住了我们科技强国的脖子。再次，技术之间的差异如同人之间的差异。<strong>对于社会，最有价值的工作可能是20%的人所完成的；对于个人，最有价值的工作可能是20%的时间和精力里做出来的。</strong>那么，如何提升这一个比例呢？比如对于自己，如何让自己的时间和精力专注在最有价值和意义的事情上。如何让自己成为那20%最有价值的人，价值与流量是共通的。为着最大的社会群体服务，为着最广阔的行业作贡献。更细粒的维度划分就是从<strong>用户群体以及用户时间，从社会进步及人类进步</strong>去思考。（我承认，有点发散了，就当与自己对话了～）</li><li>chap 4 详尽介绍苹果公司的起落，尤记10年前，乔布斯是无数IT从业者最重要的偶像物，如今又有新的浪潮涌起，比如马斯克。相信粉老乔的，都会读那本经典的自传，就不难认识到苹果了。一直以来，苹果在致力创新智能硬件与大多数人生活上的交互方式。从最早的UI系统，到后来的IPOD，IPHONE等。虽然不像安卓那样开源，但苹果的工程师依然非常的顶。极大的推进产品的质量以及竞争力，他们对产品的整合能力也非常出众，致力于把每一款推向市场的产品做到<strong>极致完美</strong>。以至于非常长的时间里，直到今天，我认为苹果公司推出的是市面上比较完美的智能设备，当然价格也很丰满。苹果的利润率是业界闻名的，除了产业链整合以及大品牌效应能从渠道方压缩成本，更重要的是在长时期里核心技术不断研发和积累的成果。</li><li>chap 5 引出第一个方法论，信息产业的三大定律：1.<strong>摩尔定律</strong>，集成电路的集成度每18个月翻一翻。因此半导体智能产品的性能也翻番，说明一个高速发展的IT行业是呈现指数增长 2.<strong>win-tel定律</strong>，基于摩尔定律，硬件进步了，软件也会相应占用更多的资源，以此发挥硬件的能力，倒逼硬件行业完成摩尔增长 3.<strong>反摩尔定律</strong>，对于处在摩尔定律行业的公司，如果不进步达到指数，则在退步。如果只维持去年的水平，18月后就会下降剩一半。</li><li>chap 6 Intel的芯片，全球通用且难有敌手。因为PC端的芯片研发成本摆在那儿，1985对32bit的80386研发投入就超过3亿美元。而且从芯片制程特殊性而言，集成度更高性能和功耗都提升，体积下降。大部分消费者难以退回旧一代的芯片，所以赢者通吃，落后者剩菜残羹。今时今日，除了MAC电脑，绝大部分的PC都采用intel芯片，而且服务器端也有见长。但是浪潮之中PC市场相对饱和，移动端崛起了10多年，更多的芯片战场转移到嵌入式去了。往后的就是终端芯片为主的变革，比如ISP，算法芯，AI芯等。</li><li>chap 7 关于微软以及windows。真正意义第一个垄断性的超级公司就是微软了，因为其卖软件的特性，利润率极高。在PC时代无人匹敌，依赖windows系统，其绑定的PC软件也得到天然的优势。而后移动互联网浪潮来临，微软虽然没有攀上浪尖，却也从游戏方面入手取得不俗的成绩。由此奠定了大公司希望涉猎互联网的全领域利润，比如搜索，社交，移动支付，手机等等。但始终只留下其最擅长的产品。拥有再多第二第三列的产品并不足以让一家企业成为真正帝国性一样富有影响力的机构。另一方面也告诫我们，需要专注，成为单一方向最拔萃的人。</li><li>chap 8 Oracle，一家以数据库闻名的企业。大概是大二还是大三的时候，首次听到这家公司的名字，但依然不得其意。大概跟IBM类似较多开展企业级相关的服务和技术支持。</li><li>chap 9 思科通信巨头，主营交换机路由器等互联网基础设施。早期是互联网用于大学公司等，主要方便学术与办公交流。由于各个子网的网络协议不一，思科早期推出多协议路由终端成为子网间互联的关键。同样互联网的浪潮帮助思科乘风破浪。另外当时红杉资本热衷投资给年轻的穷人，因为越是贫穷越有成功的欲望和拼搏精神。西方的思科，东方的华为。华为起步只比思科晚4年，同样掌握当时世界最前沿的通信技术，通过大批雇用IBM顾问从而实现早期国际化的管理水平。至今华为找到手机移动的增长点，焕发最强民企的生命力。2020年统计，华为的科研投入遥遥领先于第二名的腾讯一倍有余，狼性文化下也涌现超级年薪的PHD。</li><li>chap 10 YAHOO互联网入口，世界第一个黄页。除了整理了当时杂乱的互联网资信，吴军老师认为YAHOO制定了互联网行业重要的规则：开放，免费，基于流量的盈利模式。我认为这与当今的开源思想很有共同点，区别在于开源目前变现能力还不够。为此，我特意知乎了开源目前的盈利模式，主要有以下七个：1.多种产品线，开源版推广，专业版收费； 2.提供技术文档，培训以及二次开发作为收入（不是长久之计）； 3.应用服务托管，相当于云部署； 4.软硬一体化，开放软件，销售硬件 5.开源作为附属品 6.提升品牌和服务（大公司） 7.市场等其他 回到雅虎，当时手工密集式整理互联网信息，使之成为大部分人连接互联网的入口，加之互联网的快速发展使其价值和流量不断提升，也找到广告盈利的模式。当然资信发达引入的问题是对搜索引擎的迫切需求，以至于后来GOOGLE的崛起。当时浪潮之大，以至于当时只要有流量就有钱和投资，大量tricks如何提升网站流量的热度，狂热之下，互联网泡沫来临。网站大洗牌，小公司以及虚胖的大公司都一泻千里，被浪潮拍打在沙滩上。度过寒冬的以及寒冬后的企业，迎来了新的社会资源和人才，缺少老旧对手也能快速崛起。</li><li>chap 11 惠普，一家如今印象只有打印机和PC产品的企业。殊不知一直以来是硅谷神话的代表，也是最早进驻斯坦福工业园的企业，开启了新时代校企合作的高效模式，高校培养顶尖人才，企业吸收并转化成遍布全球的产品。上世纪的惠普主营三大板块包括科学仪器，医疗器材以及计算机和外设，而后经营不合理导致只拆分剩计算机以及外设。</li><li>chap 12 没落贵族-摩托罗拉，最早做通讯设备的公司，包括军用民用无线电，大哥大到2G手机。然而固有利润高的市场抑制了内部4G的推广，可见连内部都产生抑制新技术和新产品的现象，资本市场的竞争是十分激烈的，尽管存在反垄断法，但公司一旦占据行业的龙头位置，后来者就再难以从同样的赛道超越，除非是科技或者产品以质级的飞跃。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一部工业革命后的近代科技发展史&quot;&gt;&lt;a href=&quot;#一部工业革命后的近代科技发展史&quot; class=&quot;headerlink&quot; title=&quot;一部工业革命后的近代科技发展史&quot;&gt;&lt;/a&gt;一部工业革命后的近代科技发展史&lt;/h3&gt;&lt;p&gt;第一次阅读这本书大概是在大学的时期，</summary>
      
    
    
    
    <category term="日常" scheme="http://tanrunjie.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="心得" scheme="http://tanrunjie.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
