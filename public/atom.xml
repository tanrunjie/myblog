<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇幻物语</title>
  
  <subtitle>诗酒趁年华!</subtitle>
  <link href="http://tanrunjie.github.io/atom.xml" rel="self"/>
  
  <link href="http://tanrunjie.github.io/"/>
  <updated>2022-03-02T07:38:43.727Z</updated>
  <id>http://tanrunjie.github.io/</id>
  
  <author>
    <name>神秘囚徒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SLAMBOOK_3_4</title>
    <link href="http://tanrunjie.github.io/2022/02/28/SLAMBOOK2/SLAMBOOK_3_4/"/>
    <id>http://tanrunjie.github.io/2022/02/28/SLAMBOOK2/SLAMBOOK_3_4/</id>
    <published>2022-02-28T03:22:57.000Z</published>
    <updated>2022-03-02T07:38:43.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三维空间刚体运动"><a href="#三维空间刚体运动" class="headerlink" title="三维空间刚体运动"></a>三维空间刚体运动</h3><p>目标：</p><ul><li>理解三维空间的刚体运动描述方式：旋转、变换、四元数和欧拉角</li><li>掌握Eigen库的矩阵和几何模块</li></ul><p>基本概念：<br>坐标：一方面与向量本身有关，另一方面与坐标系选取有关。<br>向量：可以是空间中的一样东西<br>外积可表示旋转：右手系叉乘<br>欧式变换：保证同一个向量在各个坐标系下的长度和夹角都不会变化，则可由一个旋转和平移组成<br>旋转矩阵的性质：行列式为1的正交矩阵，SO(n)是特殊正交群<br>齐次坐标：把旋转和平移写入一个矩阵，且保持整个关系为线性关系<br>变换矩阵T：左上为旋转，右侧为平移，左下为0，右下为1的特殊欧式群</p><h4 id="旋转的表达"><a href="#旋转的表达" class="headerlink" title="旋转的表达"></a>旋转的表达</h4><p>1.旋转矩阵：正交阵且行列式为1,行列向量相互正交；内积为0；</p><p>2.三个旋转轴和旋转角：使用一个向量，方向与旋转轴一致，长度等于旋转角，即李代数。由Rodrigues’s Formula可得：$R = cos\theta I + (1-cos\theta)nn^T + sin\theta n^`$ 其中n’是向量到反对称的转换符，从旋转矩阵到旋转向量转换$\theta = arccos(\frac{tr(R)-1}{2})$<br>转轴n是矩阵R特征值1对应的特征向量。解此方程归一化可得旋转轴。</p><p>3.欧拉角：分离成三次绕坐标轴旋转即yaw-pitch-roll.注意著名的<strong>万向锁</strong>问题，+-90度时，丢失一个自由度，产生奇异性问题。因此不适于插值和迭代，往往只用于人机交互。</p><p>4.四元数：既是紧凑的，也没有奇异性的旋转表达。缺点不够直观和运算复杂。<br>熟悉相互表达之间的转换。</p><h4 id="相似、仿射、射影变换"><a href="#相似、仿射、射影变换" class="headerlink" title="相似、仿射、射影变换"></a>相似、仿射、射影变换</h4><p>1.相似： $T_s = [sR t]$, 7个自由度，xyz坐标上均匀缩放<br>2.仿射： $T_A = [A t]$, 12个自由度，A是可逆矩阵而不必是正交矩阵<br>3.射影： $T_p $, 15个自由度，最不规则的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Eigen rotate data structure</span></span><br><span class="line">Eigen::Matrix3d;  <span class="comment">// 3*3 R matrix</span></span><br><span class="line">Eigen::AngleAxisd;  <span class="comment">// 3*1 R vector</span></span><br><span class="line">Eigen::Vector3d;   <span class="comment">// 3*1 Euler Angle</span></span><br><span class="line">Eigen::Quaterniond;  <span class="comment">// 4*1 quaternion</span></span><br><span class="line">Eigen::Isometry3d;  <span class="comment">// 4*4 T transformed</span></span><br><span class="line">Eigen::Affine3d;   <span class="comment">// 4*4 affine matrix</span></span><br><span class="line">Eigen::Projective3d;  <span class="comment">// 4*4 projective matrix</span></span><br></pre></td></tr></table></figure><h3 id="李群与李代数"><a href="#李群与李代数" class="headerlink" title="李群与李代数"></a>李群与李代数</h3><p>目标：</p><ul><li>理解概念，掌握SO(3),SE(3)</li><li>理解BCH近似意义</li><li>李代数的扰动模型</li><li>运用Sohpus对李代数运算</li></ul><p>什么是Sophus? Sophus是Eigen的拓展，李代数库</p><p>为何引入李代数？ 旋转矩阵自身带有正交和行列式为1的约束，作为优化变量引入额外的约束使得优化困难。通过李群和李代数的转换关系，使位姿估计变成无约束的优化问题，简化求解方式。</p><h4 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h4><p>什么是群？ 一种集合加上一种运算的代数结构。封结幺逆<br>可以验证：</p><ul><li>旋转矩阵集合和矩阵乘法构成群</li><li>变换矩阵和矩阵乘法也构成群</li><li>因此它们为旋转矩阵群和交换矩阵群</li></ul><p>矩阵中常见的群：</p><ul><li>一般线性群GL(n) : n*n的可逆矩阵，对矩阵乘法成群</li><li>特殊正交群SO(n) : 旋转矩阵群SO(2)和SO(3)</li><li>特殊欧式群SE(n) : 前面的n维欧式变换， SE(2)和SE(3)</li></ul><p>什么是李群Lie Group？ 指具有连续（光滑）性质的群，既是群也是流形。整数群是离散的，不属于。而SO和SE在实数空间连续运动，所以属于李群。SO(3)和SE(3)只有定义良好的乘法，没有加法所以难以进行取极限和求导的操作。将旋转矩阵用李代数逼近迭代优化。</p><p>一种李代数（小写）对应一种李群（大写）。</p><p>$RR^T = I$ 对连续时间求导得 $ R^, R^T = -(R^, R^T )^T $, $R^,$为对时间t的导数。即满足反对称矩阵。最后得$R(t) = exp(\phi_0t)$<br>这表示：</p><ul><li>1.给定某时刻的R，我们能求一个$\phi$描述R在局部的导数关系，正切空间邻域。$\phi$正是SO(3)上的李代数so(3)</li><li>2.矩阵指数如何计算？事实上这正是李群与李代数之间的指数/对数映射</li></ul><p>什么是李代数？ 每个李群对应一个李代数，描述了李群单位元数的正切空间性质。满足封闭性、双线性、自反性、雅可比等价</p><p>什么是李括号？二元运算，表达了两个元素的差异。</p><h4 id="指数与对数映射"><a href="#指数与对数映射" class="headerlink" title="指数与对数映射"></a>指数与对数映射</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;三维空间刚体运动&quot;&gt;&lt;a href=&quot;#三维空间刚体运动&quot; class=&quot;headerlink&quot; title=&quot;三维空间刚体运动&quot;&gt;&lt;/a&gt;三维空间刚体运动&lt;/h3&gt;&lt;p&gt;目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解三维空间的刚体运动描述方式：旋转、变换、四元数和欧拉角</summary>
      
    
    
    
    <category term="SLAMBOOK" scheme="http://tanrunjie.github.io/categories/SLAMBOOK/"/>
    
    
    <category term="SLAMBOOK" scheme="http://tanrunjie.github.io/tags/SLAMBOOK/"/>
    
  </entry>
  
  <entry>
    <title>CMAKE实践</title>
    <link href="http://tanrunjie.github.io/2022/02/25/reading/CMAKE%E5%AE%9E%E8%B7%B5/"/>
    <id>http://tanrunjie.github.io/2022/02/25/reading/CMAKE%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-02-25T08:49:17.000Z</published>
    <updated>2022-02-25T09:58:46.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识cmake"><a href="#初识cmake" class="headerlink" title="初识cmake"></a>初识cmake</h3><p>主要特点：</p><ul><li>1.开放源代码</li><li>2.跨平台，可生成native编译配置文件，在linux/unix平台生成makefile;在IOS平台生成xcode;在windows平台生成MSVC工程文件</li><li>3.可管理大型项目，如KDE4</li><li>4.简化编译构建过程和编译过程。工具链简单：cmake+make</li><li>5.高效率，cmake构建KDE4的kdelibs要比autotools快40%，因为cmake工具链中没有libtool</li><li>6.可拓展性，可以为cmake编写特定功能模块，扩展功能</li></ul><p>缺点：</p><ul><li>1.相对简单，但是没有听起来或者想象简单</li><li>2.cmake编写过程实际上是编程过程，使用的是cmake语言和语法</li><li>3.cmake与已有体系配合不算理想如pkgconfig</li></ul><p>作者建议：</p><ul><li>1.如果没有实际的项目需求，那么看到这里就可以停下来，因为cmake学习过程就是实践过程，没有实践读多少天也会忘记</li><li>2.如果你的工程只有几个文件，直接编写Makefile是最好的选择</li><li>3.如果使用c/c++/java以外的语言，请不要使用cmake</li><li>4.如果使用的语言有非常完备的构建体系，如java的ant，也不需要学习cmake</li><li>5.如果项目已经采用非常完备的工程管理工具，且不存在维护问题，没有必要迁移到cmake</li><li>6.如果仅仅使用qt，没必要使用cmake。因为qmake在QT的专业性和自动化程度更高</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;初识cmake&quot;&gt;&lt;a href=&quot;#初识cmake&quot; class=&quot;headerlink&quot; title=&quot;初识cmake&quot;&gt;&lt;/a&gt;初识cmake&lt;/h3&gt;&lt;p&gt;主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.开放源代码&lt;/li&gt;
&lt;li&gt;2.跨平台，可生成nativ</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>软技能</title>
    <link href="http://tanrunjie.github.io/2022/02/21/reading/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    <id>http://tanrunjie.github.io/2022/02/21/reading/%E8%BD%AF%E6%8A%80%E8%83%BD/</id>
    <published>2022-02-21T06:31:30.000Z</published>
    <updated>2022-03-02T07:38:13.516Z</updated>
    
    <content type="html"><![CDATA[<p>主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。</p><h3 id="职业篇"><a href="#职业篇" class="headerlink" title="职业篇"></a>职业篇</h3><p><code>你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然丧失。职业发展的驱动力一定是来自个体本身。记住：工作属于公司的，而职业生涯却属于你自己的。 -- 厄尔.南丁格尔</code></p><h4 id="自我驱动"><a href="#自我驱动" class="headerlink" title="自我驱动"></a>自我驱动</h4><p>拥有商业心态：时刻将自己的软件开发事业当作一桩生意来对待，不要被愚弄了。当你为了谋生一头扎进代码世界时，其实你和中世纪小镇开铁匠铺的铁匠没有什么差别。不要让特定的岗位或者角色固化了你和你的整个职业生涯。转变心态，从卖身契的仆人转变为拥有自己生意的商人，从仰人鼻息的弱势地位转换成自我治理和自我引导的主动地位。</p><p>要做到：</p><ul><li>专注于你正在提供怎样的服务，以及如何营销这项服务；</li><li>想方设法提升你的服务；</li><li>思考你可以专注为哪一特定类型的客户或行业提供特定的服务；</li><li>集中精力成为专家，专门为某一特定类型的客户提供专业的整体服务；（只有真正专注于一类客户，才能找到非常好的工作）<br>再者，如何更好地宣传你的服务，更好地找到你的客户。</li></ul><h4 id="沟通能力"><a href="#沟通能力" class="headerlink" title="沟通能力"></a>沟通能力</h4><p>建议阅读《人性的弱点》–Dale Camegie</p><p>每个人都希望自己重要，永远不要批评，学会换位思考，思考他人而言什么才最重要。将注意力转移到他们身上，用他们的角度思考问题，什么让他们索然无味，什么让他们聚精会神。你的建议出发点理由可能是“让软件更稳定”或者“让软件按时交付”。</p><p>当你学会了如何以令人愉悦的方式与他人互动和交往时，自己的生活也越来越愉快，通过习得这些技能，积累了让自己获益终生的财富，这样的价值无法用金钱衡量。</p><p>还要学会逃离“毒瘤”，争吵时试着果断站在对手一边，结果可能会大吃一惊。</p><h4 id="关于面试"><a href="#关于面试" class="headerlink" title="关于面试"></a>关于面试</h4><p>高级的入职流程：<br>从期待加入的公司里找到联系人-&gt;与联系人建立紧密关系-&gt;获得个人推荐-&gt;面试</p><p>正式面试：自信的展示自己的能力，展示工作需要做的内容</p><p>从雇主的角度，招聘员工是一项投资，需要花费时间和金钱，当然希望看到良好的投资回报率。<br>明确知道自己要做什么以及怎样去做，需要集中精力证明自己是无需督促也能发自做好事情的员工。<br>确保自己技术能力，一直阅读技术书籍和博客，花时间提升自己的技能。<br>为了获得面试经验，也要去面试，多多练习。</p><p>采取行动：</p><ul><li>即使无需努力找工作，也要整理一份清单，列出想去的公司以及你认识的这些公司的人。</li><li>如果公司一个人都不认识，那么制定计划至少去认识其中的一位员工并与之建立联系。</li><li>在所在领域找出至少一个本地用户组，参与聚会，把自己介绍给尽可能多的人。</li></ul><p>关于职业的选择：雇员、独立咨询师（外包服务）、创业者，从雇员稳定开始，结识各类型的朋友并向他们了解如何走上以及走好他们的路。</p><p>关于求职：缩小工作机会池，提高被录取的机会；如何选择专业：</p><ul><li>现在或以前工作的公司里，有哪些主要痛点？你能成为一名专门解决这些痛点的专家吗？</li><li>有没有一种特定的工作无人能做，或者缺乏经验丰富的人？成为这个领域的专家，你会获得大量业务。</li><li>在各种会议上和用户组中哪些话题最常出现？</li><li>哪类问题你回复得最多，无论是针对同事还是Stack Overflow这样的网站上？<br>尽可能地具体，使得在细分市场上更抢手。</li></ul><p>采取行动：</p><ul><li>列出想到所有软件开发的专业领域，从广义范畴逐一细分，看看你能细化到多具体</li><li>当前的专业领域是什么？如果没有，希望选择专攻哪个领域</li><li>主流的招聘网站看看自己的专业领域市场行情如何，确定专业化道路让自己受益还是限制了自己的选择</li></ul><p>关于公司<br>| 公司规模 | 优点 | 缺点 |<br>| 小 | 承担多种责任，工作影响力大 | 没法安静写代码，稳定性差 |<br>| 中 | 稳定，加班少 | 变化慢，难涉及前沿技术 |<br>| 大 | 完备的流程和规范，培训以及大型有影响力的项目 | 官僚主义，只负责代码库的小部分，难受关注 |</p><h4 id="晋升之路"><a href="#晋升之路" class="headerlink" title="晋升之路"></a>晋升之路</h4><p>在更多金钱还是更多责任的选择上，长远看，正确选择几乎是更多责任。</p><p>如何让自己承担更多责任：</p><ul><li>不受重视的项目，你能负责它吗</li><li>你能帮助团队里的新人快速成长吗</li><li>你能负责文档制作流程，并保证及时更新文档吗</li><li>哪项工作没有人愿意做，你愿意承担并将其简化或者自动化吗</li></ul><p>如何让自己引人注目:</p><ul><li>每天记录自己的活动日志-把日志以周报的形式发送给经理</li><li>提供演讲或培训-选择一个对团队有用的话题</li><li>发表意见-只要在会议上就这么做，或者只要你能得到的机会就这么做</li><li>保证“曝光度”-定期与老板会面，确保你经常被注意到</li></ul><h4 id="如何成为专业人士"><a href="#如何成为专业人士" class="headerlink" title="如何成为专业人士"></a>如何成为专业人士</h4><p><code>The War of Art: 成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</code></p><p>认真规划自己的：已经做了什么、计划做什么、有哪些障碍</p><p>培养正确的习惯，推荐阅读《习惯的力量》</p><h4 id="关于赢得自由：为自己工作"><a href="#关于赢得自由：为自己工作" class="headerlink" title="关于赢得自由：为自己工作"></a>关于赢得自由：为自己工作</h4><p>辞掉之前需要一个切实可行的计划，强烈推荐用业余时间启动想创建的业务，等从该业务中产生足以维持生计的收入时，你再转为全职。迫于现实现金流的问题，制订一个计划：什么时候就得认怂做回雇员。以后总可以东山再起，只要没有巨额信用卡债务，没有房屋抵押，没有从亲朋好友借钱而影响到自己的未来。</p><p>为自己工作的意义：1.会比为别人工作时更努力 2.你会更热爱在做的事情，但不要指望持续很久，时间的流逝会使热情变得捉摸不定甚至消逝殆尽 3.突如的工作量使得不止工作8小时<br>推荐书目《So Good They Can’t Ignore You》</p><p>如何行动<br>1.减每月开支并累积资金:确保生存<br>2.保障常规工作之余每周投入15小时做自己的事情，并坚持执行半年以上，确保收入<br>3.提前计算好确切日期，早在一年前做好准备</p><h4 id="关于创业"><a href="#关于创业" class="headerlink" title="关于创业"></a>关于创业</h4><p>了解孵化器或者加速器，注入小额资金换取公司小量股份，通常只持续数月并快速成长。<br>采取行动：</p><ul><li>研究以下一两家心仪的创业公司历史，注意它们是如何开始以及获得融资的</li><li>创立时是单创始人还是多创始人</li><li>创始人还成功创立过其他公司吗</li><li>什么时候开始获得融资的，获得了多少</li><li>这些公司启动时是否加入加速器计划</li></ul><h4 id="关于远程办公"><a href="#关于远程办公" class="headerlink" title="关于远程办公"></a>关于远程办公</h4><p>接受新的工作模式以及迎接新挑战</p><ul><li>时间管理上：建立缜密规律的时间管理，提前计划安排，迎接变化</li><li>自我激励上：建议阅读《驱动力》-Daniel Pink,用习惯驱动自己，排除干扰</li><li>孤独感：周而复始孤独一个人肯定会产生负面影响，走出去，寻找社交生活：参与本地的软件开发者小组聚会，到咖啡馆或者书店工作，规律性到健身房或者运动<br>开始关注允许远程工作的公司，或者完全分布式工作的团队</li></ul><h4 id="关于成功"><a href="#关于成功" class="headerlink" title="关于成功"></a>关于成功</h4><p>“假装自己能成功”，进行自我心理暗示：</p><ul><li>你仿佛已经具备了成功完成任务的技能和天分</li><li>你仿佛已经成为自己想成为的那类人</li><li>仿佛战斗已经结束，而你大获全胜，因为你深知如果自己坚持不懈，胜利就在眼前</li><li>你仿佛已经对即将踏上的未知道路驾轻就熟</li></ul><p>这是有意识地让自己身处逆境，迫使自己学会拼搏。正是在生活中有这样的心态，带领自己勇敢走向未知领域，坚信挑战与机会并存。如果想学会“假装自己能成功”，你就必须拥有破釜沉舟的勇气。</p><p>采取行动：</p><ul><li>诚实地评估一下自己。面对困境，你的心态如何？当遭遇新问题或者不熟悉的问题时，你会怎样做？回想以下，上一次面对困难或者不熟悉的形势时，你是怎么做的？</li><li>你该怎样树立一种自信而不自负的心态？自信与自负之间的区别是什么？为了强化“假装自己能成功”的能力，你现在应该做什么？</li><li>小练习：有目的地将自己置于困境，演练以下自己既定的应对策略。</li><li>Fake it till you make it</li></ul><h4 id="关于技术"><a href="#关于技术" class="headerlink" title="关于技术"></a>关于技术</h4><p>很多情况下，解决问题并不只有一个好的或者是最好的方法。同理，最好的编程语言、框架、操作系统甚至是文本编辑器都不会只有一种，你可找到最适合自己的技术和编程语言以及工具。</p><p>采取行动：</p><ul><li>列出你钟爱的所有技术，或者你觉得更胜一筹的技术</li><li>针对表的每一项，想想它为什么吸引你，你做了哪些比较确定它确实“更胜一筹”？你真的使用过它们的竞争对手吗？</li><li>挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公讨论为什么他们喜欢，更进一步，你试着去使用</li></ul><h3 id="自我营销"><a href="#自我营销" class="headerlink" title="自我营销"></a>自我营销</h3><p>营销追求“实现价值在先，要求回报在后”，你的营销越好，你的才华才能表现得越发淋漓尽致，自我营销的正确方式是为他人提供价值。</p><p>自我营销无非就是学习如何控制好要传达的信息，塑造好自己的形象，扩展信息传达的人群。当开始营销自己的时候，你就是在积极地管理自己的职业生涯，有目的地选择好如何塑造自己，以及将塑造好的自己主动推送给那些对你感兴趣的人。</p><p>采取行动：</p><ul><li>如果你还没有博客，开通一个吧。想想看，你会专注在哪些主题上？</li><li>给你的新博客至少想出20篇文章</li><li>现在做一个时间表，列出开通博客的具体时间以及内容编排</li></ul><h4 id="打造引人注目的品牌"><a href="#打造引人注目的品牌" class="headerlink" title="打造引人注目的品牌"></a>打造引人注目的品牌</h4><p>品牌的四要素：要传递的信息、品牌一致性、品牌的视觉符号、品牌的曝光率</p><p>信息是目的性，传达承载的情感诉求;一致性、视觉符号以及曝光容易增强影响力；</p><p>步骤：</p><ul><li>明确传达的品牌信息</li><li>挑选细分市场</li><li>创建品牌口号</li><li>创建电梯内销售概要：电梯时间介绍完自我</li><li>创建视觉符号</li></ul><h4 id="博客的重要性"><a href="#博客的重要性" class="headerlink" title="博客的重要性"></a>博客的重要性</h4><p>一方面面试评估技术技能非常困难，博客包含丰富的相关信息，代码示例以及深入分析；另一方面流量足够大可以用于推销自己产品的平台；带来一定的业界声望，提高你的沟通能力以及组织自己的思想转化成能力。提高内容的质量，尽量尝试编写高质量的博客文章。</p><p>提高访问量：尝试建设性的评论，并附上个人链接。增加方便分享的功能。</p><h3 id="为他人增加价值"><a href="#为他人增加价值" class="headerlink" title="为他人增加价值"></a>为他人增加价值</h3><p><code>不要努力成为一个成功的人，而要努力成为一个有价值的人   --阿尔伯特.爱因斯坦</code></p><h4 id="给人们想要的东西"><a href="#给人们想要的东西" class="headerlink" title="给人们想要的东西"></a>给人们想要的东西</h4><p>通过现象看本质，找到方法来提供自己的价值。唯一的标准是通过你的方法，可以有效解决真实的问题。</p><p>采取行动</p><ul><li>什么样的内容会让你觉得最有价值？有没有哪个特别的博客会让你每周都去阅读，或者哪个博客的内容如此有价值让你欲罢不能，以至于一点都不想落下</li><li>你可以提供给自己的受众或者你的细分市场最大价值是什么？你认为什么样的内容对于你的受众群体而言最有价值的？</li><li>善于运用社交媒体：如何界定价值：你认为有用或有趣的。</li></ul><p>通过社交媒体分享的内容</p><ul><li>博客文章：转帖一些博客文章或者自己的博客</li><li>新闻报道：转载一些有趣的文章，尽量与自己的细分领域有关，或者与软件开发相关</li><li>励志名言：名人名言，特别是鼓舞人心、非常流行的名言警句</li><li>技巧、小窍门：任何你所了解的特殊技巧或者知识，别人会很欣赏</li><li>幽默故事：发一点幽默故事挺不错的，但是一定要确保好笑，另外千万别冒犯别人</li><li>吸引人的问题：这是一个很棒的吸引你的听众并和他们互动的方法</li><li>自己的一些推广方式活动：别太多，并且跟其他内容混合在一起<br>正如产品和服务90%免费一样，分享的内容也要90%有价值的</li></ul><h4 id="保持活跃度"><a href="#保持活跃度" class="headerlink" title="保持活跃度"></a>保持活跃度</h4><p>社交媒体一大挑战需保持活跃度，如若没有持之以恒，很容易丢掉大量粉丝。选择一到两个心仪的平台，不同社交具有不同的功能划分。</p><p>演讲的地雷：对公众面前演讲怀有恐惧<br>没关系，大部分人都有此症，公共演讲恐惧症是最常见的一种恐惧症。对此你可以做什么呢？好的，有相关组织让你在舒适的氛围中克服公共演讲的恐惧，你可以加入他们。也可以从较小规模场合的演讲做起，比如会议上站起来发言，或者在一群你熟知的人面前做讲座。当你对此越来越轻车熟路，你就可以到更令人生畏的地方公开演讲了。<br>你要记住，作为人类，我们拥有良好的适应能力。只要你把一件事情重复足够多次，你自然就会接纳它。伞兵第一次跳出机舱时候都很害怕，但是经过成功跳伞之后，恐惧最终都会消失。如果你一直坚持公共场合发表演说，你一定会应对自如，恐惧感终将消散。</p><h4 id="做培训"><a href="#做培训" class="headerlink" title="做培训"></a>做培训</h4><p>刚开始可以在免费视频网站youtube做一些教学，然后写书或者开展课程。<br>采取行动：</p><ul><li>列出你所在地区的所有用户组清单，同时列出你能去发表演讲的代码训练营清单。挑选一个自己觉得比较有把握的专题发表一次演讲</li><li>列出网上提供的哪些针对软件开发人员的培训课程，无论是付费的还是免费的，关注并记录找出成功的培训师是怎么做的</li><li>试着以截屏视频的形式创建自己的短时培训课程，然后在免费网站上发布</li><li>创建一个列表，列出所有你可以发表演讲的主题</li></ul><h4 id="关于写书"><a href="#关于写书" class="headerlink" title="关于写书"></a>关于写书</h4><p>如果某人在某特定主题写过书或者发表过文章，那么他们可能是这方面的专家。当人们坐下来读你写的书时，你会长期被他们关注。</p><p>一方面，书籍畅销带来收入；更重要的是，通过出版，你能获得更广泛的知名度和声望。</p><p>明确一个有市场需求的主题，同时能充分展示你作为该领域专家的学识。主题越聚焦越专注，越容易证明你的专业能力。准备一份翔实的写作提纲，清晰概括自己的写作目的，明确本书的目标读者，以及为何认为本书会成功，为何你是写作本书的最佳人选。最后就是每天坚持去写，开始主要是写些博客文章，随着实践推移你的写作技能终将会得到提升。</p><p>采取行动：</p><ul><li>查看亚马逊与软件开发相关的畅销书列表，找出哪种类型的书销量最好</li><li>写长篇大作之前，先从杂志文章这样的短篇着手。找出一些发行量不高的软件开发类杂志，提交一篇文章摘要。</li></ul><h4 id="关于脆弱的自尊心"><a href="#关于脆弱的自尊心" class="headerlink" title="关于脆弱的自尊心"></a>关于脆弱的自尊心</h4><p>如果你想成功，你必须要学会收起自己脆弱的自尊心，勇敢走出去，别害怕让自己出丑。每一个著名的演员、音乐家、专业运动员和公共演说家都曾有过表现不佳的时候，他们自觉地选择了出走困境，尽力而为。成功终将会来，你不可能专注做某件事而毫无长进，你只要坚持足够长的时间就会有所收获。你的生存之道就是不必太在意，别害怕被人看作傻瓜。</p><p>采取行动：</p><ul><li>让自己勇敢起来，今天就是你的大日子。走出去做一些令你害怕的事情，大小都不要紧，迫使自己处于不自在的环境，并提醒自己“这没什么大不了的”</li><li>现在，重复上一步，至少每周一次</li></ul><h3 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h3><p><code>教育就是当一个人把在学校所学全部忘光之后剩下的东西 -爱因斯坦</code></p><p>代码世界变化万千，每天都有新的技术出现，昨天学的东西今天可能没有意义。<br>如何学习成为当代最重要的课题。动手实践和教会他人让我们学得更好。</p><h4 id="快速学习"><a href="#快速学习" class="headerlink" title="快速学习"></a>快速学习</h4><p><code>教育的首要目标，并不在于“知”而在于&quot;行&quot;   -赫伯特.斯宾塞</code></p><p>可以把学到的新知识重新应用于实践，看看新方法能否解决已有问题。你可以继续探索新领域，发现需要解决的新问题。<strong>以解决实践过程中发现的问题</strong>为目标，在向着知识前进的道路上重复这个循环，周而复始。</p><p>采取行动</p><ul><li>你最近一次自学了什么？你的学习过程是怎样的？</li><li>你上一次对兴趣爱好感到激动是在什么时候？你对此爱好了解多少？你是经过刻苦学习才培养此兴趣的，还是通过玩耍自然而然地就学会了？</li></ul><p>快速学习三个要点：</p><ul><li>如何开始：想要开始使用自己所学的，我需要掌握哪些基本知识</li><li>学科范围：我现在学的东西有多宏大？我应该怎么做？在开始阶段，我不需要了解每个细节，但是如果我能对该学科的轮廓有大致的了解，那么将来我就能发现更多细节</li><li>基础知识：不止在开始阶段，要想使用一项特定的技术，我需要了解基本的用户案例和最常见的问题，也需要知道自己学的哪20%就能满足80%的日常应用</li></ul><h4 id="十步学习法体系"><a href="#十步学习法体系" class="headerlink" title="十步学习法体系"></a>十步学习法体系</h4><p>基本思想：要对自己要学的内容有个基本了解，了解自己不知道什么足矣。然后利用这些信息勾勒出学习的范围，即需要学哪些内容，以及学成之后又会收获什么。依靠这些知识，你可以找出各种资源来帮助自己学习。最后你可以创建自己的学习计划，列出要去学习哪些相关课程，筛选学习材料，只保留能帮助自己达成目标的优质内容。</p><p>一旦如此，你就可以把控自己的学习计划中的每个关键点，通过学习-实践-掌握-教授（Learning Doing Learning and Teaching, LDLT)的过程获得对该学科的深刻理解，也向着自己的目标前进。</p><p>十步学习法：</p><ul><li>1.了解全局</li><li>2.确定范围</li><li>3.定义目标</li><li>4.寻找资源</li><li>5.创建学习计划</li><li>6.筛选资源</li><li>7.开始学习，浅尝即止</li><li>8.动手操作，边学边玩</li><li>9.全面掌握，学以致用</li><li>10.乐为人师，融会贯通<br>这是通过“聚焦学习范围，让你关注重点内容”的快速学习方法，迫使你通过“自我探索”和“主动教学”的方式将真正重要的内容印刻在自己的大脑中。</li></ul><p>采取行动：挑选一项你已经烂熟于胸的技术，看看你能否明确以下几点</p><ul><li>如何开始使用它</li><li>该技术的应用广度如何</li><li>利用你需要知道的20%发挥出80%功效</li></ul><h4 id="1-6只做一次"><a href="#1-6只做一次" class="headerlink" title="1-6只做一次"></a>1-6只做一次</h4><p>第一步需要对学的课题做一些基础性研究，有一个全局性的了解。第二步聚焦一个范围，尽可能保持专注。第三步清晰定义成功的标准。第四步查阅尽可能多的与自己所选主题相关的资源，此时无需考虑资源的质量。第五步学习是自然的过程，层层递进。需要<strong>找出最短的时间从A到Z的正确路径，并且到达沿途的重要地标</strong>。另一个好方法就是观察别人是如何教你这个感兴趣的主题的，此时可以翻看第四步中的图书目录，如果五位不同的作者都把内容分解为相同的模块和顺序，那我就会遵循这样的方法制订自己的学习计划。</p><p>至此你知道自己要学什么以及以什么顺序学，那么就是时候决定使用哪些资源来完成自己的学习任务了。在收集了与研究主题相关的所有资源，制订了个人学习计划后，对资源筛选并挑选最有价值的几项来帮助实现自己的目标。</p><p>采取行动：</p><ul><li>挑选你想要了解的一项课题，实际演练上述六个步骤。可以从规模较小的课题开始，以让自己习惯这一过程。注意的是，一定要实际运用。</li></ul><h4 id="7-10循环往复"><a href="#7-10循环往复" class="headerlink" title="7-10循环往复"></a>7-10循环往复</h4><p>学习到这一步开始最有趣的部分，你从掌握恰到好处可以开始的基础知识开始，然后通过操作来学习，同时也通过自我探索收集问题。之后，你掌握了足够多有用的知识。最后你能将自己学到的教给他人，以此来弥补自己在学习过程中的不足，同时通过深入思考巩固知识。</p><p>第七步谨慎两种错误：1.在知之不多的情况下盲目开始，即行动太快； 2.行动之前准备过多，即行动太晚。 要取得平衡，你掌握的知识恰到好处足以让你开始学习，但又不会多到让你无力探索。</p><p>第八步边玩边学，无需提前了解全部内容，首要的事就是亲自操作和亲身体验。通过探索和实践来学习，这个过程中你的大脑自然地产生各种问题：它是如何工作的？如果我这么做，会发生什么？我该如何解决这个问题？这些问题引导你走向真正重要的方向。回头寻找问题答案时，不只这些问题迎刃而解，你记得的东西比学习的要多得多。不要担心结果，勇敢探索。把一些暂时没有答案的问题记录下来，下一步有机会找出这些问题的答案。</p><p>第九步：好奇心时学习特别是自学的重要组成部分，通过动手操作法线的一些没有答案的问题，利用先前收集的资料深入学习，满足自我的好奇心。这一步阅读文字、观看视频、与人交流都是必要的手段，不要害怕回头去操作。给自己足够多的时间去深入理解自己的主题。</p><p>第十步： <code>你告诉我的，我都忘了。你教会我的，我都记得。让我乐在其中，我就一定能学会  -富兰克林</code></p><p>用多种方式将自己所学教给别人，可以是博客，可以是视频，也可以是探讨，将自己所学解释给他。重点在于要花实践将自己学到的东西从大脑提取出来，以别人能够理解的方式组织起来。经历整个过程之后会法线，有很多你以为自己明白了的知识点其实并没有摸透，于是之前没太明白的东西联系起来，简化已有的信息，将它们浓缩并经常复习。</p><p>教授知识的途径：</p><ul><li>撰写博客文章</li><li>创建YOUTUBE视频教程</li><li>发表演讲</li><li>与朋友或爱人进行对话探讨</li><li>在线上论坛回答问题</li></ul><p>最后的思考：学会自我教育需要奉献精神和辛勤工作，但你也能从中收获无比丰厚的回报。十步学习法不能让你瞬间聪明伶俐，但可以让你的学习过程结构化，而非漫无目的地扎进浩渺的知识海洋中。这利用人天生的好奇心来帮助你吸收更多的知识，而我们大多数人正是通过好奇心驱使才学到很多本领的。</p><p>采取行动：</p><ul><li>针对学习计划的每一个模块执行7-10，完成学习实验</li><li>现在不要跳过任何步骤，研究以下如何让该方法奏效，然后尝试优化它</li></ul><h4 id="寻找导师"><a href="#寻找导师" class="headerlink" title="寻找导师"></a>寻找导师</h4><p>检查单：</p><ul><li>他们做到了我想要去做的？</li><li>他们曾经帮助他人做到了我想做的？</li><li>他们现在取得了什么可以展示的成就？</li><li>你能和这个人和睦相处？他充满智慧吗？</li></ul><p>寻找导师的方式最好从自己的熟人、家人和密友推荐。<br>采取行动：</p><ul><li>在寻找之前，必须明确，需要导师帮忙解决什么问题？思考为何需要导师，希望从中获得什么</li><li>列出所有你认识的人作为导师，希望别人也帮忙列出</li><li>想一想为了换取导师帮助，你能给他提供什么</li></ul><p>拥有一位导师是非常好的，而成为导师更是好上加好。回馈社会是非常重要的，不仅因为这是一件正确的事，还因为它可以让你自己受益无穷。</p><p>花点时间思考你会比谁领先一步，谁正在努力学习你已经知道的东西。</p><p>做导师的好处：</p><ul><li>帮助他人时的成就感</li><li>深入学习和领悟知识的途径</li><li>你的徒弟有朝一日会帮到你</li><li>自身的成长。帮助别人成长的过程也就是你成长的过程</li></ul><p>如何成为授业者：</p><ul><li>想出一个你可以教别人的话题并教给别人。本周你要尝试一些教学方法，如写博客、发表演讲、录制截屏等</li><li>当你做教学准备的时候，要特别注意这些准备工作时如何提升自己对某个主题的理解的。对那些没打算去教别人就不可能发现的自己的知识短板要多加注意。</li></ul><h4 id="关于学位"><a href="#关于学位" class="headerlink" title="关于学位"></a>关于学位</h4><p>拥有学位不是成功所必需的，但它肯定是一个限制性因素。软件开发不同于其他行业：领域总是不断变化，每天都有新的框架和技术问世，在教育机构中培养能适应真实工作环境的软件开发人员几乎不可能的。等到教材出版、课表排好的时候，很多东西已经改变了。但这不意味着软件开发不存在永恒不变的核心领域：比如算法、操作系统、关系型数据库理论和编译原理等主题。然而在工作中很少用到学校的技能，我们大部分的工作是如何使用新技术完成工作，很少需要回溯到计算机科学的本源，因此工作中取得成功的直接因素还是相关的工作经验。</p><p>采取行动：</p><ul><li>如果你没有学位，看看哪些网上课程或者业余课程可以参加。看看它会花费多少，多久会让你毕业</li><li>如果你决定完全放弃学位教育，那么一定要确保自己有一个非常出色的作品集。花时间把写过的代码整理一下，证明你了解所做的工作。</li></ul><h4 id="找出自己的短板"><a href="#找出自己的短板" class="headerlink" title="找出自己的短板"></a>找出自己的短板</h4><p>如何识别？ 看看哪些工作上花费大量时间，可以改进的重复性劳动，自己没有完全理解的东西，你回答不出来的面试题。</p><p>采取行动：</p><ul><li>接下来随身带个记事本，把遇到不明白的地方记下来</li><li>在谈话中遇到自己不明白的地方，即使觉得尴尬，也要有意识地提问</li><li>明确一天中的某些“痛点”，弥补知识上的短板，找出消除痛点的方法</li></ul><h3 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h3><p><code>外行静坐等待灵感，内行则唤起激情努力工作。  --斯蒂芬.金</code></p><h4 id="一切始于专注"><a href="#一切始于专注" class="headerlink" title="一切始于专注"></a>一切始于专注</h4><p>什么是专注？  就是注意力分散的对立面，全身心投入到单个项目上。</p><p>始终坚信专注是提高生产力的灵丹妙药，如果能买到专注，我会刷爆信用卡，有多少all in多少，因为我知道这笔投资回报绝对有保障。实际同样如此，专注就是如此重要。</p><p>专注的状态：你全心工作，感觉毫不费力。进入这种状态常常需要点时间，但是一旦找到状态，你就能短期内完成很多任务。</p><p>如何更专注？挑选一些耗时15-30分钟的任务，完全专注做这件事，不要想别的事情，只关注这一项任务。<br>要进入专注模式需要累积冲量，必须克服将自己的思绪集中于单一任务时那种痛感。关键在于要意识到，这种痛苦和不适只是暂时的，不会持续很久。</p><p>这里有个开车比作专注的例子，想象进入专注就是汽车在高速公路上行驶的提速过程，车子进入高速行驶之前需要更换几个档位，如果你总是不断起步停车，那么你的整体速度就会很慢很慢。要让车回到高速换到五档需要花点时间。但是，一旦开到五档，就能轻松巡航了。</p><p>一个好的方法是：坐在电脑前开始打字，旁若无人，心无杂念。用自己的意志力将注意力保持在手上的任务上，起初这种专注是被迫的，但是随着冲量建立，推动你进入专注状态。你的目标是熬过前5～10分钟，如果能撑过10分钟，你就有足够的冲量继续。在这种情形下，即使轻微的分心也不大可能打破你的专注</p><p>采取行动：</p><ul><li>想想你极度专注于工作的时候，那是一种什么感觉？是什么令你进入这种专注模式？又是什么最终打破了你的专注。</li><li>时不时实践以下专注，选一项大概需要占用你半小时或者更长时间的任务，给完成这项任务分配一个完整的时间段。完全专注于这项任务，迫使自己只集中精力在这一项任务上。当你进入专注状态时，在心里记住是什么感觉。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。&lt;/p&gt;
&lt;h3 id=&quot;职业篇&quot;&gt;&lt;a href=&quot;#职业篇&quot; class=&quot;headerlink&quot; title=&quot;职业篇&quot;&gt;&lt;/a&gt;职业篇&lt;/h3&gt;&lt;p&gt;&lt;code&gt;你所能犯的最大错误就是相信自己是在</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>心态练习</title>
    <link href="http://tanrunjie.github.io/2022/01/28/xinli/%E5%BF%83%E6%80%81%E7%BB%83%E4%B9%A0/"/>
    <id>http://tanrunjie.github.io/2022/01/28/xinli/%E5%BF%83%E6%80%81%E7%BB%83%E4%B9%A0/</id>
    <published>2022-01-28T08:57:44.000Z</published>
    <updated>2022-01-28T10:07:00.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可以刻意练习的六种心态"><a href="#可以刻意练习的六种心态" class="headerlink" title="可以刻意练习的六种心态"></a>可以刻意练习的六种心态</h3><p>1.旁观者心态<br><strong>方法：任何不喜欢的事情发生了，你就想象一个画面-你从身体跳出来了，你在5米之外看自己。</strong><br>作用：可以四两拨千斤，化解所有烦恼。开悟者常用，但一般需要经历太多苦修才能达到境界。</p><p>从旁观者看，这个人既陌生又熟悉，但这人终究是陌生人，他发生的任何事都和你没有关系，甚至很搞笑好玩。</p><p>原理：练习久了，你基本不会被情绪困扰，旁观者心态是不响应生理性、基因性、即时性、冲动性和本能性的反应。这些反应是所有痛苦的根源，不但解决不了问题，反而会让事情变得更加糟糕。</p><p>2.归零者心态<br>当感觉做人不容易，压力特别大，心情非常沮丧，非常迷茫的时候，用这个心态可以安静下来找到目标，让自己的人生变清晰，恢复自信。</p><p><strong>方法：想象过去的一切一切都只是你的一个梦而以。既然过去的一切一切都是梦，全部归零了。现在的自己就是新生婴儿，未来的自己一切都是崭新的。</strong></p><p>原理：既然是新生的，就不要带有包袱，不管是荣誉的还是耻辱的。人生最可怕的事情就是路径依赖。归零者厉害之初在于让你突破路径依赖，成为改变命运的起点。</p><p>3.一日囚心态<br>用于对抗消费主义陷阱，远离个人经济危机</p><p><strong>方法：想买东西的时候，想象自己只能活在今天了，买来的东西今天用不上的话就会消失。</strong></p><p>4.造物主心态<br>献给低自尊，低价值感，低存在感的同学们<br>是不是特别爱觉得对不起？是不是觉得自己终究是不配了？是不是觉得强者的世界中自己就像一颗无足轻重的露珠？</p><p>请大胆勇敢使用造物主心态</p><p><strong>方法：这个世界是你创造的，所有人所有事都是你脑袋里长出来的，它们对你来说，才终究是不配了。</strong></p><p>原理：这其实就是世界运作的本质和人生的真相，可以多读相关的书了解</p><p>应用场景：面对应试面试，演讲；面对弱智和杠精；教员就是造物主心态的代表性人物，参见相关诗词“五岭逶迤腾细浪，乌蒙磅翎走泥丸“</p><p>5.复仇者心态<br>弱者最大的问题在于甘于弱势地位，认为“大家不都这样过的吗”，但凡能成就的人都有卧薪尝胆的复仇之心，老天爷不会平白无故帮助一个过于佛系的人。</p><p>首先要找个仇人（不是真正意义上的，是为了成就自己找的一个靶子），可以虚构一个人出来。他和你有着不共戴天之仇，而且如果5年后比他钱少，他就能弄死你。反复构建比较细节，直到可恨。</p><p>方法：如何复仇？如何5年后弄死虚构的人；现在存的每一分钱都是对他的一记耳光。每一分钟认真的工作都是一记飞腿。每一次毫无意义的消费都是仇人射来的箭。每一次自甘堕落都是对手的励精图治。</p><p>可以用于办公室政治，追求对象，追求财富，追求成就上。</p><p>6.永生者心态</p><p>方法：就像永远不会死那样，去追求道德和精神生活的完善。</p><p>“积善之家必有余庆，及不善之家必有余殃”</p><p>总结：心态改变行为，行为改变命运。</p><h3 id="高赞的回答"><a href="#高赞的回答" class="headerlink" title="高赞的回答"></a>高赞的回答</h3><p>1.不内耗<br>不让负面情绪影响自己超过3天，不苦情。有想表达的事情勇敢争取表达；遇到负面反馈再应对，不猜测不内耗。</p><p>2.不让别人消耗自己<br>与简单的人做朋友，远离强势，带来压迫感，会负面打击别人的人。</p><p>3.戒掉虚荣心<br>认清事物的本质，刨去表面毫无用处的附加值</p><p>4.表达出来与内心完全一致，相信别人也如此<br>不害怕表达真实的自己，表达出来的跟内心完全一致，不让别人猜；推己及人，相信别人表达出来的也跟内心一致</p><p>5.练习深度工作<br>专注工作，控制自控力，集中精力在眼前有难度，有挑战的事情上。</p><p>6.做长期主义者<br>人人都渴望“快速成功”，但真正成功的事情都是经历播种、施肥、浇灌而成的。</p><p>7.社交时，不把自己放在被评价的位置<br>遇到比自己强的人，不要在意，承认对方优点，也不否定自我，没有必要太在意别人的看法。</p><p>8.克制自我的同理心<br>太敏感感知别人情绪，容易成为讨好型人格。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;可以刻意练习的六种心态&quot;&gt;&lt;a href=&quot;#可以刻意练习的六种心态&quot; class=&quot;headerlink&quot; title=&quot;可以刻意练习的六种心态&quot;&gt;&lt;/a&gt;可以刻意练习的六种心态&lt;/h3&gt;&lt;p&gt;1.旁观者心态&lt;br&gt;&lt;strong&gt;方法：任何不喜欢的事情发生了，</summary>
      
    
    
    
    <category term="心理" scheme="http://tanrunjie.github.io/categories/%E5%BF%83%E7%90%86/"/>
    
    
    <category term="心理" scheme="http://tanrunjie.github.io/tags/%E5%BF%83%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>代码重用</title>
    <link href="http://tanrunjie.github.io/2022/01/26/cpp/%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8/"/>
    <id>http://tanrunjie.github.io/2022/01/26/cpp/%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8/</id>
    <published>2022-01-26T02:01:07.000Z</published>
    <updated>2022-01-29T02:10:28.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的复用"><a href="#类的复用" class="headerlink" title="类的复用"></a>类的复用</h3><p>上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.私有继承包含<br>大多数人会倾向于使用包含，一方面方便理解，另一方面多重继承容易引起问题；私有继承主要区别在于私有成员变成了继承而来的无名成员，调用成员时依赖this的类型转换。</p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>MI会带来许多新问题：1.两个基类的同名方法； 2.多个相关基类继承同一个类的多个实例问题；为此大家对MI有喜忧参半不同的态度。</p><p>祖先相同时，要用虚基类解决 class Singer:virtual public Worker，虚拟继承。禁止正常的信息再中间类自动传递。</p><p>MI中间隐含较多问题，尽量减少使用，要么就不用。</p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p>模板主要作用是提供参数化类型，将类型关键名作为参数传递给模板类或函数，从而实现最大程度代码复用。</p><p>模板类型使用指针时，代码实现上也得调整，所以一般减少依赖指针模板使用，尽量时bool,char,int,double,string，及一般对象等。</p><p>为容器类提供可重用代码是引入模板的主要动机。非类型参数可以是int,枚举，引用或指针，因此double m 不合法，但double *m是合法的。</p><p>模板多功能性，可用于基类，组件类以及其他模板的类型参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ARray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    T entry;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Type</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrowArray</span>:</span><span class="keyword">public</span> Array&lt;Type&gt; &#123;...&#125;; <span class="comment">// inheritance</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;calss Tp&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Array&lt;Tp&gt; ar;    <span class="comment">// use an Array&lt;&gt; as a component</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// need a blank between &gt; &gt;, show differ from &gt;&gt; operator</span></span><br><span class="line">Array &lt; Stack&lt;<span class="keyword">int</span>&gt; &gt; asi; <span class="comment">// an array of stacks of int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板也可传参</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">n</span>&gt;</span></span><br><span class="line">ArrayTP&lt;T, n&gt;::<span class="built_in">ArrayTP</span>(<span class="keyword">const</span> T &amp; v)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++&gt;)</span><br><span class="line">    ar[i] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示具体化，用于专用定义，优先匹配</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">Ic</span>&lt;</span><span class="keyword">char</span> *&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>模板参数类似函数参数，带有隐式显式转换及参数匹配规则。</p><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><p>两个类关系既不是is-a也不是has-a，但存在控制的关系如电视和遥控。则可以定义遥控为电视的友元类，能够合理范围内修改电视的私有和保护的部分。相当于友元类需要直到朋友类的数据细节乃至实现细节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;类的复用&quot;&gt;&lt;a href=&quot;#类的复用&quot; class=&quot;headerlink&quot; title=&quot;类的复用&quot;&gt;&lt;/a&gt;类的复用&lt;/h3&gt;&lt;p&gt;上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.</summary>
      
    
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>盐选健康</title>
    <link href="http://tanrunjie.github.io/2022/01/21/%E7%9B%90%E9%80%89%E5%81%A5%E5%BA%B7/"/>
    <id>http://tanrunjie.github.io/2022/01/21/%E7%9B%90%E9%80%89%E5%81%A5%E5%BA%B7/</id>
    <published>2022-01-21T04:27:57.000Z</published>
    <updated>2022-01-24T08:49:02.700Z</updated>
    
    <content type="html"><![CDATA[<h3 id="优雅起床"><a href="#优雅起床" class="headerlink" title="优雅起床"></a>优雅起床</h3><p>熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.</p><p>如何优雅起床：</p><ol><li>早起一杯温白开</li><li>感受阳光感受风，开窗通风</li><li>刷牙洗鼻如厕</li><li>吃好早餐</li><li>洗臉：干性用冷水，油性用热水</li></ol><p>起床三不要：</p><ol><li>不要起床太快，可以先拉伸慢慢活动开</li><li>晨练不要太剧烈，八段锦</li><li>如厕不能太用力，自然而为</li></ol><p>避免起床气，其成因：混乱性觉醒，避险本能；不吃早餐危害：肥胖</p><p>完美早餐 = 主食 + 蛋白质 + 蔬菜 + 水果<br>主食可配粗粮红薯、玉米、红豆、紫米等</p><h3 id="早高峰养生"><a href="#早高峰养生" class="headerlink" title="早高峰养生"></a>早高峰养生</h3><p>正常脖子需成熟头部的压力约4～5公斤，但低头幅度达45度时，相当于顶着10瓶大可乐，应尽可能减少低头。长期前伸容易导致肌肉疼痛僵硬，久而久之出现劳损和椎间盘突出；影响心血管健康，血循环及脑供氧。莫憋屁尿，憋尿坏处多。</p><h3 id="对抗久坐"><a href="#对抗久坐" class="headerlink" title="对抗久坐"></a>对抗久坐</h3><p>久坐的坏处：肥胖，腿部血液流速减慢，大量静脉血淤积在小腿，肌肉和韧带等组织过度拉伸的酸胀，使人处于低代谢水平，影响内分泌功能。</p><p>解决方法：寻找站立办公的机会，多走动。小水杯，多厕所，绕远路.</p><p>正确坐姿：抬头挺胸收腹，目视前方</p><p>头部米字操，锻炼颈部后方肌肉</p><p>枕头：压缩后一拳大小，别太软要有支撑</p><p>改善腰部：桥式，飞燕，平板支撑</p><h3 id="关于午休"><a href="#关于午休" class="headerlink" title="关于午休"></a>关于午休</h3><p>吃完睡并不会长胖，多吃或者睡完又吃才会。午睡讲究火候，一般10-20恰到好处，起来神清气爽；如果超过一个小时则进入完全睡眠，起来身体很疲惫。</p><p>晚上难入睡的伙伴，建议中午攒攒睡意，等到晚上再一口气休息好。<br>善用垫枕和U型枕，尽量躺睡，如果不睡觉建议听点音乐作休息，另外善用降噪耳机。</p><h3 id="关于外卖"><a href="#关于外卖" class="headerlink" title="关于外卖"></a>关于外卖</h3><p>正规店家要求《餐饮服务许可证》和《营业执照》<br>远离三种菜：干煸/干锅，“水煮”，炒土豆三鲜等；少油少盐少淀粉。<br>油脂单位热量高，而且代谢困难。减少油炸，重油食品，而且大部分吃到的油不新鲜，进入身体代谢严重影响健康。点菜要避免眼大肚小，饿的时候容易点多。更绝的是可以把油先蹭掉再蘸料吃，实现味道与健康的双赢。</p><p>爱吃炸鸡的朋友，可以把鸡皮扒开吃，尽量摄入非常油的食品。</p><p>针对甜点欲望，可以慢节奏吃+喝水，有效缓解甜品的高热量诱惑。<br>另外要打破杜绝浪费的观念，针对不健康的食品应该果断浪费，因为引起的健康问题反而得不偿失！</p><h3 id="关于晚饭"><a href="#关于晚饭" class="headerlink" title="关于晚饭"></a>关于晚饭</h3><p>正常是规律进食，除非当天中午或者下午吃多了，热量摄入足够了。再就是晚上8～9点入睡的朋友也可不吃，因为睡眠消耗比较小。</p><p>晚饭需要注意的是：1.早吃 2.不暴食 </p><h3 id="关于夜宵"><a href="#关于夜宵" class="headerlink" title="关于夜宵"></a>关于夜宵</h3><p>夜宵的吸引力：1.无聊 2.压力 3.心情不佳<br>可以选择牛奶燕麦粥，少放盐</p><h3 id="关于熬夜"><a href="#关于熬夜" class="headerlink" title="关于熬夜"></a>关于熬夜</h3><p>危害多，长期的睡眠不足比急性通宵的影响更大；严重影响身体机能，免疫力以及反映力等。</p><p>熬夜的主要原因：追剧，小说，游戏。一线普遍12点后睡，日均7.8小时。<br>只要生活规律，睡眠质量高，一觉醒来活力四射，元气满满，那么这样的作息就是适合你的。</p><h3 id="延缓衰老"><a href="#延缓衰老" class="headerlink" title="延缓衰老"></a>延缓衰老</h3><p>25岁后，人的衰老主要是基础代谢下降，预防衰老第一步是维持高水平的代谢率。皮肤衰老首要原因是紫外线，注意防晒。有光就有太阳，有太阳就有紫外线，有紫外线就会变老。</p><h4 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h4><p>主要方法：1.低油低糖不过饱，过度进食容易消化不良，影响肠胃正常运作 2.均衡饮食，三餐规律。</p><p>多摄入牛奶，酸奶和豆腐，高钙能缓解衰老。铁和锌，维生素ABCD等族群，起到意想不到的作用。</p><p>多摄入粗粮，粗粮最大的优点是带来饱腹感，膳食纤维能与脂肪和胆固醇结合，预防高血脂和脂肪肝等病。</p><p>减少多糖，糖基化是糖和蛋白质结合，使其失去正常的结构和颜色。</p><h4 id="快乐"><a href="#快乐" class="headerlink" title="快乐"></a>快乐</h4><p><code>傻人有傻福</code>，生活已经很苦，不要再给自己太大的压力，学会和自己和解，保持良好心情。长期高压下，导致失眠，毛孔粗大，脱发，皮肤暗沉等问题。试着让自己每天都快乐，接受和享受快乐。</p><h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>动起来，每天半小时的健身锻炼，让你的生理状态和精神面貌都年轻；长久不锻炼，肌肉会退化，人的反映也会变缓。</p><h3 id="关于零食"><a href="#关于零食" class="headerlink" title="关于零食"></a>关于零食</h3><p>每天一小包坚果是可行，但注意油炸和蟹黄等。可以考虑燕麦制品的零食，至于糖果巧克力则是甜蜜的负担，心情不好时可以来一下。最后果脯果干不能当水果吃，选择钠含量不超标的食物。辣条含钠量太高，基本卫生也无法保证，还是别吃了。同时也要减少吃冰制品。方便面垃圾不在于其他，只在于热量高，含盐量高，蛋白质和膳食纤维不足。尽量进食新鲜食材，而非加工制品。</p><p><code>胖子不是一口吃成的，你摄入的每一份糖和油脂都不是无辜的。</code></p><h3 id="生活中的建议"><a href="#生活中的建议" class="headerlink" title="生活中的建议"></a>生活中的建议</h3><ul><li>好好吃每一顿正餐，减少时长产生的饥饿感</li><li>保持学习和工作环境的清爽，不把零食放到容易看见的地方，人的意志很容易动摇，不要自己给自己设置考验</li><li>多喝水，有时你感觉饿了并不一定是身体真的缺少能量，也可能是缺水了，试试站起来倒杯水，补充水分，转移注意力，有时候就能骗过大脑</li><li>买小包装或者分装，拆开一大包容易全部吃完</li><li>定时摄入，稍微补充，而不是随时随地补充能量</li><li>千万不要一边看剧综艺一边零食，否则根本想象不到自己吃了多少<br>总之进食要注意糖、脂肪、热量、钠和蛋白质，尽量选低糖、低热量、低钠、高蛋白的食物，用全麦面包和燕麦来饱腹吧～</li></ul><h3 id="关于饮料"><a href="#关于饮料" class="headerlink" title="关于饮料"></a>关于饮料</h3><p>提神饮料可选茶叶，茶本身比较健康，无糖无脂低热量。咖啡可选美式，名字越好听越可能是健康陷阱。平时午饭后，可来一杯咖啡，小憩15-20分钟，即可在午后华丽转身。能量饮料中含有大量糖，而且咖啡因不能摄入过量，最多依赖茶叶，尽量不依赖功能饮料。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;优雅起床&quot;&gt;&lt;a href=&quot;#优雅起床&quot; class=&quot;headerlink&quot; title=&quot;优雅起床&quot;&gt;&lt;/a&gt;优雅起床&lt;/h3&gt;&lt;p&gt;熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="身体健康" scheme="http://tanrunjie.github.io/categories/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/"/>
    
    
    <category term="身体健康" scheme="http://tanrunjie.github.io/tags/%E8%BA%AB%E4%BD%93%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>EIGEN_1 HELLO_WOLRD</title>
    <link href="http://tanrunjie.github.io/2022/01/20/eigen/eigen-1/"/>
    <id>http://tanrunjie.github.io/2022/01/20/eigen/eigen-1/</id>
    <published>2022-01-20T07:19:05.000Z</published>
    <updated>2022-01-24T10:04:32.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="EIGEN简介"><a href="#EIGEN简介" class="headerlink" title="EIGEN简介"></a>EIGEN简介</h3><p>FROM WIKI: Eigen is a high-level C++ library of template headers for linear algebra, matrix and vector operations, geometrical transformations, numerical solvers and related algorithms.<br>简而言之C++开源模板库，支持线性代数、矩阵矢量运算和数值分析，是个方便好用的数学库。</p><p>更绝的是，EIGEN所有源码用头文件编写，所以只需要Include,无需编译链接过程，直接与平台无关，非常通用！</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装过程也很简单，在UBUNTU下直接</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure><p>一般安装在/usr/include目录下</p><p>使用直接与标准库类似，#include &lt;Eigen/Dense&gt;等</p><h3 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h3><p><img src="/images/01_20_1.png"></p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Matrix3d m = Matrix3d::<span class="built_in">Random</span>();</span><br><span class="line">    m = ( m + Matrix3d::<span class="built_in">Constant</span>(<span class="number">1.2</span>)) * <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    <span class="function">Vector3d <span class="title">v</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    v &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt;m*v &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是fix_sized定义的写法，一般4*4以下的矩阵矢量用固定大小写法，对于比较大的才用不定量写法MatirxXd, VectorXd;</p><p>主要结构为1D对象Vector, Array和2D对象Matrix</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;EIGEN简介&quot;&gt;&lt;a href=&quot;#EIGEN简介&quot; class=&quot;headerlink&quot; title=&quot;EIGEN简介&quot;&gt;&lt;/a&gt;EIGEN简介&lt;/h3&gt;&lt;p&gt;FROM WIKI: Eigen is a high-level C++ library of te</summary>
      
    
    
    
    <category term="EIGEN" scheme="http://tanrunjie.github.io/categories/EIGEN/"/>
    
    
    <category term="EIGEN" scheme="http://tanrunjie.github.io/tags/EIGEN/"/>
    
  </entry>
  
  <entry>
    <title>皮肤的秘密</title>
    <link href="http://tanrunjie.github.io/2022/01/19/reading/%E7%9A%AE%E8%82%A4%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://tanrunjie.github.io/2022/01/19/reading/%E7%9A%AE%E8%82%A4%E7%9A%84%E7%A7%98%E5%AF%86/</id>
    <published>2022-01-19T03:07:58.000Z</published>
    <updated>2022-01-19T06:40:18.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识皮肤"><a href="#认识皮肤" class="headerlink" title="认识皮肤"></a>认识皮肤</h3><p>皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经细胞。</p><p>皮肤主要由三层构成：表皮，真皮以及皮下组合。其中表皮与真皮间的基底膜带决定了皮肤的弹性紧致，而且是在1岁形成不可逆的衰老，无法重生所以只能好好保护延缓其衰老。皮肤细胞从底层出生，衰老于真皮并死亡在表皮并成为保护屏障，正常周期为4周。患有皮肤病的可能会加速该过程至5天，导致表皮的屏障并不完整。</p><h3 id="表皮"><a href="#表皮" class="headerlink" title="表皮"></a>表皮</h3><p>由于皮肤表面存在着大量微生物群，所以保持皮肤的pH值是非常重要的，应当合理维持完好无损的酸性保护膜，人工清洁剂约5.5，另外对于皮下脂肪过厚的皮肤褶皱，唯一有效办法是减肥。可以用抗真菌软膏，另外带锌软膏可缓解皮肤炎症，带走多余水分。</p><p><img src="/images/01_19_1.png"></p><p>生长纹无足轻重，关于肤色，是有黑色素影响的。研究表明，橙色皮肤最具吸引力，可多摄入胡萝卜素B达到。颠痕主要由基底膜带大面积受损，表皮过度损耗引起的。对于渗水伤口可用硅霜或贴上硅凝胶伤口贴。治疗疙瘩需要强效疗法如：激光疗法、热针、冷冻疗法以及X射线放射疗法。</p><h3 id="真皮"><a href="#真皮" class="headerlink" title="真皮"></a>真皮</h3><p>真皮充满紧致的结缔组织，带来稳固性以及拉伸性，任何的日晒、日光浴、烟草、压力、睡眠不足、营养不良以及缺乏运动等会加速弹性纤维的流失。臀部皮肤就是自然老化的参考，面部等受光照影响较大是老化较快的皮肤。另外，皮肤在4度就开始出现冻疮，而冬天皮肤也能适应，所以只在晚上睡前使用保湿即可，白天冬天保湿使皮肤含水量升高，反而容易冻伤。</p><p>真皮层拥有大量神经，使皮肤成为最大的神经器官，抚摸有调节中枢神经和社交等作用。同时含有腺体，会分泌激素气味等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;认识皮肤&quot;&gt;&lt;a href=&quot;#认识皮肤&quot; class=&quot;headerlink&quot; title=&quot;认识皮肤&quot;&gt;&lt;/a&gt;认识皮肤&lt;/h3&gt;&lt;p&gt;皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://tanrunjie.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>接纳麻烦</title>
    <link href="http://tanrunjie.github.io/2022/01/18/shisan/%E6%8E%A5%E7%BA%B3%E9%BA%BB%E7%83%A6/"/>
    <id>http://tanrunjie.github.io/2022/01/18/shisan/%E6%8E%A5%E7%BA%B3%E9%BA%BB%E7%83%A6/</id>
    <published>2022-01-18T04:19:43.000Z</published>
    <updated>2022-01-18T04:26:31.950Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自微信号十三手记</code></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>什么是麻烦？<br>是那些你特别想忽略或粗糙嫌弃的事。</p><p>麻烦是什么？<br>是你逃避直面真实自己的托词。</p><p>既然如此，还有真正的麻烦吗？<br>没有，麻烦都是必要的，都是来成就你的礼物。</p><p>类似的麻烦为何会反复出现？<br>因为你一直没有透过直面解决这些麻烦去解除生命中的困惑。</p><p>如此一来，不解决麻烦的结果是什么？<br>你始终不能真正感受自己内心的智慧与力量。</p><h3 id="此刻你要明白"><a href="#此刻你要明白" class="headerlink" title="此刻你要明白"></a>此刻你要明白</h3><p>在你的人生旅程中，你与别人的整体差距，就是你们解决麻烦的程度的差距，如此，当你遇到你以为的麻烦，请不要嫌弃和忽略，请你力所能及的去具体解决，尽量到位，因为在这些解决行为里，不仅有你值得提升的认知，也有你智慧与力量的创造，也有你生命活性的体验，更加你累积人生成就的大礼。</p><h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>虽然我们需要惜时，但也要耐心解决问题，大大小小的问题都是提升自我的途径，尽管麻烦也要去接纳。如果重复度大的则可以考虑自动化去解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自微信号十三手记&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;什么是麻烦？&lt;br&gt;是那些你特别想忽略或粗糙嫌弃的事。&lt;/p&gt;
&lt;p&gt;麻烦是什么</summary>
      
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/categories/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>高效行动</title>
    <link href="http://tanrunjie.github.io/2022/01/18/shisan/%E9%AB%98%E6%95%88%E8%A1%8C%E5%8A%A8/"/>
    <id>http://tanrunjie.github.io/2022/01/18/shisan/%E9%AB%98%E6%95%88%E8%A1%8C%E5%8A%A8/</id>
    <published>2022-01-18T04:11:44.000Z</published>
    <updated>2022-01-18T04:19:10.060Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自微信号十三手记</code></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>为什么那么忙，却没有达到想要的效果？<br>因为多余动作太多</p><p>什么是多余动作？<br>对事情发展本身不直接着力的动作</p><p>多余动作为什么会出现？<br>因为你害怕不利的结果来得太快，所以，你内心的恐惧感让你不自知的搞了这些动作来减缓进展的速度，虽然你以为这样做可以更好的优化过程，可以更快得到有利的结果。</p><p>多余动作会产生什么效果？<br>你以为会让事态进展更高效，但，其实必定会生出更多跟事件发展本身无关的新问题，进而形成层层阻碍。</p><h3 id="此刻你要明白"><a href="#此刻你要明白" class="headerlink" title="此刻你要明白"></a>此刻你要明白</h3><p>在事情发展过程中，只有你的行为尽量实事求是的直接着力于事件本身，你才能尽量减少多余动作产生的能耗，你才能让事件在发展过程中更加清晰的优化，你才能让事件的进展更加高效。</p><h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>对于自我而言，其实是逃避真正问题的根因。有时候明知道面前有必须要解决的问题，但是总是希望从外界或者其他不相关的内容中得到方法，而非从自身出发努力去解决问题。因此往往会偏离有价值的行为，以及有效的解决真正问题，因此才一直无法有效解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自微信号十三手记&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;为什么那么忙，却没有达到想要的效果？&lt;br&gt;因为多余动作太多&lt;/p&gt;
&lt;p&gt;什么</summary>
      
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/categories/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>墙面分割</title>
    <link href="http://tanrunjie.github.io/2022/01/14/pcl/%E5%A2%99%E9%9D%A2%E5%88%86%E5%89%B2/"/>
    <id>http://tanrunjie.github.io/2022/01/14/pcl/%E5%A2%99%E9%9D%A2%E5%88%86%E5%89%B2/</id>
    <published>2022-01-14T06:12:27.000Z</published>
    <updated>2022-01-17T09:21:51.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区域生长分割region-growing-segmentation"><a href="#区域生长分割region-growing-segmentation" class="headerlink" title="区域生长分割region growing segmentation"></a>区域生长分割region growing segmentation</h3><p>算法核心：基于点法线之间角度的比较，尽量将满足平滑约束的相邻点合并在一起，以一簇点集的形式输出，视为相同平面</p><p>工作原理：区域增长从有最小曲率值curvature的点。则需要计算所有曲率值并进行排序；因为曲率最小的点位于平坦区域，从平坦区域增长可以减少区域的总数。（曲率与法线的求解方法类似,法线描述点在表面的法向，曲率则是法线间协方差矩阵的特征值，描述法向一致性)</p><p>具体过程：</p><ol><li>对未标记点的曲率排序，将最小曲率点放入种子集</li><li>对每个种子的所有邻点计算</li><li>1 每个近邻点与当前点的法线角度差(reg.setSmoothnessThreshold),如果小于阈值则重点考虑，进入2.2判断</li><li>2 该点通过2.1法线角度差检验，如果曲率小于设定的阈值(reg.setCurvatureThreshold)，这个点即被添加到种子点集，属于当前平面</li><li>通过两次检验的点，被从原始点云去除</li><li>设置最小点簇的点数reg.setMinClusterSize,以及最大簇reg.segMaxClusterSize</li><li>重复1-3生成min~max个点数的所有平面，并对不同平面标记颜色区分</li><li>直到算法在剩余点中生成的点簇不能满足min,停止工作</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;区域生长分割region-growing-segmentation&quot;&gt;&lt;a href=&quot;#区域生长分割region-growing-segmentation&quot; class=&quot;headerlink&quot; title=&quot;区域生长分割region growing segme</summary>
      
    
    
    
    <category term="pcl" scheme="http://tanrunjie.github.io/categories/pcl/"/>
    
    
    <category term="pcl" scheme="http://tanrunjie.github.io/tags/pcl/"/>
    
  </entry>
  
  <entry>
    <title>特征匹配</title>
    <link href="http://tanrunjie.github.io/2022/01/13/opencv/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/"/>
    <id>http://tanrunjie.github.io/2022/01/13/opencv/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/</id>
    <published>2022-01-13T09:32:27.000Z</published>
    <updated>2022-01-13T09:49:45.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ubuntu下opencv-CMakeList文件"><a href="#ubuntu下opencv-CMakeList文件" class="headerlink" title="ubuntu下opencv CMakeList文件"></a>ubuntu下opencv CMakeList文件</h4><p>通过terminal直接apt安装opencv，一般挂载在/usr/local/lib下；此时find_package即可找到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># cmake needs this <span class="meta-keyword">line</span></span></span><br><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">3.1</span>)</span><br><span class="line"></span><br><span class="line"># <span class="function">Define project name</span></span><br><span class="line"><span class="function"><span class="title">project</span><span class="params">(FeatureMapping)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Find OpenCV, you may need to set OpenCV_DIR variable</span></span><br><span class="line"><span class="function"><span class="meta"># to the absolute path to the directory containing OpenCVConfig.cmake file</span></span></span><br><span class="line"><span class="function"><span class="meta"># via the command <span class="meta-keyword">line</span> or GUI</span></span></span><br><span class="line"><span class="function"><span class="title">find_package</span><span class="params">(OpenCV REQUIRED)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Enable C++11</span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD <span class="number">11</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_CXX_STANDARD_REQUIRED TRUE)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Declare the executable target built from your sources</span></span><br><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">(main main.cpp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Link your application with OpenCV libraries</span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(main PRIVATE $&#123;OpenCV_LIBS&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h4 id="两RGB图间的特征匹配"><a href="#两RGB图间的特征匹配" class="headerlink" title="两RGB图间的特征匹配"></a>两RGB图间的特征匹配</h4><p>具体可参考官方教程<a href="https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html">https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv4/opencv2/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Mat img1 = <span class="built_in">imread</span>(<span class="string">&quot;001.JPG&quot;</span>);</span><br><span class="line">    Mat img2 = <span class="built_in">imread</span>(<span class="string">&quot;002.JPG&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Ptr&lt;SIFT&gt; detector = SIFT::<span class="built_in">create</span>();</span><br><span class="line">    vector&lt;KeyPoint&gt; keypoints1, keypoints2;</span><br><span class="line">    Mat descriptors1, descriptors2;</span><br><span class="line">    detector-&gt;<span class="built_in">detectAndCompute</span>(img1, <span class="built_in">noArray</span>(), keypoints1, descriptors1);</span><br><span class="line">    detector-&gt;<span class="built_in">detectAndCompute</span>(img2, <span class="built_in">noArray</span>(), keypoints2, descriptors2);</span><br><span class="line"></span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class="built_in">create</span>(DescriptorMatcher::FLANNBASED);</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;DMatch&gt;&gt; knn_matches;</span><br><span class="line">    matcher-&gt;<span class="built_in">knnMatch</span>(descriptors1, descriptors2, knn_matches, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> ratio_thresh = <span class="number">0.5f</span>;</span><br><span class="line">    vector&lt;DMatch&gt; good_matches;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;knn_matches.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(knn_matches[i][<span class="number">0</span>].distance &lt; ratio_thresh * knn_matches[i][<span class="number">1</span>].distance)</span><br><span class="line">        &#123;</span><br><span class="line">            good_matches.<span class="built_in">push_back</span>(knn_matches[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat img_matches;</span><br><span class="line">    <span class="built_in">drawMatches</span>(img1, keypoints1, img2, keypoints2, good_matches, img_matches);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//-- Localize the object</span></span><br><span class="line">    std::vector&lt;Point2f&gt; obj;</span><br><span class="line">    std::vector&lt;Point2f&gt; scene;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; good_matches.<span class="built_in">size</span>(); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//-- Get the keypoints from the good matches</span></span><br><span class="line">        obj.<span class="built_in">push_back</span>( keypoints1[ good_matches[i].queryIdx ].pt );</span><br><span class="line">        scene.<span class="built_in">push_back</span>( keypoints2[ good_matches[i].trainIdx ].pt );</span><br><span class="line">    &#125;</span><br><span class="line">    Mat H = <span class="built_in">findHomography</span>( obj, scene, RANSAC );</span><br><span class="line">    cout &lt;&lt; H &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//-- Get the corners from the image_1 ( the object to be &quot;detected&quot; )</span></span><br><span class="line">    <span class="function">std::vector&lt;Point2f&gt; <span class="title">obj_corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    obj_corners[<span class="number">0</span>] = <span class="built_in">Point2f</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    obj_corners[<span class="number">1</span>] = <span class="built_in">Point2f</span>( (<span class="keyword">float</span>)img1.cols, <span class="number">0</span> );</span><br><span class="line">    obj_corners[<span class="number">2</span>] = <span class="built_in">Point2f</span>( (<span class="keyword">float</span>)img1.cols, (<span class="keyword">float</span>)img1.rows );</span><br><span class="line">    obj_corners[<span class="number">3</span>] = <span class="built_in">Point2f</span>( <span class="number">0</span>, (<span class="keyword">float</span>)img1.rows );</span><br><span class="line">    <span class="function">std::vector&lt;Point2f&gt; <span class="title">scene_corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="built_in">perspectiveTransform</span>( obj_corners, scene_corners, H);</span><br><span class="line">    <span class="comment">//-- Draw lines between the corners (the mapped object in the scene - image_2 )</span></span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">0</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">1</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">1</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">2</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>( <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">2</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">3</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>( <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="built_in">line</span>( img_matches, scene_corners[<span class="number">3</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>),</span><br><span class="line">          scene_corners[<span class="number">0</span>] + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)img1.cols, <span class="number">0</span>), <span class="built_in">Scalar</span>( <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">4</span> );</span><br><span class="line">    <span class="comment">//-- Show detected matches</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">namedWindow</span>(<span class="string">&quot;Matches&quot;</span>, WINDOW_NORMAL);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Matches&quot;</span>, img_matches );</span><br><span class="line">    <span class="comment">// imwrite(&quot;good_res.jpg&quot;, img_matches);</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出H：</span></span><br><span class="line"><span class="comment">[0.9771928708495958, -0.008932567941541457, 129.4806431662592;</span></span><br><span class="line"><span class="comment"> 0.0342771681684575, 0.9114878090650101, 163.0011063784843;</span></span><br><span class="line"><span class="comment"> 3.322036688562577e-05, -1.090291446290035e-05, 1]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>值得注意的是，本版本是opencv 4.5,与Opencv2/3有很多语法不一样了；关于特征点和描述子最大的区别：特征点是特征坐标KeyPoint，描述子是描述邻域信息的Mat。</p><p>特征匹配总体的流程：<br>1.首先读取图片，创建检测特征SIFT，ORB，SURF(xfeature)等<br>2.如果检测子包含描述子，则直接detectAndCompute<br>3.一般用BFMatcher直接对描述子点对vector<DMatch> 进行暴力匹配，这里是优化加速版用FLANN的knn，注意的是ORB可用HAMMING距离，其他则不可。<br>4.接着对KNN点对进行基于距离的筛选<br>5.对置信度高的点对进行RANSAC的单应变换矩阵求解</p><p>至此基本完成特征匹配的功能，得到的单应矩阵描述了图片间的变换关系；这是很多CV高级应用的基础，如校正，拼接，SLAM等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;ubuntu下opencv-CMakeList文件&quot;&gt;&lt;a href=&quot;#ubuntu下opencv-CMakeList文件&quot; class=&quot;headerlink&quot; title=&quot;ubuntu下opencv CMakeList文件&quot;&gt;&lt;/a&gt;ubuntu下open</summary>
      
    
    
    
    <category term="opencv" scheme="http://tanrunjie.github.io/categories/opencv/"/>
    
    
    <category term="opencv" scheme="http://tanrunjie.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>需求正解</title>
    <link href="http://tanrunjie.github.io/2022/01/10/shisan/%E9%9C%80%E6%B1%82%E6%AD%A3%E8%A7%A3/"/>
    <id>http://tanrunjie.github.io/2022/01/10/shisan/%E9%9C%80%E6%B1%82%E6%AD%A3%E8%A7%A3/</id>
    <published>2022-01-10T08:43:19.000Z</published>
    <updated>2022-01-10T08:49:04.601Z</updated>
    
    <content type="html"><![CDATA[<p><code>文章摘自微信公众号：十三先生手记</code></p><h3 id="何谓需求"><a href="#何谓需求" class="headerlink" title="何谓需求"></a>何谓需求</h3><p>你清晰什么是真正的需求吗？<br>必定不清晰</p><p>那什么是真正的需求？<br>对境需求，不是过去的需求，更不是未来的需求。</p><p>什么是境的需求？<br>是适合你当时的实际需求。</p><p>需求有几种？<br>两种：人事物本身，以及附加给人事物的概念</p><p>人事物本身是什么意思？<br>是人事物本来的功能和价值。</p><p>概念需求是什么意思？<br>是附加到人事物的功能和价值上的概念，是让你产生欲望后误以为自己需求的迷障。</p><p>谁附加的概念？<br>是你自己或者是外界。</p><h3 id="此刻要你深深的明白"><a href="#此刻要你深深的明白" class="headerlink" title="此刻要你深深的明白"></a>此刻要你深深的明白</h3><p>由于你的贪心，你分不清自己真正的需求。所以，你过去总被人事物的附加概念牵动而消耗了大量资源和精力，所以只有你真正懂得了你要的是人事物本身的功能和价值，你才不会被这些附加的概念干扰和误导，你才真正懂得了珍惜物命，你才真正懂得了珍惜缘分，你才真正懂得了珍惜人生。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;文章摘自微信公众号：十三先生手记&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;何谓需求&quot;&gt;&lt;a href=&quot;#何谓需求&quot; class=&quot;headerlink&quot; title=&quot;何谓需求&quot;&gt;&lt;/a&gt;何谓需求&lt;/h3&gt;&lt;p&gt;你清晰什么是真正的需求吗？&lt;br&gt;必定不清晰&lt;/p</summary>
      
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/categories/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SLAM十四讲_一预备及初识</title>
    <link href="http://tanrunjie.github.io/2022/01/07/SLAMBOOK2/SLAMBOOK_1_2/"/>
    <id>http://tanrunjie.github.io/2022/01/07/SLAMBOOK2/SLAMBOOK_1_2/</id>
    <published>2022-01-07T08:52:46.000Z</published>
    <updated>2022-02-28T03:23:56.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="SLAM：Simultaneous-Localization-and-Mapping"><a href="#SLAM：Simultaneous-Localization-and-Mapping" class="headerlink" title="SLAM：Simultaneous Localization and Mapping"></a>SLAM：Simultaneous Localization and Mapping</h4><p>同步定位及建图：搭载特定传感器的主体，在没有环境先验信息情况下，在运动过程中建立环境模型，同时估计自己位姿的过程。根据传感器分为深度相机，RGB相机和激光。不同传感器特点不一样，应用环境以及遇到的难点不同。本书主要是视觉SLAM：围绕RGB相机，也会引入Depth相机。</p><p>CV之初，人们想象有一天计算机将和人一样，通过眼睛去观察世界，理解周围的物体，探索未知的环境–这是一个美妙而又充满浪漫色彩的梦想，让无数科研人员日夜为之奋斗。</p><p>SLAM相关的应用点：室内扫地机，移动机器人；户外的自动驾驶以及空中无人机；乃至虚拟现实和增强现实设备。</p><p>SLAM研究的三十年，将主干分为四个大模块：</p><ul><li>前端里程计（求pose)：估计相邻图像相机的运动以及局部地图样子</li><li>后端优化（优化pose)：根据多个时刻的相机位姿以及回环检测进行优化，得到全局一致的轨迹和地图</li><li>建图：根据轨迹建立与任务要求对应的地图</li><li>回环检测（优化全局pose)：判断是否到达过先前的位置</li></ul><p>1.定位问题：我在什么地方？<br>2.建图问题：周围环境是什么样？<br>方法很多：室内可以在地板铺设导引线，在墙上贴二维码，在桌子放置无线电定位设备；室外可以安装定位设备（GPS）等<br>传感器主要两类：1.安装在本体上，如轮式编码器，IMU，相机，激光； 2.安装在环境上，上述提到的</p><h4 id="不同传感器的特性以及SLAM的影响"><a href="#不同传感器的特性以及SLAM的影响" class="headerlink" title="不同传感器的特性以及SLAM的影响"></a>不同传感器的特性以及SLAM的影响</h4><p>单目：图像是三维空间的二维投影，必须移动(Motion)才能估计结构(Structure).motion后只能根据视差估计相对的值，具有尺度不确定性。<br>问题：平移才能计算深度以及无法确定真实尺度，导致单目SLAM困难多多，但是成本较低。</p><p>双目：利于基线解决尺度不确定性，但视差的匹配依然效率不高，需要引入GPU和FPGA加速才能实时输出整张图的距离信息。双目测量距离受基线大小影响，所以无人车上一般搭载很大的家伙<br>问题：对于SLAM而言，传感器的配置与标定较为复杂。</p><p>RGB-D相机：通过TOF物理测量手段直接获得全图的深度信息<br>问题：低端TOF测量范围窄，噪声大，视野小；普遍存在日光干扰、无法测量投射材质以及高反高吸收率材质；所以主要用于室内应用，室外难以使用。</p><p>目前而言，如果工作环境理想：静态、刚体、光照变化小、没有人为干扰的场景，SLAM是相当成熟。</p><h4 id="整书结构"><a href="#整书结构" class="headerlink" title="整书结构"></a>整书结构</h4><p>1.数学基础</p><ul><li>SLAM概述</li><li>三维空间运动</li><li>李群和李代数</li><li>针孔模型及opencv</li><li>非线性优化</li></ul><p>2.技术实践</p><ul><li>特征点法的视觉里程计</li><li>直接法的视觉里程计</li><li>里程计实践</li><li>后端优化BA</li><li>后端优化位姿图</li><li>回环检测</li><li>地图构建</li><li>SLAM的未来</li></ul><p>基础知识须知：</p><ul><li>高等数学、线性代数、概率论</li><li>C++语言和Linux基础</li></ul><h4 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h4><p>1.有线性方程 Ax = b，当我们知道 A, b，想要求解 x 时，如何求解？这对 A 和 b 需要哪些条件？提示：从 A 的维度和秩角度来分析<br>1)<strong>b等于0</strong>, n元齐次线性方程组$A_(m*n)x=0$有非0解的充必条件是系数矩阵的秩$Rank(A)&lt;n$<br>2)<strong>b不等于0</strong>,非齐次线性方程组$Ax=b$有解的充必条件是系数矩阵的秩等与增广矩阵的秩； $R(A)=R(B)=n$，则有唯一解，$R(A)=R(B)&lt;n$则有无穷多解</p><ol start="2"><li>高斯分布是什么？它的一维形式是什么样子？它的高维形式是什么样子？<br>又名正态分布，由于中心极限定理，任何分布的抽样分布样本足够大时，其渐进分布都是高斯分布。</li></ol><h3 id="初识SLAM"><a href="#初识SLAM" class="headerlink" title="初识SLAM"></a>初识SLAM</h3><p>目标：</p><ul><li>理解VSLAM各个模块</li><li>搭建环境</li><li>掌握基本CMAKE</li></ul><h4 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h4><p>传感器类型：机器人自身和环境上<br>自身传感：mono, stereo, rgbd, lidar， event camera, imu, 编码器及新式传感器</p><p>一些相关术语：</p><ul><li><strong>尺度不确定性</strong>：2d的rgb图像没有真实尺度信息</li><li>运动motion： 相机外参R， t</li><li>结构structure: 物体的远近和大小</li></ul><h4 id="经典VSLAM框架"><a href="#经典VSLAM框架" class="headerlink" title="经典VSLAM框架"></a>经典VSLAM框架</h4><p><img src="/images/02_25_01.png"><br>流程：</p><ul><li>1.传感器信息读取融合：将所有观测数据正确读入并预处理</li><li>2.视觉里程计VO：估算相邻图像间的运动以及局部地图的样子，又称前端</li><li>3.后端优化：接受不同时刻VO的相机位姿，以及回环检测的信息，一并优化获得全局一致的轨迹和地图</li><li>4.回环检测：判断机器人是否曾经到达过先前的位置，如果有则放到步骤3优化</li><li>5.建图：根据估计的轨迹，建立与任务要求对应的地图</li></ul><p>总体而言，如果把工作环境限定在静态、刚体以及光照变化不明显、没有人为干扰的场景，那么VSLAM系统相当成熟了</p><p>为什么叫<strong>里程计</strong>？ 因为它和实际的里程计一样，只计算相邻时刻的运动，而和再之前过去的信息没有关联。所以属于短时记忆的方案<br>因此也引起<strong>累计漂移</strong>：随着相邻估计的误差叠加，后续的误差会更大和不可控<br>因而引入<strong>后端优化</strong>和<strong>回环检测</strong>的技术来校正</p><p>后端主要处理SLAM过程的<strong>噪声</strong>问题，具体是如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大（Maximum-A-Posteriori),这里包括自身轨迹和地图。主要涉及滤波和非线性优化的算法。</p><p>回环检测主要让机器人具有识别曾到达过场景的能力，具体实施可以是二维码图片或者图像间的相似性。</p><p>最后建图包括度量和拓扑地图：2D栅格地图、2D拓扑地图、3D点云地图、3D网格地图；<br>度量地图：强调精确表示地图中物体的位置关系<br>拓扑地图：强调地图元素之间的关系，考虑节点间的连通性</p><h4 id="SLAM数学建模"><a href="#SLAM数学建模" class="headerlink" title="SLAM数学建模"></a>SLAM数学建模</h4><p>主要分为运动方程和观测方程，根据这两个方程是否线性以及噪声是否服从高斯分布进行分类，主要信息是位姿以及观测的路标</p><h4 id="CMAKE的使用"><a href="#CMAKE的使用" class="headerlink" title="CMAKE的使用"></a>CMAKE的使用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add_executable</span>(exe main.cpp) # 编译执行文件</span><br><span class="line"></span><br><span class="line"><span class="built_in">add_library</span>(lib lib.cpp)  # 编译静态库 .<span class="function">a</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add_library</span><span class="params">(lib_shared SHARED lib.cpp)</span>  # 编译动态库 .so</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">(useLib useLib.cpp)</span>   <span class="meta"># cpp <span class="meta-keyword">include</span>动态库的头文件调用</span></span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(useLib lib_shared)</span>  # 将库文件链接到编译后的文件，最后链接生成最后的执行文件useLib</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 将库hello和共享库hello_shared安装到/usr/local/lib下</span></span><br><span class="line"><span class="function"><span class="title">INSTALL</span><span class="params">(TARGETS hello hello_shared</span></span></span><br><span class="line"><span class="params"><span class="function">LIBRARY DESTINATION lib</span></span></span><br><span class="line"><span class="params"><span class="function">ARCHIVE DESTINATION lib)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 将库的头文件安装到/usr/local/include下</span></span><br><span class="line"><span class="function"><span class="title">INSTALL</span><span class="params">(FILES libHelloSLAM.h DESTINATION include/libHelloSLAM)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 另外目录的项目调用，引入头文件</span></span><br><span class="line"><span class="function"><span class="title">include_directories</span><span class="params">(/usr/local/include/libHelloSLAM)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 链接库文件</span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(useHello /usr/local/lib/libhello_shared.so)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>库文件是压缩包，包含编译好的二进制函数，但不知道函数是什么样和调用形式，所以需要结合<strong>头文件</strong>使用。只有拿到头文件和库文件才可以调用库。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h3&gt;&lt;h4 id=&quot;SLAM：Simultaneous-Localization-and-Mapping&quot;&gt;&lt;a href=&quot;#SLA</summary>
      
    
    
    
    <category term="SLAMBOOK" scheme="http://tanrunjie.github.io/categories/SLAMBOOK/"/>
    
    
    <category term="SLAMBOOK" scheme="http://tanrunjie.github.io/tags/SLAMBOOK/"/>
    
  </entry>
  
  <entry>
    <title>恐惧之破</title>
    <link href="http://tanrunjie.github.io/2022/01/05/shisan/%E6%81%90%E6%83%A7%E4%B9%8B%E7%A0%B4/"/>
    <id>http://tanrunjie.github.io/2022/01/05/shisan/%E6%81%90%E6%83%A7%E4%B9%8B%E7%A0%B4/</id>
    <published>2022-01-05T06:30:42.000Z</published>
    <updated>2022-01-05T06:37:05.425Z</updated>
    
    <content type="html"><![CDATA[<p>你有恐惧吗？  想必有的<br>你想解除恐惧吗？  必定想的<br>可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。</p><h3 id="那么恐惧从何而来？"><a href="#那么恐惧从何而来？" class="headerlink" title="那么恐惧从何而来？"></a>那么恐惧从何而来？</h3><p>从曲解真相而来</p><h3 id="恐惧是什么？"><a href="#恐惧是什么？" class="headerlink" title="恐惧是什么？"></a>恐惧是什么？</h3><p>是你的人生大礼给你的提醒。</p><h3 id="此刻要你深深明白"><a href="#此刻要你深深明白" class="headerlink" title="此刻要你深深明白"></a>此刻要你深深明白</h3><p>二元有相世界，恐惧来自于你对真相的无视或者曲解。如此，只要你无视或者曲解了真相，必定会形成相应的恐惧；如此，你内心恐惧的形成是为了提醒你搞清楚恐惧背后的真相；如此，若是你逃避真相，你必定会反复感受到恐惧；如此，当你心有恐惧，请直面你所恐惧的东西，并搞清楚其真相，当你一旦真正清楚真相，恐惧必定就会随之而消失；与此同时，必定你就能在搞清楚真相的过程中收获到你人生的大礼。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你有恐惧吗？  想必有的&lt;br&gt;你想解除恐惧吗？  必定想的&lt;br&gt;可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。&lt;/p&gt;
&lt;h3 id=&quot;那么恐惧从何而来？&quot;&gt;&lt;a href=&quot;#那么恐惧从何而来？&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/categories/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>对象和类</title>
    <link href="http://tanrunjie.github.io/2021/12/31/cpp/%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/"/>
    <id>http://tanrunjie.github.io/2021/12/31/cpp/%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</id>
    <published>2021-12-31T08:19:41.000Z</published>
    <updated>2022-01-26T02:19:00.698Z</updated>
    
    <content type="html"><![CDATA[<p>OOP特性：</p><ul><li>抽象</li><li>封装和数据隐藏</li><li>多态</li><li>继承</li><li>代码的可重用性</li></ul><p>接口分离： 1.提供类的声明 2.提供类成员函数</p><p>析构函数只有在构造函数用了new分配内存，才需要出来delete释放内存。否则无需工作。</p><p><strong>const放在函数括号后</strong>：即为const成员函数，作用指不修改调用对象。</p><p>this指针的引入： 用来指向调用当前成员函数的对象（this作为隐藏参数传递给方法）</p><p>类静态成员变量： static const int Len = 30; 只能是整型或枚举的静态常量</p><h4 id="类结合操作符重载"><a href="#类结合操作符重载" class="headerlink" title="类结合操作符重载"></a>类结合操作符重载</h4><p>成为多态的重要一部分，隐藏了内部操作，强调了抽象的实质意义。<br>C++操作符重载要点：</p><ol><li>重载后的操作符至少有一个操作数是用户定义的类型</li><li>使用操作符不能违反该操作符原有的句法规则</li><li>无法定义新的操作符</li><li>不能重载sizeof . .* :: ?: typeid *_cast</li></ol><h4 id="友元包含函数，类和成员函数"><a href="#友元包含函数，类和成员函数" class="headerlink" title="友元包含函数，类和成员函数"></a>友元包含函数，类和成员函数</h4><p>为何需要？  在为类重载二元操作符时，需要用到友元关系，方便使用。<br>存在的主要目的是作为类扩展接口的组成部分。<br>e.g Time乘以double可以用成员函数重载，但double乘以Time时不能，除非要求用户不能如此调用。否则应该引入友元函数重载。<br>一个常用的友元重载则是  cout &lt;&lt; Time,而非用成员函数的 Time&lt;&lt; cout</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前一种成员函数重载 Time*double</span></span><br><span class="line">Time Time::<span class="keyword">operator</span>*(<span class="keyword">double</span> mul) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  Time result;</span><br><span class="line">  <span class="keyword">long</span> totalminutes = hours * mul * <span class="number">60</span> + minutes * mul;</span><br><span class="line">  result.hours = totalminutes /<span class="number">60</span>;</span><br><span class="line">  result.minutes = totalminutes %<span class="number">60</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后一种友元重载 double*Time</span></span><br><span class="line"><span class="comment">// 第一步：原型放入类的声明之中</span></span><br><span class="line"><span class="keyword">friend</span> Time <span class="keyword">operator</span>*(<span class="keyword">double</span> m, <span class="keyword">const</span> Time &amp; t);</span><br><span class="line"><span class="comment">// 第二步：定义编写</span></span><br><span class="line">Time <span class="keyword">operator</span>*(<span class="keyword">double</span> mul, <span class="keyword">const</span> Time &amp; t)</span><br><span class="line">&#123;</span><br><span class="line">   Time result;</span><br><span class="line">  <span class="keyword">long</span> totalminutes = t.hours * mul * <span class="number">60</span> + t.minutes * mul;</span><br><span class="line">  result.hours = totalminutes /<span class="number">60</span>;</span><br><span class="line">  result.minutes = totalminutes %<span class="number">60</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了cout &lt;&lt;连续可输出，友元声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt; (ostream &amp; os, <span class="keyword">const</span> Time &amp; t)</span><br><span class="line">&#123;</span><br><span class="line">  os &lt;&lt; t.hours &lt;&lt; <span class="string">&quot; hours&quot;</span> &lt;&lt; t.minutes&lt;&lt; <span class="string">&quot; minutes&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint"><a href="#接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint" class="headerlink" title="接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)"></a>接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)</h4><p>蓝图是一个有意思的词语，后续多态也会继续接触到，是一个隐性类型表征；在类的类型转换上，需要尤其注意编译器二义性转换的问题。<br>警告：谨慎地使用隐式转换函数。<strong>explicit</strong>定义类的构造函数，则相关对象的类型转换需要显式调用，不能隐式转换。</p><h4 id="类声明描述了如何分配内存，但并不执行分配内存"><a href="#类声明描述了如何分配内存，但并不执行分配内存" class="headerlink" title="类声明描述了如何分配内存，但并不执行分配内存"></a>类声明描述了如何分配内存，但并不执行分配内存</h4><p>static int num;的初始化是在类声明之外，int className::num=0;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBad sailor = sports;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">StringBad sailor = <span class="built_in">StringBad</span>(sports);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 则原型为</span></span><br><span class="line"><span class="built_in">StringBad</span> (<span class="keyword">const</span> StringBad &amp;); <span class="comment">//由于不知道更新类静态变量，导致计数出问题</span></span><br></pre></td></tr></table></figure><h4 id="隐式成员函数"><a href="#隐式成员函数" class="headerlink" title="隐式成员函数"></a>隐式成员函数</h4><p>C++自动提供下列成员函数</p><ul><li>默认构造函数</li><li>复制构造函数</li><li>赋值操作符</li><li>默认析构函数</li><li>地址操作符<br>析构用了delete的类，所有对象生成的构造函数都应该使用new，否则会引起浅复制析构的错误。绝对避免试图删除已经删除的数据的行为！</li></ul><p>书中的解决方案：使用deep copy，每个对象有自己的数据，而不是引用。<br>增加复制构造函数和赋值操作符，使类正确管理对象使用的内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拷贝函数深复制</span></span><br><span class="line">StringBad::<span class="built_in">StringBad</span>(<span class="keyword">const</span> StringBad &amp; st)</span><br><span class="line">&#123;</span><br><span class="line">  num_strings++;</span><br><span class="line">  len = st.len;</span><br><span class="line">  str = <span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">  std::<span class="built_in">strcpy</span>(str, st.str);  <span class="comment">// 复制构造，深复制而非隐式浅复制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值深复制:并非创建对象，而是对已有对象操作</span></span><br><span class="line">StringBad &amp; StringBad::<span class="keyword">operator</span>=(<span class="keyword">const</span> StringBad &amp; st)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;st)  <span class="comment">// assigned to itself</span></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">delete</span> [] str; <span class="comment">// free old</span></span><br><span class="line">  len = st.len;</span><br><span class="line">  str = <span class="keyword">new</span> <span class="keyword">char</span> [len+<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(str, st.str);</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配数组指针的释放语法"><a href="#适配数组指针的释放语法" class="headerlink" title="适配数组指针的释放语法"></a>适配数组指针的释放语法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> words[<span class="number">15</span>]=<span class="string">&quot;bad idea&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> * p1 = words;</span><br><span class="line"><span class="keyword">char</span> * p2 = <span class="keyword">new</span> <span class="keyword">char</span>;</span><br><span class="line"><span class="keyword">char</span> * p3;</span><br><span class="line"><span class="comment">// delete p1,p2,p3; suitable way</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// insuitable way, undefined</span></span><br><span class="line"><span class="keyword">delete</span> [] p1;</span><br><span class="line"><span class="keyword">delete</span> [] p2;</span><br><span class="line"><span class="keyword">delete</span> [] p3;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>new 对应 delete, delete[] 对应new []</p><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>执行在构造函数之前，因此可用于对const常量进行赋值，对声明为引用的类成员也类似。</p><ul><li>只能用于构造函数</li><li>必须以此初始化非静态const数据成员</li><li>必须以此初始化引用数据成员</li></ul><h4 id="继承is-a"><a href="#继承is-a" class="headerlink" title="继承is-a"></a>继承is-a</h4><p>用virtual虚函数以及动态指针来实现多态（dynamic binding动态编译，需额外开销），派生可自动向基类类型转换，称为向上强制转换。反之则不可，需显式转换。<br>引出C++指导原则之一：不要为不使用的特性付出代价</p><h4 id="虚函数工作原理"><a href="#虚函数工作原理" class="headerlink" title="虚函数工作原理"></a>虚函数工作原理</h4><p>编译器处理虚函数会增加一个隐藏成员指向该函数的地址，若派生重定义了虚函数，则该指针指向新的函数地址。<br>多态在内存和执行带来一定的成本：1.每个对象因存储地址而增大 2.编译器要为每个类创建虚函数地址表（数组） 3.每个函数调用需要额外查找表中的地址<br>重载的虚基函数在派生实现时改动需要全部一起改动，称为类型协变</p><p>应当把所有派生重新定义的函数再基类设置为虚函数，如果强制需重新定义则=0成纯虚函数</p><h4 id="public-protected-private继承"><a href="#public-protected-private继承" class="headerlink" title="public/protected/private继承"></a>public/protected/private继承</h4><p>派生公共继承关系是is-a，继承了基类的接口；其他两种是has-a关系，继承了成员成为私有，只可在声明内部使用；</p><p>构造函数，析构函数，=号，友元不能自动继承，需重新声明并实现。<br>protect继承则派生声明不能直接访问基类私有成员，通过public方法调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheOnlyInstance</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> TheOnlyInstance * <span class="title">GetTheOnlyInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">static</span> TheOnlyInstance obj;</span><br><span class="line">      <span class="keyword">return</span> &amp;obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  protect:</span><br><span class="line">    <span class="built_in">TheOnlyInstance</span>()&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// other data</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用时 TheOnlyInstance * p = TheOnlyInstance::GetTheOnlyInstance();</span></span><br></pre></td></tr></table></figure><p>传对象函数尽量用引用，避免构造和析构的开销；可以将派生对象用等号赋给基类对象，但相反则需提前明确定义。传引用可明确派生对象的类型，否则值引用可能会被编译器自动类型转换，发生意想不到的事情。也可使用dynamic_cast&lt;const baseDMA &amp;&gt;(hs)的方式强制类型转换。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OOP特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象&lt;/li&gt;
&lt;li&gt;封装和数据隐藏&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;代码的可重用性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口分离： 1.提供类的声明 2.提供类成员函数&lt;/p&gt;
&lt;p&gt;析构函数只有在构造函</summary>
      
    
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2021_年终总结</title>
    <link href="http://tanrunjie.github.io/2021/12/31/rizhi/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://tanrunjie.github.io/2021/12/31/rizhi/2021-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T06:19:34.000Z</published>
    <updated>2022-01-05T06:25:14.784Z</updated>
    
    <content type="html"><![CDATA[<p>回顾今年的自己，提出个人思见和应该执行改进的点。</p><h3 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h3><p>年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于opencv的图表绘制上，另外一个是基于opencv的户型图分割项目。由于数据来源没有统一化，基于图像的户型分割较大的不稳定因素；关于图表绘制核心的功能就是解决文本碰撞的问题；期间还用网页自动化点击脚本完成了一个疫情一日一表的自动填表功能，节省了每日必做的无用行为。之前看到python基于桌面图像识别可以自动匹配鼠标行为，这是原来项目的高级方法。作为一个程序员，生活中如果出现较多的重复度大的行为与操作时，就应该开始考虑自动化脚本或者程序去自动执行。</p><p>跳出在顺德的工作后，由于皮肤问题变本加厉，有很长的一段时间我是在家休养，每天除了睡得非常多以外，大部分时间都在宅家度过，让老父母亲着实担心不浅。这个坏毛病是在香港最后几年养成的，当时的这个研究生和本科的一些坏习惯让我最终渐渐失去了对自我的自律以及对自我的期待，对自我的希望。我当时像泄了气的气球，一泻千里，由此深深的陷入人生以来的低谷。也许是我的叛逆期晚到了，从那一刻我才开始体会到一点点的自由，自我开始向这个世界抗争拉扯。大学以前，一直认为只要读书好就可报答家人，这种被动的内驱力面对真正的困难和社会的残酷竞争时是多么的无力。</p><p>害怕失败，害怕白眼，害怕接受自己的无能，于是我有点像堕落的高材生，开始逃避，开始偷懒。一些不良的嗜好也让我的人格不再高尚，比如毫无意义重复的游戏世界,比如深陷情绪的孤独，<a href="%EF%BC%8C%E6%AF%94%E5%A6%82%E5%94%BE%E6%89%8B%E5%8F%AF%E5%BE%97%E7%9A%84%E9%BB%84%E8%89%B2%E5%BF%AB%E4%B9%90%EF%BC%8C"></a>还好从没接触直达灵魂的药品了。值得庆幸的是，我自小深深的记住了外婆反复强调的千万不能碰毒品。这句话是外婆对孙辈们的苦口婆心，也是最低最低的要求了。经历的这一切，我深知自己自制力的脆弱，应减少对不良事物的好奇与冒险，希望我这一辈子都能与成瘾性隔绝，否则我很容易预见到自己再一次的堕落。</p><p>这一切就发生在今年上，直到年中我也发现自己不能再给自己找借口了，在香港的时候无人约束，我可以随意的挥霍光阴。在家里宅的话，亲戚朋友尤其家里人很是担心，特别是我生命中最重要的两个女人：母亲和媳妇。于是到了年中，虽然皮肤病依然没有康复，但我已经厌倦了作为一个毫无价值的人存在于世。心底里，我渴望世界听到我的声音，因我存在而改变，而不是一直作为一个边缘人物存在着。但很多时候我还是会给自我设限，会介怀于我虚度的光阴，介怀于我曾经的失败，介怀于我那并不闪闪发光的履历。但无论如何，我收拾行囊，重新出发了，以一个更谦卑的姿态。</p><p>在boss上，我海投以及面笔了好些公司，最终我依然没有自信的奔赴大公司，我选择了一家智能硬件作为自我调整的起点。6月15日我再次翻开人生的新篇章，来到了深圳塘朗，追逐体面的生活，希望用自己的文字，代码以及思想发光发亮。至此，在HOLA已然半年，早期为算法组开展论文研讨学习，后续是全程跟进云台项目的算法实现：包括SLAM，三维重建以及点云墙面分割的核心模块。目前为止虽然基本的核心功能已然完成，但仍然有很多内容需要补齐学习，为后续真正的工程化作知识储备。另外如CTO所说，HOLA这个平台是否适合我继续发展个人的职业规划以及技术路径。工作这半年，大部分时间是孤身负重前行的，业务最相似的还是算法组的兄弟朋友们：研发一哥，世攀；玩乐达人，炯彬；斯文大汉，啸天；苦比打工人，东勇；除此还有系统大佬jazzy以及CTO聪哥。基本上，公司内部对三维这块是一片空白的，所以产生了硬币的两端：无人监管我的工作，无人能准确评价我的工作；无人关注我的工作，无人协同我的工作。未来的一年希望能加快项目的落地应用，产生实际的价值。</p><h4 id="2022上半年的工作指标"><a href="#2022上半年的工作指标" class="headerlink" title="2022上半年的工作指标"></a>2022上半年的工作指标</h4><ul><li>薪资至少上调20%</li><li>SLAM 14讲的book &amp; homework</li><li>PCL的系统学习</li></ul><h3 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h3><p>关于今年的学习，从上文就可知确实进步较慢，但要相信人生是个不断经历的过程，如同重看五年前的自己一样，当时虽然稚嫩但充满阳光和希望；如今的自己，虽有初老心态，但尚未暮年，重新出发，为时未晚。</p><p>已读书单：《浪潮之巅》，《为我的身体养阳气》，《C++ Primer》</p><p>在读书单：《SLAM 14讲》，《三十岁，一切刚刚开始》</p><p>学习方向&amp;主题： C++， SLAM， 三维重建， std标准库， STL模板， 算法导论， LEETCODE</p><p>重新开始经营我的github,以及我的个人博客，记录生活的点点滴滴，一部一脚印。三十年以来的输入足够我输出一些东西了，积极认真地输出自己的观点，去和这个可爱的世界碰撞摩擦吧！马上要三十岁了，走在这个重要的节点上，希望自己成为有担当，值得信任，靠谱的人。更希望自己打破自我设限的枷锁，去勇敢探索生活，探索生命，去冒险，去舞蹈，去歌唱，这是每个人唯一一次的人生阿，已然安然度过了30年了，没有什么再让你值得畏惧了，那就放手去做吧。</p><h3 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h3><p>首先是运动和减肥！！！</p><p>关于生活，最大的关键字可能是安逸，但影响最大的词应该是疾病。无论精神上还是身体上，长时间缺乏对生活的激情与热情容易致抑。更进一步引起睡眠紊乱，身体亚健康的各种慢性病也冒出来，比如湿疹，这两年简直痛苦不堪，夜不能寐。战胜严重的皮肤慢性病，需要持之以恒的耐心，需要强颜欢笑的乐观，需要时刻注意控制行为。多少次深夜里，我甚至愿意用各种誓言，只为换来自己的身体健康。年轻时拥有的一切是如此轻而易举而又在后来失去时觉得弥足珍贵。</p><p>困扰我工作生活生命已经两年的湿疹，在近期终于在积极阳光的生活中得到一丝丝的控制，明年我并不奢望和贪心康复，只希望面积能缩小至不影响作息，毕竟良好的作息和生活习惯是每一天元气能量的源泉。</p><p>另一方面，说到生活，最应该被提起的就是家人与朋友。关于朋友，虽然有丝许的进步，得到现在算法组同事的互动来往，但可能是自身技术不够牛逼或者是不苟言笑，或者是不够真挚待人。虽然入职半年，但真正有互动能见面言笑的人可能两个手也数得完，希望新的一年也继续勇敢表达自我，真挚对待别人。然后就是最重要的家人，来到深圳后，在顺德待的时间大幅减少，一个月能有两次回家看看就不错了。另外和珊珊结婚后尚未育儿，随着年岁渐长，年近30的我们迫切需要生儿育女了，而这一点更是双方家长最迫切的事情了，希望明年能有新的突破。说实话，没有完美的工作，只有称心如意的工作，在HOLA的工作让我慢慢走出自己人生的低谷，work-life balance的双休与无加班节奏也很好的平衡我身体上遇到的种种问题。虽然作为程序员毫无忠诚度可言，但我从心底感激和感恩HOLA，让我重新支棱起了自己，不再是瘫倒地上的烂泥，明年愿自己慢慢成为高飞天际的雄鹰。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;回顾今年的自己，提出个人思见和应该执行改进的点。&lt;/p&gt;
&lt;h3 id=&quot;工作上&quot;&gt;&lt;a href=&quot;#工作上&quot; class=&quot;headerlink&quot; title=&quot;工作上&quot;&gt;&lt;/a&gt;工作上&lt;/h3&gt;&lt;p&gt;年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于openc</summary>
      
    
    
    
    <category term="年终总结" scheme="http://tanrunjie.github.io/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>chrono库</title>
    <link href="http://tanrunjie.github.io/2021/12/29/cpp/chrono%E5%BA%93/"/>
    <id>http://tanrunjie.github.io/2021/12/29/cpp/chrono%E5%BA%93/</id>
    <published>2021-12-29T08:09:34.000Z</published>
    <updated>2022-01-05T06:25:34.925Z</updated>
    
    <content type="html"><![CDATA[<p>计时，常用于测试代码的运行时间和效率。</p><h3 id="以往用法ctime"><a href="#以往用法ctime" class="headerlink" title="以往用法ctime"></a>以往用法ctime</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;spend &quot;</span> &lt;&lt; (<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC &lt;&lt;<span class="string">&quot; second&quot;</span> &lt;&lt; endl;  <span class="comment">// 精确到毫秒</span></span><br></pre></td></tr></table></figure><h3 id="chrono用法"><a href="#chrono用法" class="headerlink" title="chrono用法"></a>chrono用法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> chrono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> start = system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">auto</span> end = system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end-start);</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;spend &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(duration.<span class="built_in">count</span>()) * microseconds::period::num / microseconds::period::den &lt;&lt; <span class="string">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，auto为自动类型；除了system_clock,还可用steady_clock和high_resolution_clock; microseconds表示微妙，甚至还有nanoseconds纳秒；num和den表示计时单位的分子和分母。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计时，常用于测试代码的运行时间和效率。&lt;/p&gt;
&lt;h3 id=&quot;以往用法ctime&quot;&gt;&lt;a href=&quot;#以往用法ctime&quot; class=&quot;headerlink&quot; title=&quot;以往用法ctime&quot;&gt;&lt;/a&gt;以往用法ctime&lt;/h3&gt;&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>洞见睡眠</title>
    <link href="http://tanrunjie.github.io/2021/12/28/shisan/%E6%B4%9E%E8%A7%81%E7%9D%A1%E7%9C%A0/"/>
    <id>http://tanrunjie.github.io/2021/12/28/shisan/%E6%B4%9E%E8%A7%81%E7%9D%A1%E7%9C%A0/</id>
    <published>2021-12-28T12:24:03.000Z</published>
    <updated>2022-01-05T06:24:21.669Z</updated>
    
    <content type="html"><![CDATA[<p><code>摘自微信号十三手记</code></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>定时睡眠和睡眠时长时一个人精神饱满的关键吗？<br>你以为是，其实不是。<br>为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  </p><ul><li><p>人的系统能量是怎么消耗的？<br>眼耳鼻舌身的功能运行和头脑里的各种念想。 </p></li><li><p>系统能量是怎么补充的？<br>适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。</p></li></ul><h3 id="要你深深明白"><a href="#要你深深明白" class="headerlink" title="要你深深明白"></a>要你深深明白</h3><p>二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  </p><p>如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。</p><h3 id="附赠"><a href="#附赠" class="headerlink" title="附赠"></a>附赠</h3><p>失眠是什么？<br>是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？</p><h3 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h3><p>人类对自己的认知是那么的不足，对睡眠也几乎是一无所知。十三手记表达了令人惊奇的观点，人恢复能量和元气并不完完全全依赖于睡眠。虽然大部分时候睡眠质量很重要，但同时也没有必要一直纠结于自身的睡眠质量。能量的恢复是自然而然的，而人的感官意识都是无时无刻在耗费精力的，但当你关闭了这些感官和意识时，其实你就已经在休整，你的能量就已经是呈现上升的态势。所以，关于休息，我们应该更少焦虑的纠结于睡眠，更多关注我们感官意识的状态。这就是所谓的闭目养神，同时冥想可能可带来注意力的自主调整和加快能量恢复，以致于很多人推荐。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;摘自微信号十三手记&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;定时睡眠和睡眠时长时一个人精神饱满的关键吗？&lt;br&gt;你以为是，其实不是。&lt;br&gt;</summary>
      
    
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/categories/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
    
    <category term="十三手记" scheme="http://tanrunjie.github.io/tags/%E5%8D%81%E4%B8%89%E6%89%8B%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>腾讯课堂-C++11多线程</title>
    <link href="http://tanrunjie.github.io/2021/12/28/cpp/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82-C-11%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://tanrunjie.github.io/2021/12/28/cpp/%E8%85%BE%E8%AE%AF%E8%AF%BE%E5%A0%82-C-11%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-12-28T07:58:29.000Z</published>
    <updated>2022-01-05T06:25:34.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h3><p>多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入操作类，重载运算符()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fctor</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:    <span class="comment">// 参数使用引用减少多线程资源拷贝</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string&amp; msg)</span>     <span class="comment">// opt: string msg</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      cout &lt;&lt;<span class="string">&quot;from f1:&quot;</span> &lt;&lt; msg&lt;&lt;endl;</span><br><span class="line">      msg = <span class="string">&quot;changed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string s = <span class="string">&quot;not changed&quot;</span>;</span><br><span class="line">  cout &lt;&lt; this_thread::<span class="built_in">get_id</span>()&lt;&lt;endl;</span><br><span class="line">  <span class="function">thread <span class="title">t1</span><span class="params">((Fctor()), ref(s))</span></span>;    <span class="comment">// move(s),此时最后输出的s为空。</span></span><br><span class="line">  t1.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; thread::<span class="built_in">hardware_concurrency</span>() &lt;&lt; endl; <span class="comment">//当前设备核心数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// thread_id</span></span><br><span class="line"><span class="comment">// from f1:not changed</span></span><br><span class="line"><span class="comment">// not changed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据竞争及互斥对象"><a href="#数据竞争及互斥对象" class="headerlink" title="数据竞争及互斥对象"></a>数据竞争及互斥对象</h3><p>避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lock_guard构建f单例，保证独占fout资源，从而保证线程安全</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>()&#123;</span><br><span class="line">        f.<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">        f&lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt;<span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex m_mutex;</span><br><span class="line">        ofstream f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护</span></span><br><span class="line"><span class="comment">mutex mu;</span></span><br><span class="line"><span class="comment">void shared_print(string msg, int id)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    lock_guard&lt;mutex&gt; guard(mu);</span></span><br><span class="line"><span class="comment">    // mu.lock();</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; msg &lt;&lt; id &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    // mu.unlock();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile&amp; log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&gt;<span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;from main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>避免死锁：</p><ul><li>评估线程是否需要两个或以上的互斥对象</li><li>避免在锁住资源的同时去调用一些不熟悉的函数</li><li>使用lock函数帮助mutex顺序一致</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环依赖产生的死锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lock</span>(m_mutex, m_mutex2);  </span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, adopt_lock)</span></span>;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker2</span><span class="params">(m_mutex2, adopt_lock)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print2</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">lock</span>(m_mutex, m_mutex2); <span class="comment">// 用lock确保互斥顺序一致</span></span><br><span class="line"></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker2</span><span class="params">(m_mutex2, adopt_lock)</span></span>; <span class="comment">// 若调换，则可避免</span></span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, adopt_lock)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mutex m_mutex;</span><br><span class="line">    mutex m_mutex2;</span><br><span class="line">    ofstream f; <span class="comment">// 被m_mutex保护的对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile &amp;log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &gt; <span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print2</span>(<span class="string">&quot;from main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Unique-Lock和lazy-Initialization"><a href="#Unique-Lock和lazy-Initialization" class="headerlink" title="Unique Lock和lazy Initialization"></a>Unique Lock和lazy Initialization</h3><p>加锁的方式：</p><ol><li>lock_guard<mutex></li><li>mutex.lock</li><li>unique_lock(推荐，但占用更多系统资源)</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所占用的资源</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LofFile</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LofFile</span>()&#123;</span><br><span class="line">        f.<span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shared_print</span><span class="params">(string id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// lock_guard&lt;mutex&gt; locker(m_mutex);  </span></span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(m_mutex, defer_lock)</span></span>; <span class="comment">// unique_lock占用更多系统资源</span></span><br><span class="line">        <span class="comment">// do_sth()  unlock</span></span><br><span class="line">        <span class="comment">// ...        </span></span><br><span class="line"></span><br><span class="line">        locker.<span class="built_in">lock</span>();</span><br><span class="line">        f &lt;&lt; id &lt;&lt;<span class="string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        locker.<span class="built_in">lock</span>(); <span class="comment">// another unique_lock</span></span><br><span class="line"></span><br><span class="line">        unique_lock&lt;mutex&gt; locker2 = <span class="built_in">move</span>(locker);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        mutex m_mutex;</span><br><span class="line">        ofstream f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">(LofFile&amp; log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&gt;<span class="number">-100</span>; i--)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From t1:&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LofFile log;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1, ref(log))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; i++)</span><br><span class="line">        log.<span class="built_in">shared_print</span>(<span class="string">&quot;From main: &quot;</span>, i);</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h3><p>结合unique_lock和lambda，让线程之间高效相互响应执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">mutex mu;</span><br><span class="line">condition_variable cond;  <span class="comment">// 条件变量</span></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">        q.<span class="built_in">push_front</span>(count);</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cond.<span class="built_in">notify_one</span>();</span><br><span class="line">        this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者：条件变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(data!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">locker</span><span class="params">(mu)</span></span>;</span><br><span class="line">        cond.<span class="built_in">wait</span>(locker, []()&#123; <span class="keyword">return</span> !q.<span class="built_in">empty</span>(); &#125;); <span class="comment">// 只能搭配unique_lock使用，用Lambda函数避免自解锁</span></span><br><span class="line">        data = q.<span class="built_in">back</span>();</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">        locker.<span class="built_in">unlock</span>();</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;t2 got a value from t1: &quot;</span> &lt;&lt; data&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不优雅</span></span><br><span class="line"><span class="comment">void function_2()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int data = 0;</span></span><br><span class="line"><span class="comment">    while(data!=1)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        unique_lock&lt;mutex&gt; locker(mu);</span></span><br><span class="line"><span class="comment">        if(!q.empty())</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            data = q.back();</span></span><br><span class="line"><span class="comment">            q.pop_back();</span></span><br><span class="line"><span class="comment">            locker.unlock();</span></span><br><span class="line"><span class="comment">            cout &lt;&lt;&quot;t2 got a value from t1: &quot; &lt;&lt; data&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        else &#123;</span></span><br><span class="line"><span class="comment">            locker.unlock();</span></span><br><span class="line"><span class="comment">            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(function_1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(function_2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;线程管理&quot;&gt;&lt;a href=&quot;#线程管理&quot; class=&quot;headerlink&quot; title=&quot;线程管理&quot;&gt;&lt;/a&gt;线程管理&lt;/h3&gt;&lt;p&gt;多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数</summary>
      
    
    
    
    <category term="c++" scheme="http://tanrunjie.github.io/categories/c/"/>
    
    
    <category term="C++ 多线程 并发" scheme="http://tanrunjie.github.io/tags/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
