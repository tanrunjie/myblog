{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/01_19_1.png","path":"images/01_19_1.png","modified":0,"renderable":0},{"_id":"source/images/01_20_1.png","path":"images/01_20_1.png","modified":0,"renderable":0},{"_id":"source/images/12_14_1.png","path":"images/12_14_1.png","modified":0,"renderable":0},{"_id":"source/images/12_14_2.png","path":"images/12_14_2.png","modified":0,"renderable":0},{"_id":"source/images/12_14_3.png","path":"images/12_14_3.png","modified":0,"renderable":0},{"_id":"source/images/12_17_1.png","path":"images/12_17_1.png","modified":0,"renderable":0},{"_id":"source/images/12_23_1.png","path":"images/12_23_1.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/02_25_01.png","path":"images/02_25_01.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/TSDF算法.md","hash":"3098ae07bae0146fb55623e02a174ff6b88bcfdb","modified":1640695087872},{"_id":"source/_posts/UNIX-Tutorial.md","hash":"6e28b2eddec514ea6e96a06eeaf7e16656689119","modified":1640695118432},{"_id":"source/_posts/盐选健康.md","hash":"2eeee4891528f6e90fb445df01923f739a1ac817","modified":1643014142700},{"_id":"source/categories/index.md","hash":"48c5550488a71ca7c826da4ba8b3704e5b8834fc","modified":1637918575139},{"_id":"source/images/12_14_2.png","hash":"2666e70d32fb3f2f81c6886e57da6b9a82791162","modified":1639450959219},{"_id":"source/tags/index.md","hash":"48b31aae4ba4cb4a51b150a85ae368b4cd85b088","modified":1637918586778},{"_id":"source/about/index.md","hash":"93359539f609619a0687044d34c6f0f438ae59f4","modified":1645429870566},{"_id":"source/_posts/SLAMBOOK2/SLAMBOOK-1.md","hash":"e4722fec1d2773aeae965475ad928090ffdcc19d","modified":1645771137558},{"_id":"source/_posts/cpp/c-并发实战.md","hash":"34dd8a1bedaa85d95ff7168eb21848c2a4cf692e","modified":1641363934849},{"_id":"source/_posts/cpp/chrono库.md","hash":"3b65414298af246e691234624f5fff3cb0384a6f","modified":1641363934925},{"_id":"source/_posts/cpp/cpp数据类型.md","hash":"75639b6feb93dceef0a9de2460b646d5c8e83db7","modified":1641363934978},{"_id":"source/_posts/cpp/代码重用.md","hash":"31bc2b0356a6f320ceadce761cd2937425466971","modified":1643422228851},{"_id":"source/_posts/cpp/内存模型.md","hash":"c28bae841aee285c0ed7078f513c26eb92c2a8e0","modified":1641363934660},{"_id":"source/_posts/cpp/字符串.md","hash":"caf9b4f910ec3499827dc46fd297b1f73be4e9d3","modified":1641363934794},{"_id":"source/_posts/cpp/对象和类.md","hash":"02e79bc064ad6698aab891a29109589e7c789462","modified":1643163540698},{"_id":"source/_posts/cpp/异常处理.md","hash":"1b6c250dc2d4cf46235238965dd87eaa9281b340","modified":1644807040565},{"_id":"source/_posts/cpp/腾讯课堂-C-11多线程.md","hash":"0757d782db24fe22157ee6809ac1165b6853f076","modified":1641363934702},{"_id":"source/_posts/cpp/逻辑控制.md","hash":"5eb8f308c7530f5c8dc0e0fcb81a8d8168ca006c","modified":1641363934609},{"_id":"source/_posts/eigen/eigen-1.md","hash":"bf6886dc805b2207ff6c424230f6fe14f9f26e06","modified":1643018672676},{"_id":"source/_posts/opencv/特征匹配.md","hash":"dc6901106356b539eaae69a47160cff9306b5dd8","modified":1642067385025},{"_id":"source/_posts/pcl/墙面分割.md","hash":"6fe0bd2ac55610543ced344cfdc1d15f0b75bb4f","modified":1642411311368},{"_id":"source/_posts/reading/浪潮之巅.md","hash":"d676028bcb92136aeead884f6f8dc603ba0944fd","modified":1645757615806},{"_id":"source/_posts/reading/皮肤的秘密.md","hash":"f87ea71f4027bdc634d9fc2e2719ccf324ddb5c0","modified":1642574418090},{"_id":"source/_posts/reading/软技能.md","hash":"287d891df1fabf226e1d68533ae7602c64b34127","modified":1645770710426},{"_id":"source/_posts/rizhi/六年前的自己.md","hash":"592891039426e713e7f17e9d1f7d48b0757129b2","modified":1641363914600},{"_id":"source/_posts/rizhi/2021-年终总结.md","hash":"503d66ceee9a39bfc761d9e36ed27f42260e2e2c","modified":1641363914784},{"_id":"source/_posts/rizhi/经典话术.md","hash":"e81ccf76672c332f7359d4689d034376154feece","modified":1641363914683},{"_id":"source/_posts/shisan/努力方向之正解.md","hash":"fcccf2bad33c2da8c614f1a9a57e46a13b3b8cd2","modified":1641363894525},{"_id":"source/_posts/shisan/奖惩精要.md","hash":"8473170c3f663bbba38b18610a94f7f8ad3885b2","modified":1641363861722},{"_id":"source/_posts/shisan/恐惧之破.md","hash":"a9c930ba45135f5ac58136204bb46e5ecae3dd6d","modified":1641364625425},{"_id":"source/_posts/shisan/接纳麻烦.md","hash":"c2d552c0e3fcf996cd6567905601902c965d326f","modified":1642479991950},{"_id":"source/_posts/shisan/洞见睡眠.md","hash":"26115df179fcb836bfc92843dcc8370311cadb7d","modified":1641363861669},{"_id":"source/_posts/shisan/能量朗读.md","hash":"20a02c4231c2957fbae999f25dc927dc5e8fcc65","modified":1641363894475},{"_id":"source/_posts/shisan/金钱之二元整体观.md","hash":"3ba87bc3890840aa4ef769f66f984b2e5071ffcd","modified":1641363894378},{"_id":"source/_posts/shisan/金钱的实际价值.md","hash":"fde105b3c72a0c45a9d7cd6b1b4ca167303ece66","modified":1641363894332},{"_id":"source/_posts/shisan/需求正解.md","hash":"e1ec649d917d377f9ab429e97fc2a9c5a425e7d8","modified":1641804544601},{"_id":"source/_posts/shisan/高效行动.md","hash":"6bd5f5f56254dbeee2487ee80319ad65848189f9","modified":1642479550060},{"_id":"source/_posts/xinli/心态练习.md","hash":"986f63b272d47afa63e22debe45d040ec0760a7f","modified":1643364420175},{"_id":"source/images/01_20_1.png","hash":"b6ce4226970525e27593ad94859a45fc4496af92","modified":1642663598396},{"_id":"source/images/12_14_3.png","hash":"6148e56bbca1f0542cc1d42cb1be88ff2ff43173","modified":1639451046563},{"_id":"source/images/01_19_1.png","hash":"e1190a6f2246ff33f2eb051d0664f21cb3250906","modified":1642562107722},{"_id":"source/images/12_14_1.png","hash":"50ac9e297f6ce0ae8f964dc89b99ace06bdeec4a","modified":1638852494297},{"_id":"source/images/12_17_1.png","hash":"5f3d74324a67192a9560a2cef57f1fb54d37b6e0","modified":1639730653607},{"_id":"source/images/12_23_1.png","hash":"5498e97f0b8c2f99139cce3dd1aca3ae7ed6f31c","modified":1640228631655},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1638173761028},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1638173761028},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1638173761028},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1638173761028},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1638173761028},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1638173761028},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1638173761028},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1638173761028},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1638173761032},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1638173761032},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1638173761028},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1638173761028},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1638173761028},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1638173761028},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1638173761028},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1638173761028},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1638173761028},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1638173761028},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1638173761028},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1638173761028},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1638173761028},{"_id":"themes/next/_config.yml","hash":"09e576a8271e3476eb5ae345a5e14c8caacf8d27","modified":1640578605465},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1638173761028},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1638173761032},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1638173761028},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1638173761032},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1638173761032},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1638173761032},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1638173761032},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1638173761032},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1638173761028},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1638173761032},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1638173761032},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1638173761032},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1638173761032},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1638173761032},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1638173761032},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1638173761032},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1638173761032},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1638173761032},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1638173761032},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1638173761032},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1638173761032},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1638173761032},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1638173761032},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1638173761032},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1638173761032},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1638173761032},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1638173761032},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1638173761032},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1638173761032},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1638173761032},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1638173761032},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1638173761032},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1638173761032},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1638173761032},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1638173761032},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1638173761032},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1638173761032},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1638173761032},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1638173761032},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1638173761032},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1638173761028},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1638173761028},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1638173761028},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1638173761028},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1638173761032},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1638173761032},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1638173761032},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1638173761032},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1638173761032},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1638173761032},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1638173761032},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1638173761032},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1638173761032},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1638173761032},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1638173761032},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1638173761032},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1638173761032},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1638173761032},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1638173761032},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1638173761032},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1638173761032},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1638173761032},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1638173761032},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1638173761032},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1638173761032},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1638173761032},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1638173761032},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1638173761032},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1638173761032},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1638173761032},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1638173761032},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1638173761032},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1638173761032},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1638173761032},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1638173761032},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1638173761032},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1638173761032},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1638173761032},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1638173761032},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1638173761032},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1638173761032},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1638173761032},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1638173761032},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1638173761032},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1638173761032},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1638173761032},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1638173761036},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1638173761032},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1638173761036},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1638173761036},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1638173761036},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1638173761036},{"_id":"themes/next/source/images/avatar.jpeg","hash":"d31f8bf9192f7e5d72ae446a1055bfac2517d8bd","modified":1638153361328},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1638173761036},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1638173761036},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1638173761036},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1638173761036},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1638173761036},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1638173761036},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1638173761036},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1638173761036},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1638173761036},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1638173761036},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1638173761036},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1638173761036},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1638173761036},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1638173761036},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1638173761036},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1638173761032},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1638173761032},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1638173761032},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1638173761032},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1638173761036},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1638173761032},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1638173761032},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1638173761032},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1638173761032},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1638173761036},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1638173761032},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1638173761032},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1638173761032},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1638173761032},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1638173761032},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1638173761032},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1638173761032},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1638173761032},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1638173761032},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1638173761032},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1638173761032},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1638173761032},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1638173761032},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1638173761032},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1638173761032},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1638173761032},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1638173761032},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1638173761032},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1638173761032},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1638173761032},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1638173761032},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1638173761032},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1638173761032},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1638173761032},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1638173761032},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1638173761032},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1638173761032},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1638173761032},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1638173761032},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1638173761032},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1638173761032},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1638173761032},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1638173761032},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1638173761032},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1638173761032},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1638173761032},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1638173761032},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1638173761032},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1638173761032},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1638173761032},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1638173761032},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1638173761032},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1638173761032},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1638173761036},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1638173761036},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1638173761036},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1638173761036},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1638173761036},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1638173761036},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1638173761032},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1638173761036},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1638173761036},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1638173761036},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1638173761032},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1638173761036},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1638173761036},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1638173761036},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1638173761036},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1638173761032},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1638173761032},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1638173761036},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1638173761036},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1638173761036},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1638173761036},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1638173761036},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1638173761036},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1638173761036},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1638173761036},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1638173761036},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1638173761036},{"_id":"public/atom.xml","hash":"bb41339d1a62e6fa407d5c9f1301cff124a57c42","modified":1645696915064},{"_id":"public/./public/search.xml","hash":"6081b8223ce422d1f6059b228170d1e8cc54e72d","modified":1645696915064},{"_id":"public/sitemap.xml","hash":"901f14c2986f0103572d765f5351584fea946ec3","modified":1645696915064},{"_id":"public/categories/index.html","hash":"296ef1b45d6bd74d40a4fe541d85f58a11c827ba","modified":1645696915064},{"_id":"public/tags/index.html","hash":"e93e212b49e389acbb49c2b666180826886241d1","modified":1645696915064},{"_id":"public/archives/page/4/index.html","hash":"2016ff84e05908d67762c86c1183fe4fea13ab52","modified":1645696915064},{"_id":"public/archives/2021/page/3/index.html","hash":"bd36d14004bb77a0699ddd0db3272b9efe4f92eb","modified":1645696915064},{"_id":"public/archives/2021/11/index.html","hash":"bb819cab9a56e9e52dd426a67ca51dfc8fbef5d2","modified":1645696915064},{"_id":"public/archives/2022/page/2/index.html","hash":"153b965a34031a10a354c72a328c6b8b710bb3eb","modified":1645696915064},{"_id":"public/archives/2022/01/page/2/index.html","hash":"dc9b20e44666a129d4ec4ac7ec955456b561197c","modified":1645696915064},{"_id":"public/archives/2022/02/index.html","hash":"1ec005b5d8e3754eafd41d1b43f6b5a397333884","modified":1645696915064},{"_id":"public/categories/SLAM/index.html","hash":"8850b59faaf46f74ced330f42e481358784cd52c","modified":1645696915064},{"_id":"public/categories/常用指令/index.html","hash":"0bb1b23e99c3f14e97e051e46e93a15c76401795","modified":1645696915064},{"_id":"public/categories/身体健康/index.html","hash":"a2d02ab471f3bc61bbbaee2d12a168a1acf3a6dc","modified":1645696915064},{"_id":"public/categories/SLAM十四讲/index.html","hash":"ad211ef3ebe17db68695695a5837b9692827e612","modified":1645696915064},{"_id":"public/categories/EIGEN/index.html","hash":"6d4ee908bea8f465fad8adb804e67861c5cba854","modified":1645696915064},{"_id":"public/categories/pcl/index.html","hash":"07cccb69eb8d11219d42d80c3182b8b3cc0d1641","modified":1645696915064},{"_id":"public/categories/opencv/index.html","hash":"e2aa94e89a7ec503e47c3e682fb9c10006fd7737","modified":1645696915064},{"_id":"public/categories/读书笔记/index.html","hash":"fb6b99c3019413deb427b24e7ce49012395c9b36","modified":1645696915064},{"_id":"public/categories/读书/index.html","hash":"d087ef1cdda22f14b3cb49b9c94e9da2eb66f257","modified":1645696915064},{"_id":"public/categories/日常/index.html","hash":"3ca0a94426f1efac3c106852b0b3fd11a01752a8","modified":1645696915064},{"_id":"public/categories/年终总结/index.html","hash":"575ce639d05e611bbff3c04a5fb1de2eb9ccff4e","modified":1645696915064},{"_id":"public/categories/心理/index.html","hash":"dcdf716e3cbed4a9de2d952a9c6d3e875fe3de51","modified":1645696915064},{"_id":"public/tags/SLAM/index.html","hash":"0744bcaeddba8a1c791fe8f0c598c5140cef2f21","modified":1645696915064},{"_id":"public/tags/bash/index.html","hash":"b088df45c5642ae5661a6bb035d980eb198cd963","modified":1645696915064},{"_id":"public/tags/身体健康/index.html","hash":"52c7fba76d514fb5d12e2abc895f4259721d757a","modified":1645696915064},{"_id":"public/tags/SLAMBOOK/index.html","hash":"1fdaba53f1b156285839aa063ca4d34867acce62","modified":1645696915064},{"_id":"public/tags/c-多线程-并发/index.html","hash":"ff18c25735df87bb42a6c770d6e6e49b903f4e1f","modified":1645696915064},{"_id":"public/tags/c/index.html","hash":"aad935bc7dc8f9bb5234f9d806b1135c7c7bf451","modified":1645696915064},{"_id":"public/tags/c-primer/index.html","hash":"314d48396bdd9400d8c01027afaf98662251e411","modified":1645696915064},{"_id":"public/tags/EIGEN/index.html","hash":"a37a3c6f9b8d8e306f0c4e9f96ba4ae1d1c5f061","modified":1645696915064},{"_id":"public/tags/C-多线程-并发/index.html","hash":"595a9e110122cf9d1e73e50dd34fffbd31bf3077","modified":1645696915064},{"_id":"public/tags/pcl/index.html","hash":"1664efa6658b41e45de9e7c8fb065d8ac64e5b8b","modified":1645696915064},{"_id":"public/tags/opencv/index.html","hash":"0d42c48f67d5cdb73897835357b438ec9b40303d","modified":1645696915064},{"_id":"public/tags/读书笔记/index.html","hash":"36d9a2ad6d76c2d25530408a9c8a2fa4d5f4a9c3","modified":1645696915064},{"_id":"public/tags/心得/index.html","hash":"d3894b9e2fc1c50de7958d906a1b1079bece780c","modified":1645696915064},{"_id":"public/tags/博客迁移/index.html","hash":"edd6a2a747cf10b847e4635175589e920d956fc8","modified":1645696915064},{"_id":"public/tags/知乎/index.html","hash":"95ca356629f33b767698609b65271be53349ddf2","modified":1645696915064},{"_id":"public/about/index.html","hash":"e79270c391880f8c86675bc7462c3584736297e1","modified":1645696915064},{"_id":"public/2022/02/21/reading/软技能/index.html","hash":"5ed89537cd912816624bdbac5e2a01e4170e9477","modified":1645696915064},{"_id":"public/2022/01/28/xinli/心态练习/index.html","hash":"26ced8fbf857b3c4acff32cae574eaafb59ca7e4","modified":1645696915064},{"_id":"public/2022/01/26/cpp/代码重用/index.html","hash":"44e17c085bfb89fd65b69050ca93a241dee7fe77","modified":1645696915064},{"_id":"public/2022/01/21/盐选健康/index.html","hash":"5e5f50b4d279a7be2f2291a523cde0d8b14bd3dd","modified":1645696915064},{"_id":"public/2022/01/20/eigen/eigen-1/index.html","hash":"3c9d0073b7d9a02f45be2c709e5932ff248b8f52","modified":1645696915064},{"_id":"public/2022/01/19/reading/皮肤的秘密/index.html","hash":"3d457b1b0d3c82bd02c25e0cbf1a9f3a387cc86d","modified":1645696915064},{"_id":"public/2022/01/18/shisan/接纳麻烦/index.html","hash":"47d098031896653c6ee8e69ae8c8cb7e6cfc5639","modified":1645696915064},{"_id":"public/2022/01/18/shisan/高效行动/index.html","hash":"3640e0eda7cc3676b3fc1dc561c4632aae6ec068","modified":1645696915064},{"_id":"public/2022/01/14/pcl/墙面分割/index.html","hash":"1fb80a773ab3e674eb37193f784da91f7adfbb23","modified":1645696915064},{"_id":"public/2022/01/13/opencv/特征匹配/index.html","hash":"290b547516dc027c391c91ed03706217c2e074d1","modified":1645696915064},{"_id":"public/2022/01/10/shisan/需求正解/index.html","hash":"f5bff754bc3f5ba881bec76418a7ed97411cc11e","modified":1645696915064},{"_id":"public/2022/01/07/SLAMBOOK2/SLAMBOOK-1/index.html","hash":"06238d116724824c1ceb75aae1a6361bbd02973b","modified":1645696915064},{"_id":"public/2022/01/05/shisan/恐惧之破/index.html","hash":"397c9280de5dfb9f1f08ab21c206acc97c25c02b","modified":1645696915064},{"_id":"public/2021/12/31/cpp/对象和类/index.html","hash":"38543dfd92dd4bc787c9559d132b66172eb2b15a","modified":1645696915064},{"_id":"public/2021/12/31/rizhi/2021-年终总结/index.html","hash":"882b9a3f02d948fad25798bbf016fb952471e9b3","modified":1645696915064},{"_id":"public/2021/12/29/cpp/chrono库/index.html","hash":"a9178c8ed55c54f09463243d4896bd28b0a127dc","modified":1645696915064},{"_id":"public/2021/12/28/shisan/洞见睡眠/index.html","hash":"501cbb2c771227360139dd489691663aeca9d67c","modified":1645696915064},{"_id":"public/2021/12/28/cpp/腾讯课堂-C-11多线程/index.html","hash":"2bc0e25a3ad3beebaf8108a72c98c9cf9dbf247b","modified":1645696915064},{"_id":"public/2021/12/28/cpp/c-并发实战/index.html","hash":"2d3a4d53a2e6ecd11c04415e0356a21353f9b0cf","modified":1645696915064},{"_id":"public/2021/12/27/shisan/奖惩精要/index.html","hash":"512e7d580aa1b8abd9824e1b594dd52aeee4ff81","modified":1645696915064},{"_id":"public/2021/12/27/UNIX-Tutorial/index.html","hash":"c5e41fd461fff8ba08e0e395e06d5c0b8bae6f7d","modified":1645696915064},{"_id":"public/2021/12/24/shisan/金钱的实际价值/index.html","hash":"2d260e48392427796ddf487c0beb13d610792ab1","modified":1645696915064},{"_id":"public/2021/12/23/TSDF算法/index.html","hash":"9f2d6f6bf29a98779720551644e0626aa47847a9","modified":1645696915064},{"_id":"public/2021/12/23/cpp/异常处理/index.html","hash":"2ed091024a8e68236477ac0052c6dc209c9fa59d","modified":1645696915064},{"_id":"public/2021/12/22/rizhi/六年前的自己/index.html","hash":"e5716304f8d99145da3702b4bde41901286a913a","modified":1645696915064},{"_id":"public/2021/12/22/shisan/金钱之二元整体观/index.html","hash":"f6017dbdaf9f8eea9f07741090f2b7c989bdc22c","modified":1645696915064},{"_id":"public/2021/12/21/rizhi/经典话术/index.html","hash":"7a04cd2fe640dad8efc66e4ba33fd3d5b2e7e456","modified":1645696915064},{"_id":"public/2021/12/21/shisan/努力方向之正解/index.html","hash":"799ac4046a70cb84bbdc7b4af82cde79e9f3494f","modified":1645696915064},{"_id":"public/2021/12/20/cpp/内存模型/index.html","hash":"08c14579811b80de734069d4b87068be4780d151","modified":1645696915064},{"_id":"public/2021/12/20/shisan/能量朗读/index.html","hash":"ea4133b573bfffe612eecaee8c4c67b8166ec2b4","modified":1645696915064},{"_id":"public/2021/12/16/cpp/逻辑控制/index.html","hash":"96ed362e6245f97a55396db59a251827a19fbcef","modified":1645696915064},{"_id":"public/2021/12/15/cpp/字符串/index.html","hash":"841847a241cd29667c86475f2ee3901687d47cfb","modified":1645696915064},{"_id":"public/2021/12/14/cpp/cpp数据类型/index.html","hash":"cd038772f7f16874731eb156b4fb8c506f51afb3","modified":1645696915064},{"_id":"public/2021/11/26/reading/浪潮之巅/index.html","hash":"c5383c2c6910dbdcdaf2f3c84634b9cc98acdd11","modified":1645696915064},{"_id":"public/archives/index.html","hash":"ed5a02dd5812004d8b514d848b7ab50cb08c7527","modified":1645696915064},{"_id":"public/archives/page/2/index.html","hash":"74fc5fbfa2f0133cb4827bb6a7812a86d4b2e266","modified":1645696915064},{"_id":"public/archives/page/3/index.html","hash":"e7ed5cd9071f5419a04710752129df42baeaa1db","modified":1645696915064},{"_id":"public/archives/2021/index.html","hash":"80db2770c5dd5bf4c16a010ecced77f7c1d9b2cc","modified":1645696915064},{"_id":"public/archives/2021/page/2/index.html","hash":"25aa7e1874bdaf49a5c7df50b347e423390ac72b","modified":1645696915064},{"_id":"public/archives/2021/12/index.html","hash":"21d9084002234785361471bd9d3d4d0c9a754e87","modified":1645696915064},{"_id":"public/archives/2021/12/page/2/index.html","hash":"484f10d2f29b5fb4ecb5e5acd398d8defce9fef6","modified":1645696915064},{"_id":"public/archives/2022/index.html","hash":"b6e538a811226df0e39ec4718c51913f2e22b24e","modified":1645696915064},{"_id":"public/archives/2022/01/index.html","hash":"6163ee229c8c7e251052620ff995ab7ea377a111","modified":1645696915064},{"_id":"public/categories/c/index.html","hash":"38e180e5019d15a16fe90c2e6477fe7e04193202","modified":1645696915064},{"_id":"public/categories/十三手记/index.html","hash":"ccd91f172a6b089cb269ee3945d9bbc665ba1891","modified":1645696915064},{"_id":"public/index.html","hash":"c6d5bd0f13890be55b851ddb905cb06d1a1b4bab","modified":1645696915064},{"_id":"public/page/2/index.html","hash":"cf75959ac44b1c7672b0eb6a7092aab8ef872048","modified":1645696915064},{"_id":"public/page/3/index.html","hash":"9bea5e3daceb3e77c6a8bbdc657177eafa1e2b5d","modified":1645696915064},{"_id":"public/page/4/index.html","hash":"292451bcc2a7c727f857180f6fa01e9dbe0a0a27","modified":1645696915064},{"_id":"public/tags/十三手记/index.html","hash":"ecfa19919bd953172509dd3fa6f7328c696258aa","modified":1645696915064},{"_id":"public/tags/心理/index.html","hash":"76cfdf89eb16884674814ace6ece87bb1a78a62f","modified":1645696915064},{"_id":"public/images/12_14_2.png","hash":"2666e70d32fb3f2f81c6886e57da6b9a82791162","modified":1645696915064},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1645696915064},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1645696915064},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1645696915064},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1645696915064},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1645696915064},{"_id":"public/images/avatar.jpeg","hash":"d31f8bf9192f7e5d72ae446a1055bfac2517d8bd","modified":1645696915064},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1645696915064},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1645696915064},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1645696915064},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1645696915064},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1645696915064},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1645696915064},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1645696915064},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1645696915064},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1645696915064},{"_id":"public/images/01_20_1.png","hash":"b6ce4226970525e27593ad94859a45fc4496af92","modified":1645696915064},{"_id":"public/images/12_14_3.png","hash":"6148e56bbca1f0542cc1d42cb1be88ff2ff43173","modified":1645696915064},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1645696915064},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1645696915064},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1645696915064},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1645696915064},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1645696915064},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1645696915064},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1645696915064},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1645696915064},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1645696915064},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1645696915064},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1645696915064},{"_id":"public/css/main.css","hash":"2cc534455dbbba12fd3f2a822cb954ddc84e5cb4","modified":1645696915064},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1645696915064},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1645696915064},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1645696915064},{"_id":"public/images/01_19_1.png","hash":"e1190a6f2246ff33f2eb051d0664f21cb3250906","modified":1645696915064},{"_id":"public/images/12_14_1.png","hash":"50ac9e297f6ce0ae8f964dc89b99ace06bdeec4a","modified":1645696915064},{"_id":"public/images/12_17_1.png","hash":"5f3d74324a67192a9560a2cef57f1fb54d37b6e0","modified":1645696915064},{"_id":"public/images/12_23_1.png","hash":"5498e97f0b8c2f99139cce3dd1aca3ae7ed6f31c","modified":1645696915064}],"Category":[{"name":"SLAM","_id":"cl00tgauu000428zd8da30xiy"},{"name":"常用指令","_id":"cl00tgauy000a28zdbxqc7ffe"},{"name":"身体健康","_id":"cl00tgav0000g28zda3no14bw"},{"name":"SLAM十四讲","_id":"cl00tgav2000m28zdgsc79p2k"},{"name":"c++","_id":"cl00tgav4000s28zd5u1n6ecx"},{"name":"EIGEN","_id":"cl00tgavk002628zd66b8aq1o"},{"name":"pcl","_id":"cl00tgavl002d28zdhfhdhpuu"},{"name":"opencv","_id":"cl00tgavn002j28zd8fbdeoyv"},{"name":"读书笔记","_id":"cl00tgavo002p28zdewxu0pxs"},{"name":"读书","_id":"cl00tgavp002t28zd23bqftxp"},{"name":"日常","_id":"cl00tgavq002x28zd9wkfduu3"},{"name":"年终总结","_id":"cl00tgavq003128zdebnnaywm"},{"name":"十三手记","_id":"cl00tgavs003b28zdas5q7s77"},{"name":"心理","_id":"cl00tgavz004g28zd3c72fdrb"}],"Data":[],"Page":[{"title":"categories","date":"2021-11-26T09:01:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-26 17:01:48\ntype: \"categories\"\n---\n","updated":"2021-11-26T09:22:55.139Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl00tgauo000028zd2i0866g7","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2021-11-26T09:01:43.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-26 17:01:43\ntype: \"tags\"\n---\n","updated":"2021-11-26T09:23:06.778Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl00tgaus000228zdhjqq7ekn","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"about","date":"2021-11-26T09:01:36.000Z","type":"about","_content":"\n## 人生航海图\n\n### 十年期目标(2032)\n处于30岁的节点，认真规划自己的人生，设定40岁的大目标，以便分解小目标并及时跟踪\n#### 生活\n我认为作为中年人最重要还是生活，包括家庭以及健康等等：\n- 身体健康：体重维持60kg，全身检查健康，作息规律\n- 家庭和睦：育有儿女，家庭资产愈千万，与伴侣友好相处\n- 生活舒适：工作生活平衡，为自己工作，周工时40小时左右，已周游全球各地\n\n#### 学习\n学习是终身的事情，主要包括学历、阅读和著述等：\n- 学历：始终不放弃寻找追求名校phD的机会\n- 阅读：广泛涉猎专业相关、社会学、生理学、心理学、历史学乃至国学等著作\n- 著述：能在一定领域有自己专业的见解，并试图著书输出自己的观点\n\n#### 工作\n工作赋予生活以意义，个人的职业生涯更是自己最重要的标签，时刻自我治理以及自我引导自己的职业生涯。\n- 意义：为自己而工作，为自己的产品而奋斗\n- 薪酬：薪资百万，追求财富自由\n- 氛围：能涉及管理，有自己的小伙伴\n\n### 三年期计划(2025)\n日月如梭，时间飞逝，十年期依然是一些模糊的藏宝地。三年期则是分解出来可以量化以及按时跟踪的目标节点，让自己不再虚度光阴，充实自在而富有意义。\n\n#### 生活\n- 身体：皮肤病痊愈，体重维持60kg,无身体疾病\n- 家庭：生儿育女，家庭资产接近400w\n- 生活：旅游欧洲、美国、日韩东南亚，开始为自我的目标而驱动工作\n\n#### 学习\n- 学历：追求一个Master Degree,累积发表双位数专利和论文\n- 阅读：涉猎专业相关的专业巨著，阅读生理学、心理学、社会学、名人传记达100本\n- 著述：积极寻找到1～2个个人专精领域，建立并完成至少3个个人技术专栏\n\n#### 工作\n- 意义：推出个人的产品（虚拟或实体），重心逐渐转向自我色彩强烈的产品上\n- 薪酬：薪资80万，学习相关理财知识\n- 氛围：成为核心工作成员，从胜任者开始迈向领域专家\n\n### 今年计划（2022）\n今年的年度计划姗姗来迟，也是发现自己人生虚度多年，及时止损，希望认真贯彻人生计划的制定执行并跟踪，收获充实有意义的人生。\n\n#### 生活\n- 身体：半年内皮肤病痊愈，体重到65kg，祛湿并形成良好作息，早睡早起不熬夜\n- 家庭：开始孕育自己的孩子，家庭资产接近200w\n- 生活：旅游国内，意识到自我驱动，执行并跟踪\n\n#### 学习\n- 学历：累积发表两位数专利和论文，了解及执行进修\n- 阅读：涉猎专业相关书籍达20本\n- 著述：开展个人技术专栏的记录，个人日志达100篇。\n- 刷题：完成200题leetcode\n#### 工作\n- 意义：规划属于自己人生标签的产品和项目\n- 薪酬：去年薪资40左右，争取今年能达60；争取期权及五险一金等福利进步；\n- 氛围：超额完成基本需求，成为高手新手，向胜任者出发。\n\n\n### 半年计划(上半年)\n#### 生活\n- 身体：体重控制在67kg，坚持中医理疗，皮肤病面积减少一半\n- 家庭：家庭资产接近150w，和伴侣有良好的生活方式\n- 生活：旅游周边地区，拍照并撰写游记，留下美好的生活记忆\n\n#### 学习\n- 学历：发表10篇左右专利\n- 阅读：涉猎专业相关及有趣书籍10本，具体为：SLAM十四讲、剑指offer、软技能：代码之外的生存指南、Effective C++、More Effective C++、CMake实践、程序员的思维修炼：开发认知潜能的九堂课、软技能2：软件开发者职业生涯指南、三十岁，一切刚刚开始、八段锦。\n- 著述：先阅读找寻自己感兴趣的细分领域，以写代练。个人日志累积达50篇\n- 刷题：完成100题leetcode\n#### 工作\n- 意义：寻找有商业价值的项目\n- 目标：成为SLAM高手新手，解读经典项目源码，上相关视频课程\n- 薪酬：争取50%的进步\n- 氛围：融入团队中工作，成为高手新手，完成3个重要需求","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-11-26 17:01:36\ntype: \"about\"\n---\n\n## 人生航海图\n\n### 十年期目标(2032)\n处于30岁的节点，认真规划自己的人生，设定40岁的大目标，以便分解小目标并及时跟踪\n#### 生活\n我认为作为中年人最重要还是生活，包括家庭以及健康等等：\n- 身体健康：体重维持60kg，全身检查健康，作息规律\n- 家庭和睦：育有儿女，家庭资产愈千万，与伴侣友好相处\n- 生活舒适：工作生活平衡，为自己工作，周工时40小时左右，已周游全球各地\n\n#### 学习\n学习是终身的事情，主要包括学历、阅读和著述等：\n- 学历：始终不放弃寻找追求名校phD的机会\n- 阅读：广泛涉猎专业相关、社会学、生理学、心理学、历史学乃至国学等著作\n- 著述：能在一定领域有自己专业的见解，并试图著书输出自己的观点\n\n#### 工作\n工作赋予生活以意义，个人的职业生涯更是自己最重要的标签，时刻自我治理以及自我引导自己的职业生涯。\n- 意义：为自己而工作，为自己的产品而奋斗\n- 薪酬：薪资百万，追求财富自由\n- 氛围：能涉及管理，有自己的小伙伴\n\n### 三年期计划(2025)\n日月如梭，时间飞逝，十年期依然是一些模糊的藏宝地。三年期则是分解出来可以量化以及按时跟踪的目标节点，让自己不再虚度光阴，充实自在而富有意义。\n\n#### 生活\n- 身体：皮肤病痊愈，体重维持60kg,无身体疾病\n- 家庭：生儿育女，家庭资产接近400w\n- 生活：旅游欧洲、美国、日韩东南亚，开始为自我的目标而驱动工作\n\n#### 学习\n- 学历：追求一个Master Degree,累积发表双位数专利和论文\n- 阅读：涉猎专业相关的专业巨著，阅读生理学、心理学、社会学、名人传记达100本\n- 著述：积极寻找到1～2个个人专精领域，建立并完成至少3个个人技术专栏\n\n#### 工作\n- 意义：推出个人的产品（虚拟或实体），重心逐渐转向自我色彩强烈的产品上\n- 薪酬：薪资80万，学习相关理财知识\n- 氛围：成为核心工作成员，从胜任者开始迈向领域专家\n\n### 今年计划（2022）\n今年的年度计划姗姗来迟，也是发现自己人生虚度多年，及时止损，希望认真贯彻人生计划的制定执行并跟踪，收获充实有意义的人生。\n\n#### 生活\n- 身体：半年内皮肤病痊愈，体重到65kg，祛湿并形成良好作息，早睡早起不熬夜\n- 家庭：开始孕育自己的孩子，家庭资产接近200w\n- 生活：旅游国内，意识到自我驱动，执行并跟踪\n\n#### 学习\n- 学历：累积发表两位数专利和论文，了解及执行进修\n- 阅读：涉猎专业相关书籍达20本\n- 著述：开展个人技术专栏的记录，个人日志达100篇。\n- 刷题：完成200题leetcode\n#### 工作\n- 意义：规划属于自己人生标签的产品和项目\n- 薪酬：去年薪资40左右，争取今年能达60；争取期权及五险一金等福利进步；\n- 氛围：超额完成基本需求，成为高手新手，向胜任者出发。\n\n\n### 半年计划(上半年)\n#### 生活\n- 身体：体重控制在67kg，坚持中医理疗，皮肤病面积减少一半\n- 家庭：家庭资产接近150w，和伴侣有良好的生活方式\n- 生活：旅游周边地区，拍照并撰写游记，留下美好的生活记忆\n\n#### 学习\n- 学历：发表10篇左右专利\n- 阅读：涉猎专业相关及有趣书籍10本，具体为：SLAM十四讲、剑指offer、软技能：代码之外的生存指南、Effective C++、More Effective C++、CMake实践、程序员的思维修炼：开发认知潜能的九堂课、软技能2：软件开发者职业生涯指南、三十岁，一切刚刚开始、八段锦。\n- 著述：先阅读找寻自己感兴趣的细分领域，以写代练。个人日志累积达50篇\n- 刷题：完成100题leetcode\n#### 工作\n- 意义：寻找有商业价值的项目\n- 目标：成为SLAM高手新手，解读经典项目源码，上相关视频课程\n- 薪酬：争取50%的进步\n- 氛围：融入团队中工作，成为高手新手，完成3个重要需求","updated":"2022-02-21T07:51:10.566Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl00tgauw000628zd7cbe8bwl","content":"<h2 id=\"人生航海图\"><a href=\"#人生航海图\" class=\"headerlink\" title=\"人生航海图\"></a>人生航海图</h2><h3 id=\"十年期目标-2032\"><a href=\"#十年期目标-2032\" class=\"headerlink\" title=\"十年期目标(2032)\"></a>十年期目标(2032)</h3><p>处于30岁的节点，认真规划自己的人生，设定40岁的大目标，以便分解小目标并及时跟踪</p>\n<h4 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h4><p>我认为作为中年人最重要还是生活，包括家庭以及健康等等：</p>\n<ul>\n<li>身体健康：体重维持60kg，全身检查健康，作息规律</li>\n<li>家庭和睦：育有儿女，家庭资产愈千万，与伴侣友好相处</li>\n<li>生活舒适：工作生活平衡，为自己工作，周工时40小时左右，已周游全球各地</li>\n</ul>\n<h4 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h4><p>学习是终身的事情，主要包括学历、阅读和著述等：</p>\n<ul>\n<li>学历：始终不放弃寻找追求名校phD的机会</li>\n<li>阅读：广泛涉猎专业相关、社会学、生理学、心理学、历史学乃至国学等著作</li>\n<li>著述：能在一定领域有自己专业的见解，并试图著书输出自己的观点</li>\n</ul>\n<h4 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h4><p>工作赋予生活以意义，个人的职业生涯更是自己最重要的标签，时刻自我治理以及自我引导自己的职业生涯。</p>\n<ul>\n<li>意义：为自己而工作，为自己的产品而奋斗</li>\n<li>薪酬：薪资百万，追求财富自由</li>\n<li>氛围：能涉及管理，有自己的小伙伴</li>\n</ul>\n<h3 id=\"三年期计划-2025\"><a href=\"#三年期计划-2025\" class=\"headerlink\" title=\"三年期计划(2025)\"></a>三年期计划(2025)</h3><p>日月如梭，时间飞逝，十年期依然是一些模糊的藏宝地。三年期则是分解出来可以量化以及按时跟踪的目标节点，让自己不再虚度光阴，充实自在而富有意义。</p>\n<h4 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h4><ul>\n<li>身体：皮肤病痊愈，体重维持60kg,无身体疾病</li>\n<li>家庭：生儿育女，家庭资产接近400w</li>\n<li>生活：旅游欧洲、美国、日韩东南亚，开始为自我的目标而驱动工作</li>\n</ul>\n<h4 id=\"学习-1\"><a href=\"#学习-1\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li>学历：追求一个Master Degree,累积发表双位数专利和论文</li>\n<li>阅读：涉猎专业相关的专业巨著，阅读生理学、心理学、社会学、名人传记达100本</li>\n<li>著述：积极寻找到1～2个个人专精领域，建立并完成至少3个个人技术专栏</li>\n</ul>\n<h4 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h4><ul>\n<li>意义：推出个人的产品（虚拟或实体），重心逐渐转向自我色彩强烈的产品上</li>\n<li>薪酬：薪资80万，学习相关理财知识</li>\n<li>氛围：成为核心工作成员，从胜任者开始迈向领域专家</li>\n</ul>\n<h3 id=\"今年计划（2022）\"><a href=\"#今年计划（2022）\" class=\"headerlink\" title=\"今年计划（2022）\"></a>今年计划（2022）</h3><p>今年的年度计划姗姗来迟，也是发现自己人生虚度多年，及时止损，希望认真贯彻人生计划的制定执行并跟踪，收获充实有意义的人生。</p>\n<h4 id=\"生活-2\"><a href=\"#生活-2\" class=\"headerlink\" title=\"生活\"></a>生活</h4><ul>\n<li>身体：半年内皮肤病痊愈，体重到65kg，祛湿并形成良好作息，早睡早起不熬夜</li>\n<li>家庭：开始孕育自己的孩子，家庭资产接近200w</li>\n<li>生活：旅游国内，意识到自我驱动，执行并跟踪</li>\n</ul>\n<h4 id=\"学习-2\"><a href=\"#学习-2\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li>学历：累积发表两位数专利和论文，了解及执行进修</li>\n<li>阅读：涉猎专业相关书籍达20本</li>\n<li>著述：开展个人技术专栏的记录，个人日志达100篇。</li>\n<li>刷题：完成200题leetcode<h4 id=\"工作-2\"><a href=\"#工作-2\" class=\"headerlink\" title=\"工作\"></a>工作</h4></li>\n<li>意义：规划属于自己人生标签的产品和项目</li>\n<li>薪酬：去年薪资40左右，争取今年能达60；争取期权及五险一金等福利进步；</li>\n<li>氛围：超额完成基本需求，成为高手新手，向胜任者出发。</li>\n</ul>\n<h3 id=\"半年计划-上半年\"><a href=\"#半年计划-上半年\" class=\"headerlink\" title=\"半年计划(上半年)\"></a>半年计划(上半年)</h3><h4 id=\"生活-3\"><a href=\"#生活-3\" class=\"headerlink\" title=\"生活\"></a>生活</h4><ul>\n<li>身体：体重控制在67kg，坚持中医理疗，皮肤病面积减少一半</li>\n<li>家庭：家庭资产接近150w，和伴侣有良好的生活方式</li>\n<li>生活：旅游周边地区，拍照并撰写游记，留下美好的生活记忆</li>\n</ul>\n<h4 id=\"学习-3\"><a href=\"#学习-3\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li>学历：发表10篇左右专利</li>\n<li>阅读：涉猎专业相关及有趣书籍10本，具体为：SLAM十四讲、剑指offer、软技能：代码之外的生存指南、Effective C++、More Effective C++、CMake实践、程序员的思维修炼：开发认知潜能的九堂课、软技能2：软件开发者职业生涯指南、三十岁，一切刚刚开始、八段锦。</li>\n<li>著述：先阅读找寻自己感兴趣的细分领域，以写代练。个人日志累积达50篇</li>\n<li>刷题：完成100题leetcode<h4 id=\"工作-3\"><a href=\"#工作-3\" class=\"headerlink\" title=\"工作\"></a>工作</h4></li>\n<li>意义：寻找有商业价值的项目</li>\n<li>目标：成为SLAM高手新手，解读经典项目源码，上相关视频课程</li>\n<li>薪酬：争取50%的进步</li>\n<li>氛围：融入团队中工作，成为高手新手，完成3个重要需求</li>\n</ul>\n","site":{"data":{}},"length":1415,"excerpt":"","more":"<h2 id=\"人生航海图\"><a href=\"#人生航海图\" class=\"headerlink\" title=\"人生航海图\"></a>人生航海图</h2><h3 id=\"十年期目标-2032\"><a href=\"#十年期目标-2032\" class=\"headerlink\" title=\"十年期目标(2032)\"></a>十年期目标(2032)</h3><p>处于30岁的节点，认真规划自己的人生，设定40岁的大目标，以便分解小目标并及时跟踪</p>\n<h4 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h4><p>我认为作为中年人最重要还是生活，包括家庭以及健康等等：</p>\n<ul>\n<li>身体健康：体重维持60kg，全身检查健康，作息规律</li>\n<li>家庭和睦：育有儿女，家庭资产愈千万，与伴侣友好相处</li>\n<li>生活舒适：工作生活平衡，为自己工作，周工时40小时左右，已周游全球各地</li>\n</ul>\n<h4 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h4><p>学习是终身的事情，主要包括学历、阅读和著述等：</p>\n<ul>\n<li>学历：始终不放弃寻找追求名校phD的机会</li>\n<li>阅读：广泛涉猎专业相关、社会学、生理学、心理学、历史学乃至国学等著作</li>\n<li>著述：能在一定领域有自己专业的见解，并试图著书输出自己的观点</li>\n</ul>\n<h4 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h4><p>工作赋予生活以意义，个人的职业生涯更是自己最重要的标签，时刻自我治理以及自我引导自己的职业生涯。</p>\n<ul>\n<li>意义：为自己而工作，为自己的产品而奋斗</li>\n<li>薪酬：薪资百万，追求财富自由</li>\n<li>氛围：能涉及管理，有自己的小伙伴</li>\n</ul>\n<h3 id=\"三年期计划-2025\"><a href=\"#三年期计划-2025\" class=\"headerlink\" title=\"三年期计划(2025)\"></a>三年期计划(2025)</h3><p>日月如梭，时间飞逝，十年期依然是一些模糊的藏宝地。三年期则是分解出来可以量化以及按时跟踪的目标节点，让自己不再虚度光阴，充实自在而富有意义。</p>\n<h4 id=\"生活-1\"><a href=\"#生活-1\" class=\"headerlink\" title=\"生活\"></a>生活</h4><ul>\n<li>身体：皮肤病痊愈，体重维持60kg,无身体疾病</li>\n<li>家庭：生儿育女，家庭资产接近400w</li>\n<li>生活：旅游欧洲、美国、日韩东南亚，开始为自我的目标而驱动工作</li>\n</ul>\n<h4 id=\"学习-1\"><a href=\"#学习-1\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li>学历：追求一个Master Degree,累积发表双位数专利和论文</li>\n<li>阅读：涉猎专业相关的专业巨著，阅读生理学、心理学、社会学、名人传记达100本</li>\n<li>著述：积极寻找到1～2个个人专精领域，建立并完成至少3个个人技术专栏</li>\n</ul>\n<h4 id=\"工作-1\"><a href=\"#工作-1\" class=\"headerlink\" title=\"工作\"></a>工作</h4><ul>\n<li>意义：推出个人的产品（虚拟或实体），重心逐渐转向自我色彩强烈的产品上</li>\n<li>薪酬：薪资80万，学习相关理财知识</li>\n<li>氛围：成为核心工作成员，从胜任者开始迈向领域专家</li>\n</ul>\n<h3 id=\"今年计划（2022）\"><a href=\"#今年计划（2022）\" class=\"headerlink\" title=\"今年计划（2022）\"></a>今年计划（2022）</h3><p>今年的年度计划姗姗来迟，也是发现自己人生虚度多年，及时止损，希望认真贯彻人生计划的制定执行并跟踪，收获充实有意义的人生。</p>\n<h4 id=\"生活-2\"><a href=\"#生活-2\" class=\"headerlink\" title=\"生活\"></a>生活</h4><ul>\n<li>身体：半年内皮肤病痊愈，体重到65kg，祛湿并形成良好作息，早睡早起不熬夜</li>\n<li>家庭：开始孕育自己的孩子，家庭资产接近200w</li>\n<li>生活：旅游国内，意识到自我驱动，执行并跟踪</li>\n</ul>\n<h4 id=\"学习-2\"><a href=\"#学习-2\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li>学历：累积发表两位数专利和论文，了解及执行进修</li>\n<li>阅读：涉猎专业相关书籍达20本</li>\n<li>著述：开展个人技术专栏的记录，个人日志达100篇。</li>\n<li>刷题：完成200题leetcode<h4 id=\"工作-2\"><a href=\"#工作-2\" class=\"headerlink\" title=\"工作\"></a>工作</h4></li>\n<li>意义：规划属于自己人生标签的产品和项目</li>\n<li>薪酬：去年薪资40左右，争取今年能达60；争取期权及五险一金等福利进步；</li>\n<li>氛围：超额完成基本需求，成为高手新手，向胜任者出发。</li>\n</ul>\n<h3 id=\"半年计划-上半年\"><a href=\"#半年计划-上半年\" class=\"headerlink\" title=\"半年计划(上半年)\"></a>半年计划(上半年)</h3><h4 id=\"生活-3\"><a href=\"#生活-3\" class=\"headerlink\" title=\"生活\"></a>生活</h4><ul>\n<li>身体：体重控制在67kg，坚持中医理疗，皮肤病面积减少一半</li>\n<li>家庭：家庭资产接近150w，和伴侣有良好的生活方式</li>\n<li>生活：旅游周边地区，拍照并撰写游记，留下美好的生活记忆</li>\n</ul>\n<h4 id=\"学习-3\"><a href=\"#学习-3\" class=\"headerlink\" title=\"学习\"></a>学习</h4><ul>\n<li>学历：发表10篇左右专利</li>\n<li>阅读：涉猎专业相关及有趣书籍10本，具体为：SLAM十四讲、剑指offer、软技能：代码之外的生存指南、Effective C++、More Effective C++、CMake实践、程序员的思维修炼：开发认知潜能的九堂课、软技能2：软件开发者职业生涯指南、三十岁，一切刚刚开始、八段锦。</li>\n<li>著述：先阅读找寻自己感兴趣的细分领域，以写代练。个人日志累积达50篇</li>\n<li>刷题：完成100题leetcode<h4 id=\"工作-3\"><a href=\"#工作-3\" class=\"headerlink\" title=\"工作\"></a>工作</h4></li>\n<li>意义：寻找有商业价值的项目</li>\n<li>目标：成为SLAM高手新手，解读经典项目源码，上相关视频课程</li>\n<li>薪酬：争取50%的进步</li>\n<li>氛围：融入团队中工作，成为高手新手，完成3个重要需求</li>\n</ul>\n"}],"Post":[{"title":"TSDF算法","date":"2021-12-23T08:54:25.000Z","_content":"\n具体学习于 [https://github.com/andyzeng/tsdf-fusion](https://github.com/andyzeng/tsdf-fusion)\n### Why TSDF\n三维重建首当其冲的问题是如何保存以及如何表示模型，通常而言会有点云，mesh等；\n但是对于室内三维重建，TSDF是一个不错的选择，其优点是\n- 非常适合CUDA并行运算，从而达到实时。\n- 开辟固定的内存/显存，模型大小相对可控\n- 模型大小不随数据量变化，网格的细节比较好\n缺点：CPU计算耗时，在边缘以及前后景交界出现拖尾现象（体素g在像素坐标系投影有一定的误差）\n\n### How TSDF\n\n1.建立长方体包围盒（能包住房间，一般预设参数：可通过设定划分网格以及网格大小得到)\n2.将每个体素v转化成三维座标点g(根据模型起点和网格推算)\n3.对于新来的每一帧深度图：\n    遍历每一个体素g：\n        3.1.根据相机外参，将g在世界坐标系转换到相机坐标系的点c,再由相机内参转换到像素坐标系x;\n        3.2.深度相机像素深度为value(x),点c到相机坐标原点的距离为distance(v)\n        3.3.sdf(g) = value(x) - distance(v).\n        3.4.求tsdf(g).`预设截断距离t = voxel_size * t_n, 则t以内，tsdf(g) = sdf(p)/|u|;在t以外时，if sdf(p)>1, tsdf(p) = 1;if sdf(p)<-1, tsdf(p)=-1;`\n        3.5.权重w(p) = cos(theta)/distance(v), theta为投影光线与表面法向的夹角\n至此，得到当前帧所有体素的tsdf值以及权重值\n4.当前帧与全局模型融合\n    4.1 若当前帧为第一帧，即为融合结果；否则与之前的模型融合,公式如下，其中W(p)为融合权重，w(p)为当前帧权重\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTEzMzY5Ni02ZWY1Yzk2YWUwMWFlNTZmLnBuZw?x-oss-process=image/format,png)\n    \n### Detail and Analysis\n","source":"_posts/TSDF算法.md","raw":"---\ntitle: TSDF算法\ndate: 2021-12-23 16:54:25\ntags: SLAM\ncategories:\n- SLAM\n---\n\n具体学习于 [https://github.com/andyzeng/tsdf-fusion](https://github.com/andyzeng/tsdf-fusion)\n### Why TSDF\n三维重建首当其冲的问题是如何保存以及如何表示模型，通常而言会有点云，mesh等；\n但是对于室内三维重建，TSDF是一个不错的选择，其优点是\n- 非常适合CUDA并行运算，从而达到实时。\n- 开辟固定的内存/显存，模型大小相对可控\n- 模型大小不随数据量变化，网格的细节比较好\n缺点：CPU计算耗时，在边缘以及前后景交界出现拖尾现象（体素g在像素坐标系投影有一定的误差）\n\n### How TSDF\n\n1.建立长方体包围盒（能包住房间，一般预设参数：可通过设定划分网格以及网格大小得到)\n2.将每个体素v转化成三维座标点g(根据模型起点和网格推算)\n3.对于新来的每一帧深度图：\n    遍历每一个体素g：\n        3.1.根据相机外参，将g在世界坐标系转换到相机坐标系的点c,再由相机内参转换到像素坐标系x;\n        3.2.深度相机像素深度为value(x),点c到相机坐标原点的距离为distance(v)\n        3.3.sdf(g) = value(x) - distance(v).\n        3.4.求tsdf(g).`预设截断距离t = voxel_size * t_n, 则t以内，tsdf(g) = sdf(p)/|u|;在t以外时，if sdf(p)>1, tsdf(p) = 1;if sdf(p)<-1, tsdf(p)=-1;`\n        3.5.权重w(p) = cos(theta)/distance(v), theta为投影光线与表面法向的夹角\n至此，得到当前帧所有体素的tsdf值以及权重值\n4.当前帧与全局模型融合\n    4.1 若当前帧为第一帧，即为融合结果；否则与之前的模型融合,公式如下，其中W(p)为融合权重，w(p)为当前帧权重\n![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTEzMzY5Ni02ZWY1Yzk2YWUwMWFlNTZmLnBuZw?x-oss-process=image/format,png)\n    \n### Detail and Analysis\n","slug":"TSDF算法","published":1,"updated":"2021-12-28T12:38:07.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgauq000128zd9dccd8z4","content":"<p>具体学习于 <a href=\"https://github.com/andyzeng/tsdf-fusion\">https://github.com/andyzeng/tsdf-fusion</a></p>\n<h3 id=\"Why-TSDF\"><a href=\"#Why-TSDF\" class=\"headerlink\" title=\"Why TSDF\"></a>Why TSDF</h3><p>三维重建首当其冲的问题是如何保存以及如何表示模型，通常而言会有点云，mesh等；<br>但是对于室内三维重建，TSDF是一个不错的选择，其优点是</p>\n<ul>\n<li>非常适合CUDA并行运算，从而达到实时。</li>\n<li>开辟固定的内存/显存，模型大小相对可控</li>\n<li>模型大小不随数据量变化，网格的细节比较好<br>缺点：CPU计算耗时，在边缘以及前后景交界出现拖尾现象（体素g在像素坐标系投影有一定的误差）</li>\n</ul>\n<h3 id=\"How-TSDF\"><a href=\"#How-TSDF\" class=\"headerlink\" title=\"How TSDF\"></a>How TSDF</h3><p>1.建立长方体包围盒（能包住房间，一般预设参数：可通过设定划分网格以及网格大小得到)<br>2.将每个体素v转化成三维座标点g(根据模型起点和网格推算)<br>3.对于新来的每一帧深度图：<br>    遍历每一个体素g：<br>        3.1.根据相机外参，将g在世界坐标系转换到相机坐标系的点c,再由相机内参转换到像素坐标系x;<br>        3.2.深度相机像素深度为value(x),点c到相机坐标原点的距离为distance(v)<br>        3.3.sdf(g) = value(x) - distance(v).<br>        3.4.求tsdf(g).<code>预设截断距离t = voxel_size * t_n, 则t以内，tsdf(g) = sdf(p)/|u|;在t以外时，if sdf(p)&gt;1, tsdf(p) = 1;if sdf(p)&lt;-1, tsdf(p)=-1;</code><br>        3.5.权重w(p) = cos(theta)/distance(v), theta为投影光线与表面法向的夹角<br>至此，得到当前帧所有体素的tsdf值以及权重值<br>4.当前帧与全局模型融合<br>    4.1 若当前帧为第一帧，即为融合结果；否则与之前的模型融合,公式如下，其中W(p)为融合权重，w(p)为当前帧权重<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTEzMzY5Ni02ZWY1Yzk2YWUwMWFlNTZmLnBuZw?x-oss-process=image/format,png\"></p>\n<h3 id=\"Detail-and-Analysis\"><a href=\"#Detail-and-Analysis\" class=\"headerlink\" title=\"Detail and Analysis\"></a>Detail and Analysis</h3>","site":{"data":{}},"length":728,"excerpt":"","more":"<p>具体学习于 <a href=\"https://github.com/andyzeng/tsdf-fusion\">https://github.com/andyzeng/tsdf-fusion</a></p>\n<h3 id=\"Why-TSDF\"><a href=\"#Why-TSDF\" class=\"headerlink\" title=\"Why TSDF\"></a>Why TSDF</h3><p>三维重建首当其冲的问题是如何保存以及如何表示模型，通常而言会有点云，mesh等；<br>但是对于室内三维重建，TSDF是一个不错的选择，其优点是</p>\n<ul>\n<li>非常适合CUDA并行运算，从而达到实时。</li>\n<li>开辟固定的内存/显存，模型大小相对可控</li>\n<li>模型大小不随数据量变化，网格的细节比较好<br>缺点：CPU计算耗时，在边缘以及前后景交界出现拖尾现象（体素g在像素坐标系投影有一定的误差）</li>\n</ul>\n<h3 id=\"How-TSDF\"><a href=\"#How-TSDF\" class=\"headerlink\" title=\"How TSDF\"></a>How TSDF</h3><p>1.建立长方体包围盒（能包住房间，一般预设参数：可通过设定划分网格以及网格大小得到)<br>2.将每个体素v转化成三维座标点g(根据模型起点和网格推算)<br>3.对于新来的每一帧深度图：<br>    遍历每一个体素g：<br>        3.1.根据相机外参，将g在世界坐标系转换到相机坐标系的点c,再由相机内参转换到像素坐标系x;<br>        3.2.深度相机像素深度为value(x),点c到相机坐标原点的距离为distance(v)<br>        3.3.sdf(g) = value(x) - distance(v).<br>        3.4.求tsdf(g).<code>预设截断距离t = voxel_size * t_n, 则t以内，tsdf(g) = sdf(p)/|u|;在t以外时，if sdf(p)&gt;1, tsdf(p) = 1;if sdf(p)&lt;-1, tsdf(p)=-1;</code><br>        3.5.权重w(p) = cos(theta)/distance(v), theta为投影光线与表面法向的夹角<br>至此，得到当前帧所有体素的tsdf值以及权重值<br>4.当前帧与全局模型融合<br>    4.1 若当前帧为第一帧，即为融合结果；否则与之前的模型融合,公式如下，其中W(p)为融合权重，w(p)为当前帧权重<br><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMTEzMzY5Ni02ZWY1Yzk2YWUwMWFlNTZmLnBuZw?x-oss-process=image/format,png\"></p>\n<h3 id=\"Detail-and-Analysis\"><a href=\"#Detail-and-Analysis\" class=\"headerlink\" title=\"Detail and Analysis\"></a>Detail and Analysis</h3>"},{"title":"UNIX_Tutorial","date":"2021-12-27T02:55:55.000Z","mathjax":true,"_content":"\nUnix和Linux的基本指令\n[http://www.ee.surrey.ac.uk/Teaching/Unix/](http://www.ee.surrey.ac.uk/Teaching/Unix/)\n\n### Introduction\n\n内核(Kernel): 分配时钟和内存给程序和处理文件存储以及系统交互\nShell:用户和内核的命令交互\nUNIX中要么时文件，要么是程序\n\n### Tutorial One & Two\n\n``` cpp\nls -a\npwd\n\n// search sci in file.txt\n// Method 1\nless file.txt\n/sci  \n\n// Method 2\ngrep sci file.txt //-i mean 'ignore up/low case'\n\nwc -l file.txt  // count line in file.txt\n\nclear // clean monitor\n```\n\n### Tutorial Three & Four\n``` cpp\ncat > list1  // output to list1\ncat >> list1 // append to list1\ncat list1 list2 > biglist // concat list1 and list2 to biglist\n\nsort < biglist > slist // sort biglist and output to slist\ncommand1 | command2  // pipe the output of command1 to the input of command2\n\nls list*\nls ?list\n\n// getting help\nman wc\n\n```\n\n|Command|Meaning|\n|----|----|\n|command > file| redirect standard output to a file|\n|command >> file| append standard output to a file|\n|command < file| redirect standard input from a file|\n|command1 \\| command2| pipe output of command1 to input of command2|\n|who|list users currently logged|\n\n### Tutorial Five & Six\n\n``` cpp\nls -l\n\n-rwxrw-r-- 1 ee51ab beng95 2450 Sept29 11:52 file1\n\n// read/write/execute rights in owner/group/everyone\n// file_size time file_name\n\nchmod a+x ex // add permission to execute ex to all\n```\n\n|Symbol|Meaning|\n|----|----|\n|u|user|\n|g|group|\n|o|other|\n|a|all|\n|r|read|\n|w|write and delete|\n|x|execute and access directory|\n|+|add permission|\n|-|take away permission|\n\n#### summary of process control\nforeground: terminal suspend and wait\nbackground: terminal can go on\n\n|Command|Meaning|\n|----|----|\n|ls -lag|list access rights for all files|\n|chmod [options] file|change access rights for named file|\n|command &| run command in background|\n|^C|kill the job running in the forground|\n|^Z|suspend the job running in the foreground|\n|jobs|list current jobs|\n|bg %2|background the suspended job|\n|fg %1|foreground job number 1 |\n|kill %1|kill job number 1|\n|ps|list current processes|\n|kill 310|kill process id 310|\n\n\n``` cpp\ndf .  // report space left on the file system\nls -lh\ngzip\ngunzip  // unzip\ntar -xvf .tar // extract\ndiff file1 file2  // < denotes file1, > denotes file2\n\nhistory // terminal history\n!! // recall last command\n!-3 // recall third most recent command\n!grep // recall last command starting with grep\n\n```\n\n\n### Tutorial Seven & Eight\nInstall software:\n1. Locate and download the source code(which is usually compressed)\n2. Unpack the source code\n3. Compile the code(Most difficult)\n4. Install the resulting executable\n5. Set paths to the installation directory\n\n**make**:manage large programs and only compiling those parts changed\n**Makefile**: record the related make rules, contains information on how to compile the software.\n\nSome simplest way to compile a package:\n1. **cd** to the directory containing the packages' source code.\n2. Type **./configure** to configure the package for your system\n3. Type **make** to compile the package\n4. Optionally, type **make check** to run any self0tests that come with the package.\n5. Type **make install** to install the programs and any data files and documentation.\n6. Optionally, type **make clean** to remove the program binaries and object files from the source code directory.\n\n\n#### UNIX variables\ntwo categories: Environment variables, Shell variables\nShell variables: apply only to the current instance of shell and set short-term working conditions.\nEnvironment variables: system environment with UPPER CASE name\n\n``` cpp\necho $PATH // print system environment\nset PATH=($PATH ~/new_path/)  // add path to PATH\n\n```","source":"_posts/UNIX-Tutorial.md","raw":"---\ntitle: UNIX_Tutorial\ndate: 2021-12-27 10:55:55\ntags: bash\ncategories:\n- 常用指令\nmathjax: true\n---\n\nUnix和Linux的基本指令\n[http://www.ee.surrey.ac.uk/Teaching/Unix/](http://www.ee.surrey.ac.uk/Teaching/Unix/)\n\n### Introduction\n\n内核(Kernel): 分配时钟和内存给程序和处理文件存储以及系统交互\nShell:用户和内核的命令交互\nUNIX中要么时文件，要么是程序\n\n### Tutorial One & Two\n\n``` cpp\nls -a\npwd\n\n// search sci in file.txt\n// Method 1\nless file.txt\n/sci  \n\n// Method 2\ngrep sci file.txt //-i mean 'ignore up/low case'\n\nwc -l file.txt  // count line in file.txt\n\nclear // clean monitor\n```\n\n### Tutorial Three & Four\n``` cpp\ncat > list1  // output to list1\ncat >> list1 // append to list1\ncat list1 list2 > biglist // concat list1 and list2 to biglist\n\nsort < biglist > slist // sort biglist and output to slist\ncommand1 | command2  // pipe the output of command1 to the input of command2\n\nls list*\nls ?list\n\n// getting help\nman wc\n\n```\n\n|Command|Meaning|\n|----|----|\n|command > file| redirect standard output to a file|\n|command >> file| append standard output to a file|\n|command < file| redirect standard input from a file|\n|command1 \\| command2| pipe output of command1 to input of command2|\n|who|list users currently logged|\n\n### Tutorial Five & Six\n\n``` cpp\nls -l\n\n-rwxrw-r-- 1 ee51ab beng95 2450 Sept29 11:52 file1\n\n// read/write/execute rights in owner/group/everyone\n// file_size time file_name\n\nchmod a+x ex // add permission to execute ex to all\n```\n\n|Symbol|Meaning|\n|----|----|\n|u|user|\n|g|group|\n|o|other|\n|a|all|\n|r|read|\n|w|write and delete|\n|x|execute and access directory|\n|+|add permission|\n|-|take away permission|\n\n#### summary of process control\nforeground: terminal suspend and wait\nbackground: terminal can go on\n\n|Command|Meaning|\n|----|----|\n|ls -lag|list access rights for all files|\n|chmod [options] file|change access rights for named file|\n|command &| run command in background|\n|^C|kill the job running in the forground|\n|^Z|suspend the job running in the foreground|\n|jobs|list current jobs|\n|bg %2|background the suspended job|\n|fg %1|foreground job number 1 |\n|kill %1|kill job number 1|\n|ps|list current processes|\n|kill 310|kill process id 310|\n\n\n``` cpp\ndf .  // report space left on the file system\nls -lh\ngzip\ngunzip  // unzip\ntar -xvf .tar // extract\ndiff file1 file2  // < denotes file1, > denotes file2\n\nhistory // terminal history\n!! // recall last command\n!-3 // recall third most recent command\n!grep // recall last command starting with grep\n\n```\n\n\n### Tutorial Seven & Eight\nInstall software:\n1. Locate and download the source code(which is usually compressed)\n2. Unpack the source code\n3. Compile the code(Most difficult)\n4. Install the resulting executable\n5. Set paths to the installation directory\n\n**make**:manage large programs and only compiling those parts changed\n**Makefile**: record the related make rules, contains information on how to compile the software.\n\nSome simplest way to compile a package:\n1. **cd** to the directory containing the packages' source code.\n2. Type **./configure** to configure the package for your system\n3. Type **make** to compile the package\n4. Optionally, type **make check** to run any self0tests that come with the package.\n5. Type **make install** to install the programs and any data files and documentation.\n6. Optionally, type **make clean** to remove the program binaries and object files from the source code directory.\n\n\n#### UNIX variables\ntwo categories: Environment variables, Shell variables\nShell variables: apply only to the current instance of shell and set short-term working conditions.\nEnvironment variables: system environment with UPPER CASE name\n\n``` cpp\necho $PATH // print system environment\nset PATH=($PATH ~/new_path/)  // add path to PATH\n\n```","slug":"UNIX-Tutorial","published":1,"updated":"2021-12-28T12:38:38.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgaut000328zd0a9ubklc","content":"<p>Unix和Linux的基本指令<br><a href=\"http://www.ee.surrey.ac.uk/Teaching/Unix/\">http://www.ee.surrey.ac.uk/Teaching/Unix/</a></p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>内核(Kernel): 分配时钟和内存给程序和处理文件存储以及系统交互<br>Shell:用户和内核的命令交互<br>UNIX中要么时文件，要么是程序</p>\n<h3 id=\"Tutorial-One-amp-Two\"><a href=\"#Tutorial-One-amp-Two\" class=\"headerlink\" title=\"Tutorial One &amp; Two\"></a>Tutorial One &amp; Two</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br><span class=\"line\">pwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// search sci in file.txt</span></span><br><span class=\"line\"><span class=\"comment\">// Method 1</span></span><br><span class=\"line\">less file.txt</span><br><span class=\"line\">/sci  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Method 2</span></span><br><span class=\"line\">grep sci file.txt <span class=\"comment\">//-i mean &#x27;ignore up/low case&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">wc -l file.txt  <span class=\"comment\">// count line in file.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">clear <span class=\"comment\">// clean monitor</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tutorial-Three-amp-Four\"><a href=\"#Tutorial-Three-amp-Four\" class=\"headerlink\" title=\"Tutorial Three &amp; Four\"></a>Tutorial Three &amp; Four</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; list1  <span class=\"comment\">// output to list1</span></span><br><span class=\"line\">cat &gt;&gt; list1 <span class=\"comment\">// append to list1</span></span><br><span class=\"line\">cat list1 list2 &gt; biglist <span class=\"comment\">// concat list1 and list2 to biglist</span></span><br><span class=\"line\"></span><br><span class=\"line\">sort &lt; biglist &gt; slist <span class=\"comment\">// sort biglist and output to slist</span></span><br><span class=\"line\">command1 | command2  <span class=\"comment\">// pipe the output of command1 to the input of command2</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls list*</span><br><span class=\"line\">ls ?list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getting help</span></span><br><span class=\"line\">man wc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>redirect standard output to a file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>append standard output to a file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>redirect standard input from a file</td>\n</tr>\n<tr>\n<td>command1 | command2</td>\n<td>pipe output of command1 to input of command2</td>\n</tr>\n<tr>\n<td>who</td>\n<td>list users currently logged</td>\n</tr>\n</tbody></table>\n<h3 id=\"Tutorial-Five-amp-Six\"><a href=\"#Tutorial-Five-amp-Six\" class=\"headerlink\" title=\"Tutorial Five &amp; Six\"></a>Tutorial Five &amp; Six</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l</span><br><span class=\"line\"></span><br><span class=\"line\">-rwxrw-r-- <span class=\"number\">1</span> ee51ab beng95 <span class=\"number\">2450</span> Sept29 <span class=\"number\">11</span>:<span class=\"number\">52</span> file1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read/write/execute rights in owner/group/everyone</span></span><br><span class=\"line\"><span class=\"comment\">// file_size time file_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">chmod a+x ex <span class=\"comment\">// add permission to execute ex to all</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u</td>\n<td>user</td>\n</tr>\n<tr>\n<td>g</td>\n<td>group</td>\n</tr>\n<tr>\n<td>o</td>\n<td>other</td>\n</tr>\n<tr>\n<td>a</td>\n<td>all</td>\n</tr>\n<tr>\n<td>r</td>\n<td>read</td>\n</tr>\n<tr>\n<td>w</td>\n<td>write and delete</td>\n</tr>\n<tr>\n<td>x</td>\n<td>execute and access directory</td>\n</tr>\n<tr>\n<td>+</td>\n<td>add permission</td>\n</tr>\n<tr>\n<td>-</td>\n<td>take away permission</td>\n</tr>\n</tbody></table>\n<h4 id=\"summary-of-process-control\"><a href=\"#summary-of-process-control\" class=\"headerlink\" title=\"summary of process control\"></a>summary of process control</h4><p>foreground: terminal suspend and wait<br>background: terminal can go on</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ls -lag</td>\n<td>list access rights for all files</td>\n</tr>\n<tr>\n<td>chmod [options] file</td>\n<td>change access rights for named file</td>\n</tr>\n<tr>\n<td>command &amp;</td>\n<td>run command in background</td>\n</tr>\n<tr>\n<td>^C</td>\n<td>kill the job running in the forground</td>\n</tr>\n<tr>\n<td>^Z</td>\n<td>suspend the job running in the foreground</td>\n</tr>\n<tr>\n<td>jobs</td>\n<td>list current jobs</td>\n</tr>\n<tr>\n<td>bg %2</td>\n<td>background the suspended job</td>\n</tr>\n<tr>\n<td>fg %1</td>\n<td>foreground job number 1</td>\n</tr>\n<tr>\n<td>kill %1</td>\n<td>kill job number 1</td>\n</tr>\n<tr>\n<td>ps</td>\n<td>list current processes</td>\n</tr>\n<tr>\n<td>kill 310</td>\n<td>kill process id 310</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df .  <span class=\"comment\">// report space left on the file system</span></span><br><span class=\"line\">ls -lh</span><br><span class=\"line\">gzip</span><br><span class=\"line\">gunzip  <span class=\"comment\">// unzip</span></span><br><span class=\"line\">tar -xvf .tar <span class=\"comment\">// extract</span></span><br><span class=\"line\">diff file1 file2  <span class=\"comment\">// &lt; denotes file1, &gt; denotes file2</span></span><br><span class=\"line\"></span><br><span class=\"line\">history <span class=\"comment\">// terminal history</span></span><br><span class=\"line\">!! <span class=\"comment\">// recall last command</span></span><br><span class=\"line\">!<span class=\"number\">-3</span> <span class=\"comment\">// recall third most recent command</span></span><br><span class=\"line\">!grep <span class=\"comment\">// recall last command starting with grep</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Tutorial-Seven-amp-Eight\"><a href=\"#Tutorial-Seven-amp-Eight\" class=\"headerlink\" title=\"Tutorial Seven &amp; Eight\"></a>Tutorial Seven &amp; Eight</h3><p>Install software:</p>\n<ol>\n<li>Locate and download the source code(which is usually compressed)</li>\n<li>Unpack the source code</li>\n<li>Compile the code(Most difficult)</li>\n<li>Install the resulting executable</li>\n<li>Set paths to the installation directory</li>\n</ol>\n<p><strong>make</strong>:manage large programs and only compiling those parts changed<br><strong>Makefile</strong>: record the related make rules, contains information on how to compile the software.</p>\n<p>Some simplest way to compile a package:</p>\n<ol>\n<li><strong>cd</strong> to the directory containing the packages’ source code.</li>\n<li>Type <strong>./configure</strong> to configure the package for your system</li>\n<li>Type <strong>make</strong> to compile the package</li>\n<li>Optionally, type <strong>make check</strong> to run any self0tests that come with the package.</li>\n<li>Type <strong>make install</strong> to install the programs and any data files and documentation.</li>\n<li>Optionally, type <strong>make clean</strong> to remove the program binaries and object files from the source code directory.</li>\n</ol>\n<h4 id=\"UNIX-variables\"><a href=\"#UNIX-variables\" class=\"headerlink\" title=\"UNIX variables\"></a>UNIX variables</h4><p>two categories: Environment variables, Shell variables<br>Shell variables: apply only to the current instance of shell and set short-term working conditions.<br>Environment variables: system environment with UPPER CASE name</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH <span class=\"comment\">// print system environment</span></span><br><span class=\"line\">set PATH=($PATH ~/new_path/)  <span class=\"comment\">// add path to PATH</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2846,"excerpt":"","more":"<p>Unix和Linux的基本指令<br><a href=\"http://www.ee.surrey.ac.uk/Teaching/Unix/\">http://www.ee.surrey.ac.uk/Teaching/Unix/</a></p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>内核(Kernel): 分配时钟和内存给程序和处理文件存储以及系统交互<br>Shell:用户和内核的命令交互<br>UNIX中要么时文件，要么是程序</p>\n<h3 id=\"Tutorial-One-amp-Two\"><a href=\"#Tutorial-One-amp-Two\" class=\"headerlink\" title=\"Tutorial One &amp; Two\"></a>Tutorial One &amp; Two</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a</span><br><span class=\"line\">pwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// search sci in file.txt</span></span><br><span class=\"line\"><span class=\"comment\">// Method 1</span></span><br><span class=\"line\">less file.txt</span><br><span class=\"line\">/sci  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Method 2</span></span><br><span class=\"line\">grep sci file.txt <span class=\"comment\">//-i mean &#x27;ignore up/low case&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">wc -l file.txt  <span class=\"comment\">// count line in file.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">clear <span class=\"comment\">// clean monitor</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tutorial-Three-amp-Four\"><a href=\"#Tutorial-Three-amp-Four\" class=\"headerlink\" title=\"Tutorial Three &amp; Four\"></a>Tutorial Three &amp; Four</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; list1  <span class=\"comment\">// output to list1</span></span><br><span class=\"line\">cat &gt;&gt; list1 <span class=\"comment\">// append to list1</span></span><br><span class=\"line\">cat list1 list2 &gt; biglist <span class=\"comment\">// concat list1 and list2 to biglist</span></span><br><span class=\"line\"></span><br><span class=\"line\">sort &lt; biglist &gt; slist <span class=\"comment\">// sort biglist and output to slist</span></span><br><span class=\"line\">command1 | command2  <span class=\"comment\">// pipe the output of command1 to the input of command2</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls list*</span><br><span class=\"line\">ls ?list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getting help</span></span><br><span class=\"line\">man wc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>command &gt; file</td>\n<td>redirect standard output to a file</td>\n</tr>\n<tr>\n<td>command &gt;&gt; file</td>\n<td>append standard output to a file</td>\n</tr>\n<tr>\n<td>command &lt; file</td>\n<td>redirect standard input from a file</td>\n</tr>\n<tr>\n<td>command1 | command2</td>\n<td>pipe output of command1 to input of command2</td>\n</tr>\n<tr>\n<td>who</td>\n<td>list users currently logged</td>\n</tr>\n</tbody></table>\n<h3 id=\"Tutorial-Five-amp-Six\"><a href=\"#Tutorial-Five-amp-Six\" class=\"headerlink\" title=\"Tutorial Five &amp; Six\"></a>Tutorial Five &amp; Six</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l</span><br><span class=\"line\"></span><br><span class=\"line\">-rwxrw-r-- <span class=\"number\">1</span> ee51ab beng95 <span class=\"number\">2450</span> Sept29 <span class=\"number\">11</span>:<span class=\"number\">52</span> file1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read/write/execute rights in owner/group/everyone</span></span><br><span class=\"line\"><span class=\"comment\">// file_size time file_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">chmod a+x ex <span class=\"comment\">// add permission to execute ex to all</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u</td>\n<td>user</td>\n</tr>\n<tr>\n<td>g</td>\n<td>group</td>\n</tr>\n<tr>\n<td>o</td>\n<td>other</td>\n</tr>\n<tr>\n<td>a</td>\n<td>all</td>\n</tr>\n<tr>\n<td>r</td>\n<td>read</td>\n</tr>\n<tr>\n<td>w</td>\n<td>write and delete</td>\n</tr>\n<tr>\n<td>x</td>\n<td>execute and access directory</td>\n</tr>\n<tr>\n<td>+</td>\n<td>add permission</td>\n</tr>\n<tr>\n<td>-</td>\n<td>take away permission</td>\n</tr>\n</tbody></table>\n<h4 id=\"summary-of-process-control\"><a href=\"#summary-of-process-control\" class=\"headerlink\" title=\"summary of process control\"></a>summary of process control</h4><p>foreground: terminal suspend and wait<br>background: terminal can go on</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ls -lag</td>\n<td>list access rights for all files</td>\n</tr>\n<tr>\n<td>chmod [options] file</td>\n<td>change access rights for named file</td>\n</tr>\n<tr>\n<td>command &amp;</td>\n<td>run command in background</td>\n</tr>\n<tr>\n<td>^C</td>\n<td>kill the job running in the forground</td>\n</tr>\n<tr>\n<td>^Z</td>\n<td>suspend the job running in the foreground</td>\n</tr>\n<tr>\n<td>jobs</td>\n<td>list current jobs</td>\n</tr>\n<tr>\n<td>bg %2</td>\n<td>background the suspended job</td>\n</tr>\n<tr>\n<td>fg %1</td>\n<td>foreground job number 1</td>\n</tr>\n<tr>\n<td>kill %1</td>\n<td>kill job number 1</td>\n</tr>\n<tr>\n<td>ps</td>\n<td>list current processes</td>\n</tr>\n<tr>\n<td>kill 310</td>\n<td>kill process id 310</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df .  <span class=\"comment\">// report space left on the file system</span></span><br><span class=\"line\">ls -lh</span><br><span class=\"line\">gzip</span><br><span class=\"line\">gunzip  <span class=\"comment\">// unzip</span></span><br><span class=\"line\">tar -xvf .tar <span class=\"comment\">// extract</span></span><br><span class=\"line\">diff file1 file2  <span class=\"comment\">// &lt; denotes file1, &gt; denotes file2</span></span><br><span class=\"line\"></span><br><span class=\"line\">history <span class=\"comment\">// terminal history</span></span><br><span class=\"line\">!! <span class=\"comment\">// recall last command</span></span><br><span class=\"line\">!<span class=\"number\">-3</span> <span class=\"comment\">// recall third most recent command</span></span><br><span class=\"line\">!grep <span class=\"comment\">// recall last command starting with grep</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Tutorial-Seven-amp-Eight\"><a href=\"#Tutorial-Seven-amp-Eight\" class=\"headerlink\" title=\"Tutorial Seven &amp; Eight\"></a>Tutorial Seven &amp; Eight</h3><p>Install software:</p>\n<ol>\n<li>Locate and download the source code(which is usually compressed)</li>\n<li>Unpack the source code</li>\n<li>Compile the code(Most difficult)</li>\n<li>Install the resulting executable</li>\n<li>Set paths to the installation directory</li>\n</ol>\n<p><strong>make</strong>:manage large programs and only compiling those parts changed<br><strong>Makefile</strong>: record the related make rules, contains information on how to compile the software.</p>\n<p>Some simplest way to compile a package:</p>\n<ol>\n<li><strong>cd</strong> to the directory containing the packages’ source code.</li>\n<li>Type <strong>./configure</strong> to configure the package for your system</li>\n<li>Type <strong>make</strong> to compile the package</li>\n<li>Optionally, type <strong>make check</strong> to run any self0tests that come with the package.</li>\n<li>Type <strong>make install</strong> to install the programs and any data files and documentation.</li>\n<li>Optionally, type <strong>make clean</strong> to remove the program binaries and object files from the source code directory.</li>\n</ol>\n<h4 id=\"UNIX-variables\"><a href=\"#UNIX-variables\" class=\"headerlink\" title=\"UNIX variables\"></a>UNIX variables</h4><p>two categories: Environment variables, Shell variables<br>Shell variables: apply only to the current instance of shell and set short-term working conditions.<br>Environment variables: system environment with UPPER CASE name</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH <span class=\"comment\">// print system environment</span></span><br><span class=\"line\">set PATH=($PATH ~/new_path/)  <span class=\"comment\">// add path to PATH</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"盐选健康","mathjax":true,"date":"2022-01-21T04:27:57.000Z","_content":"\n### 优雅起床\n\n熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.\n\n如何优雅起床：\n1. 早起一杯温白开\n2. 感受阳光感受风，开窗通风\n3. 刷牙洗鼻如厕\n4. 吃好早餐\n5. 洗臉：干性用冷水，油性用热水\n\n起床三不要：\n1. 不要起床太快，可以先拉伸慢慢活动开\n2. 晨练不要太剧烈，八段锦\n3. 如厕不能太用力，自然而为\n\n避免起床气，其成因：混乱性觉醒，避险本能；不吃早餐危害：肥胖\n\n完美早餐 = 主食 + 蛋白质 + 蔬菜 + 水果\n主食可配粗粮红薯、玉米、红豆、紫米等\n\n### 早高峰养生\n正常脖子需成熟头部的压力约4～5公斤，但低头幅度达45度时，相当于顶着10瓶大可乐，应尽可能减少低头。长期前伸容易导致肌肉疼痛僵硬，久而久之出现劳损和椎间盘突出；影响心血管健康，血循环及脑供氧。莫憋屁尿，憋尿坏处多。\n\n### 对抗久坐\n久坐的坏处：肥胖，腿部血液流速减慢，大量静脉血淤积在小腿，肌肉和韧带等组织过度拉伸的酸胀，使人处于低代谢水平，影响内分泌功能。\n\n解决方法：寻找站立办公的机会，多走动。小水杯，多厕所，绕远路.\n\n正确坐姿：抬头挺胸收腹，目视前方\n\n头部米字操，锻炼颈部后方肌肉\n\n枕头：压缩后一拳大小，别太软要有支撑\n\n改善腰部：桥式，飞燕，平板支撑\n\n### 关于午休\n吃完睡并不会长胖，多吃或者睡完又吃才会。午睡讲究火候，一般10-20恰到好处，起来神清气爽；如果超过一个小时则进入完全睡眠，起来身体很疲惫。\n\n晚上难入睡的伙伴，建议中午攒攒睡意，等到晚上再一口气休息好。\n善用垫枕和U型枕，尽量躺睡，如果不睡觉建议听点音乐作休息，另外善用降噪耳机。\n\n### 关于外卖\n正规店家要求《餐饮服务许可证》和《营业执照》\n远离三种菜：干煸/干锅，“水煮”，炒土豆三鲜等；少油少盐少淀粉。\n油脂单位热量高，而且代谢困难。减少油炸，重油食品，而且大部分吃到的油不新鲜，进入身体代谢严重影响健康。点菜要避免眼大肚小，饿的时候容易点多。更绝的是可以把油先蹭掉再蘸料吃，实现味道与健康的双赢。\n\n爱吃炸鸡的朋友，可以把鸡皮扒开吃，尽量摄入非常油的食品。\n\n针对甜点欲望，可以慢节奏吃+喝水，有效缓解甜品的高热量诱惑。\n另外要打破杜绝浪费的观念，针对不健康的食品应该果断浪费，因为引起的健康问题反而得不偿失！\n\n### 关于晚饭\n正常是规律进食，除非当天中午或者下午吃多了，热量摄入足够了。再就是晚上8～9点入睡的朋友也可不吃，因为睡眠消耗比较小。\n\n晚饭需要注意的是：1.早吃 2.不暴食 \n\n### 关于夜宵\n夜宵的吸引力：1.无聊 2.压力 3.心情不佳\n可以选择牛奶燕麦粥，少放盐\n\n### 关于熬夜\n危害多，长期的睡眠不足比急性通宵的影响更大；严重影响身体机能，免疫力以及反映力等。\n\n熬夜的主要原因：追剧，小说，游戏。一线普遍12点后睡，日均7.8小时。\n只要生活规律，睡眠质量高，一觉醒来活力四射，元气满满，那么这样的作息就是适合你的。\n\n### 延缓衰老\n25岁后，人的衰老主要是基础代谢下降，预防衰老第一步是维持高水平的代谢率。皮肤衰老首要原因是紫外线，注意防晒。有光就有太阳，有太阳就有紫外线，有紫外线就会变老。\n\n#### 饮食\n主要方法：1.低油低糖不过饱，过度进食容易消化不良，影响肠胃正常运作 2.均衡饮食，三餐规律。\n\n多摄入牛奶，酸奶和豆腐，高钙能缓解衰老。铁和锌，维生素ABCD等族群，起到意想不到的作用。\n\n多摄入粗粮，粗粮最大的优点是带来饱腹感，膳食纤维能与脂肪和胆固醇结合，预防高血脂和脂肪肝等病。\n\n减少多糖，糖基化是糖和蛋白质结合，使其失去正常的结构和颜色。\n\n#### 快乐\n`傻人有傻福`，生活已经很苦，不要再给自己太大的压力，学会和自己和解，保持良好心情。长期高压下，导致失眠，毛孔粗大，脱发，皮肤暗沉等问题。试着让自己每天都快乐，接受和享受快乐。\n\n#### 运动\n动起来，每天半小时的健身锻炼，让你的生理状态和精神面貌都年轻；长久不锻炼，肌肉会退化，人的反映也会变缓。\n\n### 关于零食\n每天一小包坚果是可行，但注意油炸和蟹黄等。可以考虑燕麦制品的零食，至于糖果巧克力则是甜蜜的负担，心情不好时可以来一下。最后果脯果干不能当水果吃，选择钠含量不超标的食物。辣条含钠量太高，基本卫生也无法保证，还是别吃了。同时也要减少吃冰制品。方便面垃圾不在于其他，只在于热量高，含盐量高，蛋白质和膳食纤维不足。尽量进食新鲜食材，而非加工制品。\n\n`胖子不是一口吃成的，你摄入的每一份糖和油脂都不是无辜的。`\n\n### 生活中的建议\n- 好好吃每一顿正餐，减少时长产生的饥饿感\n- 保持学习和工作环境的清爽，不把零食放到容易看见的地方，人的意志很容易动摇，不要自己给自己设置考验\n- 多喝水，有时你感觉饿了并不一定是身体真的缺少能量，也可能是缺水了，试试站起来倒杯水，补充水分，转移注意力，有时候就能骗过大脑\n- 买小包装或者分装，拆开一大包容易全部吃完\n- 定时摄入，稍微补充，而不是随时随地补充能量\n- 千万不要一边看剧综艺一边零食，否则根本想象不到自己吃了多少\n总之进食要注意糖、脂肪、热量、钠和蛋白质，尽量选低糖、低热量、低钠、高蛋白的食物，用全麦面包和燕麦来饱腹吧～\n\n### 关于饮料\n提神饮料可选茶叶，茶本身比较健康，无糖无脂低热量。咖啡可选美式，名字越好听越可能是健康陷阱。平时午饭后，可来一杯咖啡，小憩15-20分钟，即可在午后华丽转身。能量饮料中含有大量糖，而且咖啡因不能摄入过量，最多依赖茶叶，尽量不依赖功能饮料。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/盐选健康.md","raw":"---\ntitle: 盐选健康\ncategories:\n  - 身体健康\nmathjax: true\ndate: 2022-01-21 12:27:57\ntags: 身体健康\n---\n\n### 优雅起床\n\n熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.\n\n如何优雅起床：\n1. 早起一杯温白开\n2. 感受阳光感受风，开窗通风\n3. 刷牙洗鼻如厕\n4. 吃好早餐\n5. 洗臉：干性用冷水，油性用热水\n\n起床三不要：\n1. 不要起床太快，可以先拉伸慢慢活动开\n2. 晨练不要太剧烈，八段锦\n3. 如厕不能太用力，自然而为\n\n避免起床气，其成因：混乱性觉醒，避险本能；不吃早餐危害：肥胖\n\n完美早餐 = 主食 + 蛋白质 + 蔬菜 + 水果\n主食可配粗粮红薯、玉米、红豆、紫米等\n\n### 早高峰养生\n正常脖子需成熟头部的压力约4～5公斤，但低头幅度达45度时，相当于顶着10瓶大可乐，应尽可能减少低头。长期前伸容易导致肌肉疼痛僵硬，久而久之出现劳损和椎间盘突出；影响心血管健康，血循环及脑供氧。莫憋屁尿，憋尿坏处多。\n\n### 对抗久坐\n久坐的坏处：肥胖，腿部血液流速减慢，大量静脉血淤积在小腿，肌肉和韧带等组织过度拉伸的酸胀，使人处于低代谢水平，影响内分泌功能。\n\n解决方法：寻找站立办公的机会，多走动。小水杯，多厕所，绕远路.\n\n正确坐姿：抬头挺胸收腹，目视前方\n\n头部米字操，锻炼颈部后方肌肉\n\n枕头：压缩后一拳大小，别太软要有支撑\n\n改善腰部：桥式，飞燕，平板支撑\n\n### 关于午休\n吃完睡并不会长胖，多吃或者睡完又吃才会。午睡讲究火候，一般10-20恰到好处，起来神清气爽；如果超过一个小时则进入完全睡眠，起来身体很疲惫。\n\n晚上难入睡的伙伴，建议中午攒攒睡意，等到晚上再一口气休息好。\n善用垫枕和U型枕，尽量躺睡，如果不睡觉建议听点音乐作休息，另外善用降噪耳机。\n\n### 关于外卖\n正规店家要求《餐饮服务许可证》和《营业执照》\n远离三种菜：干煸/干锅，“水煮”，炒土豆三鲜等；少油少盐少淀粉。\n油脂单位热量高，而且代谢困难。减少油炸，重油食品，而且大部分吃到的油不新鲜，进入身体代谢严重影响健康。点菜要避免眼大肚小，饿的时候容易点多。更绝的是可以把油先蹭掉再蘸料吃，实现味道与健康的双赢。\n\n爱吃炸鸡的朋友，可以把鸡皮扒开吃，尽量摄入非常油的食品。\n\n针对甜点欲望，可以慢节奏吃+喝水，有效缓解甜品的高热量诱惑。\n另外要打破杜绝浪费的观念，针对不健康的食品应该果断浪费，因为引起的健康问题反而得不偿失！\n\n### 关于晚饭\n正常是规律进食，除非当天中午或者下午吃多了，热量摄入足够了。再就是晚上8～9点入睡的朋友也可不吃，因为睡眠消耗比较小。\n\n晚饭需要注意的是：1.早吃 2.不暴食 \n\n### 关于夜宵\n夜宵的吸引力：1.无聊 2.压力 3.心情不佳\n可以选择牛奶燕麦粥，少放盐\n\n### 关于熬夜\n危害多，长期的睡眠不足比急性通宵的影响更大；严重影响身体机能，免疫力以及反映力等。\n\n熬夜的主要原因：追剧，小说，游戏。一线普遍12点后睡，日均7.8小时。\n只要生活规律，睡眠质量高，一觉醒来活力四射，元气满满，那么这样的作息就是适合你的。\n\n### 延缓衰老\n25岁后，人的衰老主要是基础代谢下降，预防衰老第一步是维持高水平的代谢率。皮肤衰老首要原因是紫外线，注意防晒。有光就有太阳，有太阳就有紫外线，有紫外线就会变老。\n\n#### 饮食\n主要方法：1.低油低糖不过饱，过度进食容易消化不良，影响肠胃正常运作 2.均衡饮食，三餐规律。\n\n多摄入牛奶，酸奶和豆腐，高钙能缓解衰老。铁和锌，维生素ABCD等族群，起到意想不到的作用。\n\n多摄入粗粮，粗粮最大的优点是带来饱腹感，膳食纤维能与脂肪和胆固醇结合，预防高血脂和脂肪肝等病。\n\n减少多糖，糖基化是糖和蛋白质结合，使其失去正常的结构和颜色。\n\n#### 快乐\n`傻人有傻福`，生活已经很苦，不要再给自己太大的压力，学会和自己和解，保持良好心情。长期高压下，导致失眠，毛孔粗大，脱发，皮肤暗沉等问题。试着让自己每天都快乐，接受和享受快乐。\n\n#### 运动\n动起来，每天半小时的健身锻炼，让你的生理状态和精神面貌都年轻；长久不锻炼，肌肉会退化，人的反映也会变缓。\n\n### 关于零食\n每天一小包坚果是可行，但注意油炸和蟹黄等。可以考虑燕麦制品的零食，至于糖果巧克力则是甜蜜的负担，心情不好时可以来一下。最后果脯果干不能当水果吃，选择钠含量不超标的食物。辣条含钠量太高，基本卫生也无法保证，还是别吃了。同时也要减少吃冰制品。方便面垃圾不在于其他，只在于热量高，含盐量高，蛋白质和膳食纤维不足。尽量进食新鲜食材，而非加工制品。\n\n`胖子不是一口吃成的，你摄入的每一份糖和油脂都不是无辜的。`\n\n### 生活中的建议\n- 好好吃每一顿正餐，减少时长产生的饥饿感\n- 保持学习和工作环境的清爽，不把零食放到容易看见的地方，人的意志很容易动摇，不要自己给自己设置考验\n- 多喝水，有时你感觉饿了并不一定是身体真的缺少能量，也可能是缺水了，试试站起来倒杯水，补充水分，转移注意力，有时候就能骗过大脑\n- 买小包装或者分装，拆开一大包容易全部吃完\n- 定时摄入，稍微补充，而不是随时随地补充能量\n- 千万不要一边看剧综艺一边零食，否则根本想象不到自己吃了多少\n总之进食要注意糖、脂肪、热量、钠和蛋白质，尽量选低糖、低热量、低钠、高蛋白的食物，用全麦面包和燕麦来饱腹吧～\n\n### 关于饮料\n提神饮料可选茶叶，茶本身比较健康，无糖无脂低热量。咖啡可选美式，名字越好听越可能是健康陷阱。平时午饭后，可来一杯咖啡，小憩15-20分钟，即可在午后华丽转身。能量饮料中含有大量糖，而且咖啡因不能摄入过量，最多依赖茶叶，尽量不依赖功能饮料。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"盐选健康","published":1,"updated":"2022-01-24T08:49:02.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgauw000728zdc47q3qz5","content":"<h3 id=\"优雅起床\"><a href=\"#优雅起床\" class=\"headerlink\" title=\"优雅起床\"></a>优雅起床</h3><p>熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.</p>\n<p>如何优雅起床：</p>\n<ol>\n<li>早起一杯温白开</li>\n<li>感受阳光感受风，开窗通风</li>\n<li>刷牙洗鼻如厕</li>\n<li>吃好早餐</li>\n<li>洗臉：干性用冷水，油性用热水</li>\n</ol>\n<p>起床三不要：</p>\n<ol>\n<li>不要起床太快，可以先拉伸慢慢活动开</li>\n<li>晨练不要太剧烈，八段锦</li>\n<li>如厕不能太用力，自然而为</li>\n</ol>\n<p>避免起床气，其成因：混乱性觉醒，避险本能；不吃早餐危害：肥胖</p>\n<p>完美早餐 = 主食 + 蛋白质 + 蔬菜 + 水果<br>主食可配粗粮红薯、玉米、红豆、紫米等</p>\n<h3 id=\"早高峰养生\"><a href=\"#早高峰养生\" class=\"headerlink\" title=\"早高峰养生\"></a>早高峰养生</h3><p>正常脖子需成熟头部的压力约4～5公斤，但低头幅度达45度时，相当于顶着10瓶大可乐，应尽可能减少低头。长期前伸容易导致肌肉疼痛僵硬，久而久之出现劳损和椎间盘突出；影响心血管健康，血循环及脑供氧。莫憋屁尿，憋尿坏处多。</p>\n<h3 id=\"对抗久坐\"><a href=\"#对抗久坐\" class=\"headerlink\" title=\"对抗久坐\"></a>对抗久坐</h3><p>久坐的坏处：肥胖，腿部血液流速减慢，大量静脉血淤积在小腿，肌肉和韧带等组织过度拉伸的酸胀，使人处于低代谢水平，影响内分泌功能。</p>\n<p>解决方法：寻找站立办公的机会，多走动。小水杯，多厕所，绕远路.</p>\n<p>正确坐姿：抬头挺胸收腹，目视前方</p>\n<p>头部米字操，锻炼颈部后方肌肉</p>\n<p>枕头：压缩后一拳大小，别太软要有支撑</p>\n<p>改善腰部：桥式，飞燕，平板支撑</p>\n<h3 id=\"关于午休\"><a href=\"#关于午休\" class=\"headerlink\" title=\"关于午休\"></a>关于午休</h3><p>吃完睡并不会长胖，多吃或者睡完又吃才会。午睡讲究火候，一般10-20恰到好处，起来神清气爽；如果超过一个小时则进入完全睡眠，起来身体很疲惫。</p>\n<p>晚上难入睡的伙伴，建议中午攒攒睡意，等到晚上再一口气休息好。<br>善用垫枕和U型枕，尽量躺睡，如果不睡觉建议听点音乐作休息，另外善用降噪耳机。</p>\n<h3 id=\"关于外卖\"><a href=\"#关于外卖\" class=\"headerlink\" title=\"关于外卖\"></a>关于外卖</h3><p>正规店家要求《餐饮服务许可证》和《营业执照》<br>远离三种菜：干煸/干锅，“水煮”，炒土豆三鲜等；少油少盐少淀粉。<br>油脂单位热量高，而且代谢困难。减少油炸，重油食品，而且大部分吃到的油不新鲜，进入身体代谢严重影响健康。点菜要避免眼大肚小，饿的时候容易点多。更绝的是可以把油先蹭掉再蘸料吃，实现味道与健康的双赢。</p>\n<p>爱吃炸鸡的朋友，可以把鸡皮扒开吃，尽量摄入非常油的食品。</p>\n<p>针对甜点欲望，可以慢节奏吃+喝水，有效缓解甜品的高热量诱惑。<br>另外要打破杜绝浪费的观念，针对不健康的食品应该果断浪费，因为引起的健康问题反而得不偿失！</p>\n<h3 id=\"关于晚饭\"><a href=\"#关于晚饭\" class=\"headerlink\" title=\"关于晚饭\"></a>关于晚饭</h3><p>正常是规律进食，除非当天中午或者下午吃多了，热量摄入足够了。再就是晚上8～9点入睡的朋友也可不吃，因为睡眠消耗比较小。</p>\n<p>晚饭需要注意的是：1.早吃 2.不暴食 </p>\n<h3 id=\"关于夜宵\"><a href=\"#关于夜宵\" class=\"headerlink\" title=\"关于夜宵\"></a>关于夜宵</h3><p>夜宵的吸引力：1.无聊 2.压力 3.心情不佳<br>可以选择牛奶燕麦粥，少放盐</p>\n<h3 id=\"关于熬夜\"><a href=\"#关于熬夜\" class=\"headerlink\" title=\"关于熬夜\"></a>关于熬夜</h3><p>危害多，长期的睡眠不足比急性通宵的影响更大；严重影响身体机能，免疫力以及反映力等。</p>\n<p>熬夜的主要原因：追剧，小说，游戏。一线普遍12点后睡，日均7.8小时。<br>只要生活规律，睡眠质量高，一觉醒来活力四射，元气满满，那么这样的作息就是适合你的。</p>\n<h3 id=\"延缓衰老\"><a href=\"#延缓衰老\" class=\"headerlink\" title=\"延缓衰老\"></a>延缓衰老</h3><p>25岁后，人的衰老主要是基础代谢下降，预防衰老第一步是维持高水平的代谢率。皮肤衰老首要原因是紫外线，注意防晒。有光就有太阳，有太阳就有紫外线，有紫外线就会变老。</p>\n<h4 id=\"饮食\"><a href=\"#饮食\" class=\"headerlink\" title=\"饮食\"></a>饮食</h4><p>主要方法：1.低油低糖不过饱，过度进食容易消化不良，影响肠胃正常运作 2.均衡饮食，三餐规律。</p>\n<p>多摄入牛奶，酸奶和豆腐，高钙能缓解衰老。铁和锌，维生素ABCD等族群，起到意想不到的作用。</p>\n<p>多摄入粗粮，粗粮最大的优点是带来饱腹感，膳食纤维能与脂肪和胆固醇结合，预防高血脂和脂肪肝等病。</p>\n<p>减少多糖，糖基化是糖和蛋白质结合，使其失去正常的结构和颜色。</p>\n<h4 id=\"快乐\"><a href=\"#快乐\" class=\"headerlink\" title=\"快乐\"></a>快乐</h4><p><code>傻人有傻福</code>，生活已经很苦，不要再给自己太大的压力，学会和自己和解，保持良好心情。长期高压下，导致失眠，毛孔粗大，脱发，皮肤暗沉等问题。试着让自己每天都快乐，接受和享受快乐。</p>\n<h4 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h4><p>动起来，每天半小时的健身锻炼，让你的生理状态和精神面貌都年轻；长久不锻炼，肌肉会退化，人的反映也会变缓。</p>\n<h3 id=\"关于零食\"><a href=\"#关于零食\" class=\"headerlink\" title=\"关于零食\"></a>关于零食</h3><p>每天一小包坚果是可行，但注意油炸和蟹黄等。可以考虑燕麦制品的零食，至于糖果巧克力则是甜蜜的负担，心情不好时可以来一下。最后果脯果干不能当水果吃，选择钠含量不超标的食物。辣条含钠量太高，基本卫生也无法保证，还是别吃了。同时也要减少吃冰制品。方便面垃圾不在于其他，只在于热量高，含盐量高，蛋白质和膳食纤维不足。尽量进食新鲜食材，而非加工制品。</p>\n<p><code>胖子不是一口吃成的，你摄入的每一份糖和油脂都不是无辜的。</code></p>\n<h3 id=\"生活中的建议\"><a href=\"#生活中的建议\" class=\"headerlink\" title=\"生活中的建议\"></a>生活中的建议</h3><ul>\n<li>好好吃每一顿正餐，减少时长产生的饥饿感</li>\n<li>保持学习和工作环境的清爽，不把零食放到容易看见的地方，人的意志很容易动摇，不要自己给自己设置考验</li>\n<li>多喝水，有时你感觉饿了并不一定是身体真的缺少能量，也可能是缺水了，试试站起来倒杯水，补充水分，转移注意力，有时候就能骗过大脑</li>\n<li>买小包装或者分装，拆开一大包容易全部吃完</li>\n<li>定时摄入，稍微补充，而不是随时随地补充能量</li>\n<li>千万不要一边看剧综艺一边零食，否则根本想象不到自己吃了多少<br>总之进食要注意糖、脂肪、热量、钠和蛋白质，尽量选低糖、低热量、低钠、高蛋白的食物，用全麦面包和燕麦来饱腹吧～</li>\n</ul>\n<h3 id=\"关于饮料\"><a href=\"#关于饮料\" class=\"headerlink\" title=\"关于饮料\"></a>关于饮料</h3><p>提神饮料可选茶叶，茶本身比较健康，无糖无脂低热量。咖啡可选美式，名字越好听越可能是健康陷阱。平时午饭后，可来一杯咖啡，小憩15-20分钟，即可在午后华丽转身。能量饮料中含有大量糖，而且咖啡因不能摄入过量，最多依赖茶叶，尽量不依赖功能饮料。</p>\n","site":{"data":{}},"length":2112,"excerpt":"","more":"<h3 id=\"优雅起床\"><a href=\"#优雅起床\" class=\"headerlink\" title=\"优雅起床\"></a>优雅起床</h3><p>熬夜:睡眠不规律,睡眠不足以及整夜不睡.而非指定睡觉时间,当然中医养生的角度应该是需要早睡早起,早上练功升阳.</p>\n<p>如何优雅起床：</p>\n<ol>\n<li>早起一杯温白开</li>\n<li>感受阳光感受风，开窗通风</li>\n<li>刷牙洗鼻如厕</li>\n<li>吃好早餐</li>\n<li>洗臉：干性用冷水，油性用热水</li>\n</ol>\n<p>起床三不要：</p>\n<ol>\n<li>不要起床太快，可以先拉伸慢慢活动开</li>\n<li>晨练不要太剧烈，八段锦</li>\n<li>如厕不能太用力，自然而为</li>\n</ol>\n<p>避免起床气，其成因：混乱性觉醒，避险本能；不吃早餐危害：肥胖</p>\n<p>完美早餐 = 主食 + 蛋白质 + 蔬菜 + 水果<br>主食可配粗粮红薯、玉米、红豆、紫米等</p>\n<h3 id=\"早高峰养生\"><a href=\"#早高峰养生\" class=\"headerlink\" title=\"早高峰养生\"></a>早高峰养生</h3><p>正常脖子需成熟头部的压力约4～5公斤，但低头幅度达45度时，相当于顶着10瓶大可乐，应尽可能减少低头。长期前伸容易导致肌肉疼痛僵硬，久而久之出现劳损和椎间盘突出；影响心血管健康，血循环及脑供氧。莫憋屁尿，憋尿坏处多。</p>\n<h3 id=\"对抗久坐\"><a href=\"#对抗久坐\" class=\"headerlink\" title=\"对抗久坐\"></a>对抗久坐</h3><p>久坐的坏处：肥胖，腿部血液流速减慢，大量静脉血淤积在小腿，肌肉和韧带等组织过度拉伸的酸胀，使人处于低代谢水平，影响内分泌功能。</p>\n<p>解决方法：寻找站立办公的机会，多走动。小水杯，多厕所，绕远路.</p>\n<p>正确坐姿：抬头挺胸收腹，目视前方</p>\n<p>头部米字操，锻炼颈部后方肌肉</p>\n<p>枕头：压缩后一拳大小，别太软要有支撑</p>\n<p>改善腰部：桥式，飞燕，平板支撑</p>\n<h3 id=\"关于午休\"><a href=\"#关于午休\" class=\"headerlink\" title=\"关于午休\"></a>关于午休</h3><p>吃完睡并不会长胖，多吃或者睡完又吃才会。午睡讲究火候，一般10-20恰到好处，起来神清气爽；如果超过一个小时则进入完全睡眠，起来身体很疲惫。</p>\n<p>晚上难入睡的伙伴，建议中午攒攒睡意，等到晚上再一口气休息好。<br>善用垫枕和U型枕，尽量躺睡，如果不睡觉建议听点音乐作休息，另外善用降噪耳机。</p>\n<h3 id=\"关于外卖\"><a href=\"#关于外卖\" class=\"headerlink\" title=\"关于外卖\"></a>关于外卖</h3><p>正规店家要求《餐饮服务许可证》和《营业执照》<br>远离三种菜：干煸/干锅，“水煮”，炒土豆三鲜等；少油少盐少淀粉。<br>油脂单位热量高，而且代谢困难。减少油炸，重油食品，而且大部分吃到的油不新鲜，进入身体代谢严重影响健康。点菜要避免眼大肚小，饿的时候容易点多。更绝的是可以把油先蹭掉再蘸料吃，实现味道与健康的双赢。</p>\n<p>爱吃炸鸡的朋友，可以把鸡皮扒开吃，尽量摄入非常油的食品。</p>\n<p>针对甜点欲望，可以慢节奏吃+喝水，有效缓解甜品的高热量诱惑。<br>另外要打破杜绝浪费的观念，针对不健康的食品应该果断浪费，因为引起的健康问题反而得不偿失！</p>\n<h3 id=\"关于晚饭\"><a href=\"#关于晚饭\" class=\"headerlink\" title=\"关于晚饭\"></a>关于晚饭</h3><p>正常是规律进食，除非当天中午或者下午吃多了，热量摄入足够了。再就是晚上8～9点入睡的朋友也可不吃，因为睡眠消耗比较小。</p>\n<p>晚饭需要注意的是：1.早吃 2.不暴食 </p>\n<h3 id=\"关于夜宵\"><a href=\"#关于夜宵\" class=\"headerlink\" title=\"关于夜宵\"></a>关于夜宵</h3><p>夜宵的吸引力：1.无聊 2.压力 3.心情不佳<br>可以选择牛奶燕麦粥，少放盐</p>\n<h3 id=\"关于熬夜\"><a href=\"#关于熬夜\" class=\"headerlink\" title=\"关于熬夜\"></a>关于熬夜</h3><p>危害多，长期的睡眠不足比急性通宵的影响更大；严重影响身体机能，免疫力以及反映力等。</p>\n<p>熬夜的主要原因：追剧，小说，游戏。一线普遍12点后睡，日均7.8小时。<br>只要生活规律，睡眠质量高，一觉醒来活力四射，元气满满，那么这样的作息就是适合你的。</p>\n<h3 id=\"延缓衰老\"><a href=\"#延缓衰老\" class=\"headerlink\" title=\"延缓衰老\"></a>延缓衰老</h3><p>25岁后，人的衰老主要是基础代谢下降，预防衰老第一步是维持高水平的代谢率。皮肤衰老首要原因是紫外线，注意防晒。有光就有太阳，有太阳就有紫外线，有紫外线就会变老。</p>\n<h4 id=\"饮食\"><a href=\"#饮食\" class=\"headerlink\" title=\"饮食\"></a>饮食</h4><p>主要方法：1.低油低糖不过饱，过度进食容易消化不良，影响肠胃正常运作 2.均衡饮食，三餐规律。</p>\n<p>多摄入牛奶，酸奶和豆腐，高钙能缓解衰老。铁和锌，维生素ABCD等族群，起到意想不到的作用。</p>\n<p>多摄入粗粮，粗粮最大的优点是带来饱腹感，膳食纤维能与脂肪和胆固醇结合，预防高血脂和脂肪肝等病。</p>\n<p>减少多糖，糖基化是糖和蛋白质结合，使其失去正常的结构和颜色。</p>\n<h4 id=\"快乐\"><a href=\"#快乐\" class=\"headerlink\" title=\"快乐\"></a>快乐</h4><p><code>傻人有傻福</code>，生活已经很苦，不要再给自己太大的压力，学会和自己和解，保持良好心情。长期高压下，导致失眠，毛孔粗大，脱发，皮肤暗沉等问题。试着让自己每天都快乐，接受和享受快乐。</p>\n<h4 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h4><p>动起来，每天半小时的健身锻炼，让你的生理状态和精神面貌都年轻；长久不锻炼，肌肉会退化，人的反映也会变缓。</p>\n<h3 id=\"关于零食\"><a href=\"#关于零食\" class=\"headerlink\" title=\"关于零食\"></a>关于零食</h3><p>每天一小包坚果是可行，但注意油炸和蟹黄等。可以考虑燕麦制品的零食，至于糖果巧克力则是甜蜜的负担，心情不好时可以来一下。最后果脯果干不能当水果吃，选择钠含量不超标的食物。辣条含钠量太高，基本卫生也无法保证，还是别吃了。同时也要减少吃冰制品。方便面垃圾不在于其他，只在于热量高，含盐量高，蛋白质和膳食纤维不足。尽量进食新鲜食材，而非加工制品。</p>\n<p><code>胖子不是一口吃成的，你摄入的每一份糖和油脂都不是无辜的。</code></p>\n<h3 id=\"生活中的建议\"><a href=\"#生活中的建议\" class=\"headerlink\" title=\"生活中的建议\"></a>生活中的建议</h3><ul>\n<li>好好吃每一顿正餐，减少时长产生的饥饿感</li>\n<li>保持学习和工作环境的清爽，不把零食放到容易看见的地方，人的意志很容易动摇，不要自己给自己设置考验</li>\n<li>多喝水，有时你感觉饿了并不一定是身体真的缺少能量，也可能是缺水了，试试站起来倒杯水，补充水分，转移注意力，有时候就能骗过大脑</li>\n<li>买小包装或者分装，拆开一大包容易全部吃完</li>\n<li>定时摄入，稍微补充，而不是随时随地补充能量</li>\n<li>千万不要一边看剧综艺一边零食，否则根本想象不到自己吃了多少<br>总之进食要注意糖、脂肪、热量、钠和蛋白质，尽量选低糖、低热量、低钠、高蛋白的食物，用全麦面包和燕麦来饱腹吧～</li>\n</ul>\n<h3 id=\"关于饮料\"><a href=\"#关于饮料\" class=\"headerlink\" title=\"关于饮料\"></a>关于饮料</h3><p>提神饮料可选茶叶，茶本身比较健康，无糖无脂低热量。咖啡可选美式，名字越好听越可能是健康陷阱。平时午饭后，可来一杯咖啡，小憩15-20分钟，即可在午后华丽转身。能量饮料中含有大量糖，而且咖啡因不能摄入过量，最多依赖茶叶，尽量不依赖功能饮料。</p>\n"},{"title":"c++并发实战","mathjax":true,"date":"2021-12-28T02:48:17.000Z","_content":"\n### chap1 c++并发世界\nC++98的13年后，2011的C++11成为新的规范，同时确认了每三年发布新的扩展技术规范。\n在C++11中，c++ standard第一次承认多线程存在于C++语言中，意味CPP编写与平台无关的多线程程序成为可能。以往编写多线程并发需要针对运行平台部署依赖扩展库，如今可移植性成为可能。\n\n`何谓并发和多线程？`  \n单核的并发存在切换上下文的不必要损耗。\n多线程：一个进程下，多个小单元共用数据资源，单机并发较常用，实际上CPP支持的是多线程。\n多进程：开辟多个共用数据资源，多个进程并行，占用大量资源，通讯成本加大，适用于多机。\n\n并行：关注性能； 并发：关注任务分离；\n\n`为什么要并发?`  \n1. 关注分离：将相关代码与无关代码分离，使得程序更容易理解和测试。\n2. 关注性能：将任务并行以及可以将数据并行\n不使用并发的原因：收益比不上成本，一方面脑力以及代码维护成本，一方面是线程资源。尤其32位地址的架构，\n对于4G(32bit)的架构，每个线程占用1MB，那么开4096个就用尽所有地址，运行太多会出问题。对于现用的板子有1GB的内存可用。对于现用的64位PC，开一个线程ulimit -s可知为8MB;ulimit -u可以看当前可开多少个线程上限，64GB可开约26万个上限。\n由于多线程使代码复杂且难以理解，只有显著提升性能才值得一干。\n\n### chap2 线程管理\n- 线程启动：std::thread对象用函数或者类初始化的同时，开始自动启动线程。\n- 线程等待与分离：join为等待线程执行完成；detach则让线程分离自主执行，此时访问已销毁的变量会引起错误。如果线程已使用过join,则不可再次join。joinable()返回false。\n解决方法：将数据复制到线程中，可以总结用一个访问局部变量的函数创建线程是危险行为。\n- 分离线程：通常又称守护线程，没有任何显式的用户接口并在后台运行的线程，通常长时间运行。\n- 转移线程： thread2 = std::move(thread1);若thread2已有线程，则系统直接调用terminate结束错误。\n\n","source":"_posts/cpp/c-并发实战.md","raw":"---\ntitle: c++并发实战\nmathjax: true\ndate: 2021-12-28 10:48:17\ntags: c++ 多线程 并发\ncategories:\n- c++\n---\n\n### chap1 c++并发世界\nC++98的13年后，2011的C++11成为新的规范，同时确认了每三年发布新的扩展技术规范。\n在C++11中，c++ standard第一次承认多线程存在于C++语言中，意味CPP编写与平台无关的多线程程序成为可能。以往编写多线程并发需要针对运行平台部署依赖扩展库，如今可移植性成为可能。\n\n`何谓并发和多线程？`  \n单核的并发存在切换上下文的不必要损耗。\n多线程：一个进程下，多个小单元共用数据资源，单机并发较常用，实际上CPP支持的是多线程。\n多进程：开辟多个共用数据资源，多个进程并行，占用大量资源，通讯成本加大，适用于多机。\n\n并行：关注性能； 并发：关注任务分离；\n\n`为什么要并发?`  \n1. 关注分离：将相关代码与无关代码分离，使得程序更容易理解和测试。\n2. 关注性能：将任务并行以及可以将数据并行\n不使用并发的原因：收益比不上成本，一方面脑力以及代码维护成本，一方面是线程资源。尤其32位地址的架构，\n对于4G(32bit)的架构，每个线程占用1MB，那么开4096个就用尽所有地址，运行太多会出问题。对于现用的板子有1GB的内存可用。对于现用的64位PC，开一个线程ulimit -s可知为8MB;ulimit -u可以看当前可开多少个线程上限，64GB可开约26万个上限。\n由于多线程使代码复杂且难以理解，只有显著提升性能才值得一干。\n\n### chap2 线程管理\n- 线程启动：std::thread对象用函数或者类初始化的同时，开始自动启动线程。\n- 线程等待与分离：join为等待线程执行完成；detach则让线程分离自主执行，此时访问已销毁的变量会引起错误。如果线程已使用过join,则不可再次join。joinable()返回false。\n解决方法：将数据复制到线程中，可以总结用一个访问局部变量的函数创建线程是危险行为。\n- 分离线程：通常又称守护线程，没有任何显式的用户接口并在后台运行的线程，通常长时间运行。\n- 转移线程： thread2 = std::move(thread1);若thread2已有线程，则系统直接调用terminate结束错误。\n\n","slug":"cpp/c-并发实战","published":1,"updated":"2022-01-05T06:25:34.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgauy000928zdging0cqw","content":"<h3 id=\"chap1-c-并发世界\"><a href=\"#chap1-c-并发世界\" class=\"headerlink\" title=\"chap1 c++并发世界\"></a>chap1 c++并发世界</h3><p>C++98的13年后，2011的C++11成为新的规范，同时确认了每三年发布新的扩展技术规范。<br>在C++11中，c++ standard第一次承认多线程存在于C++语言中，意味CPP编写与平台无关的多线程程序成为可能。以往编写多线程并发需要针对运行平台部署依赖扩展库，如今可移植性成为可能。</p>\n<p><code>何谓并发和多线程？</code><br>单核的并发存在切换上下文的不必要损耗。<br>多线程：一个进程下，多个小单元共用数据资源，单机并发较常用，实际上CPP支持的是多线程。<br>多进程：开辟多个共用数据资源，多个进程并行，占用大量资源，通讯成本加大，适用于多机。</p>\n<p>并行：关注性能； 并发：关注任务分离；</p>\n<p><code>为什么要并发?</code>  </p>\n<ol>\n<li>关注分离：将相关代码与无关代码分离，使得程序更容易理解和测试。</li>\n<li>关注性能：将任务并行以及可以将数据并行<br>不使用并发的原因：收益比不上成本，一方面脑力以及代码维护成本，一方面是线程资源。尤其32位地址的架构，<br>对于4G(32bit)的架构，每个线程占用1MB，那么开4096个就用尽所有地址，运行太多会出问题。对于现用的板子有1GB的内存可用。对于现用的64位PC，开一个线程ulimit -s可知为8MB;ulimit -u可以看当前可开多少个线程上限，64GB可开约26万个上限。<br>由于多线程使代码复杂且难以理解，只有显著提升性能才值得一干。</li>\n</ol>\n<h3 id=\"chap2-线程管理\"><a href=\"#chap2-线程管理\" class=\"headerlink\" title=\"chap2 线程管理\"></a>chap2 线程管理</h3><ul>\n<li>线程启动：std::thread对象用函数或者类初始化的同时，开始自动启动线程。</li>\n<li>线程等待与分离：join为等待线程执行完成；detach则让线程分离自主执行，此时访问已销毁的变量会引起错误。如果线程已使用过join,则不可再次join。joinable()返回false。<br>解决方法：将数据复制到线程中，可以总结用一个访问局部变量的函数创建线程是危险行为。</li>\n<li>分离线程：通常又称守护线程，没有任何显式的用户接口并在后台运行的线程，通常长时间运行。</li>\n<li>转移线程： thread2 = std::move(thread1);若thread2已有线程，则系统直接调用terminate结束错误。</li>\n</ul>\n","site":{"data":{}},"length":855,"excerpt":"","more":"<h3 id=\"chap1-c-并发世界\"><a href=\"#chap1-c-并发世界\" class=\"headerlink\" title=\"chap1 c++并发世界\"></a>chap1 c++并发世界</h3><p>C++98的13年后，2011的C++11成为新的规范，同时确认了每三年发布新的扩展技术规范。<br>在C++11中，c++ standard第一次承认多线程存在于C++语言中，意味CPP编写与平台无关的多线程程序成为可能。以往编写多线程并发需要针对运行平台部署依赖扩展库，如今可移植性成为可能。</p>\n<p><code>何谓并发和多线程？</code><br>单核的并发存在切换上下文的不必要损耗。<br>多线程：一个进程下，多个小单元共用数据资源，单机并发较常用，实际上CPP支持的是多线程。<br>多进程：开辟多个共用数据资源，多个进程并行，占用大量资源，通讯成本加大，适用于多机。</p>\n<p>并行：关注性能； 并发：关注任务分离；</p>\n<p><code>为什么要并发?</code>  </p>\n<ol>\n<li>关注分离：将相关代码与无关代码分离，使得程序更容易理解和测试。</li>\n<li>关注性能：将任务并行以及可以将数据并行<br>不使用并发的原因：收益比不上成本，一方面脑力以及代码维护成本，一方面是线程资源。尤其32位地址的架构，<br>对于4G(32bit)的架构，每个线程占用1MB，那么开4096个就用尽所有地址，运行太多会出问题。对于现用的板子有1GB的内存可用。对于现用的64位PC，开一个线程ulimit -s可知为8MB;ulimit -u可以看当前可开多少个线程上限，64GB可开约26万个上限。<br>由于多线程使代码复杂且难以理解，只有显著提升性能才值得一干。</li>\n</ol>\n<h3 id=\"chap2-线程管理\"><a href=\"#chap2-线程管理\" class=\"headerlink\" title=\"chap2 线程管理\"></a>chap2 线程管理</h3><ul>\n<li>线程启动：std::thread对象用函数或者类初始化的同时，开始自动启动线程。</li>\n<li>线程等待与分离：join为等待线程执行完成；detach则让线程分离自主执行，此时访问已销毁的变量会引起错误。如果线程已使用过join,则不可再次join。joinable()返回false。<br>解决方法：将数据复制到线程中，可以总结用一个访问局部变量的函数创建线程是危险行为。</li>\n<li>分离线程：通常又称守护线程，没有任何显式的用户接口并在后台运行的线程，通常长时间运行。</li>\n<li>转移线程： thread2 = std::move(thread1);若thread2已有线程，则系统直接调用terminate结束错误。</li>\n</ul>\n"},{"title":"chrono库","mathjax":true,"date":"2021-12-29T08:09:34.000Z","_content":"计时，常用于测试代码的运行时间和效率。\n\n### 以往用法ctime\n\n``` cpp\n#include <ctime>\nusing namespace std;\n\nclock_t start = clock();\nfunc();\nclock_t end = clock();\ncout << \"spend \" << (double)(end-start)/CLOCKS_PER_SEC <<\" second\" << endl;  // 精确到毫秒\n```\n\n\n### chrono用法\n``` cpp\n#include <chrono>\nusing namespace std;\nusing namespace chrono;\n\nauto start = system_clock::now();\nfunc();\nauto end = system_clock::now();\nauto duration = duration_cast<microseconds>(end-start);\ncout <<\"spend \" << double(duration.count()) * microseconds::period::num / microseconds::period::den << \" second\" << endl;\n\n```\n其中，auto为自动类型；除了system_clock,还可用steady_clock和high_resolution_clock; microseconds表示微妙，甚至还有nanoseconds纳秒；num和den表示计时单位的分子和分母。\n","source":"_posts/cpp/chrono库.md","raw":"---\ntitle: chrono库\ncategories:\n  - c++\nmathjax: true\ndate: 2021-12-29 16:09:34\ntags: c++\n---\n计时，常用于测试代码的运行时间和效率。\n\n### 以往用法ctime\n\n``` cpp\n#include <ctime>\nusing namespace std;\n\nclock_t start = clock();\nfunc();\nclock_t end = clock();\ncout << \"spend \" << (double)(end-start)/CLOCKS_PER_SEC <<\" second\" << endl;  // 精确到毫秒\n```\n\n\n### chrono用法\n``` cpp\n#include <chrono>\nusing namespace std;\nusing namespace chrono;\n\nauto start = system_clock::now();\nfunc();\nauto end = system_clock::now();\nauto duration = duration_cast<microseconds>(end-start);\ncout <<\"spend \" << double(duration.count()) * microseconds::period::num / microseconds::period::den << \" second\" << endl;\n\n```\n其中，auto为自动类型；除了system_clock,还可用steady_clock和high_resolution_clock; microseconds表示微妙，甚至还有nanoseconds纳秒；num和den表示计时单位的分子和分母。\n","slug":"cpp/chrono库","published":1,"updated":"2022-01-05T06:25:34.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgauz000d28zddlil2np5","content":"<p>计时，常用于测试代码的运行时间和效率。</p>\n<h3 id=\"以往用法ctime\"><a href=\"#以往用法ctime\" class=\"headerlink\" title=\"以往用法ctime\"></a>以往用法ctime</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">clock_t</span> start = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\"><span class=\"built_in\">func</span>();</span><br><span class=\"line\"><span class=\"keyword\">clock_t</span> end = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;spend &quot;</span> &lt;&lt; (<span class=\"keyword\">double</span>)(end-start)/CLOCKS_PER_SEC &lt;&lt;<span class=\"string\">&quot; second&quot;</span> &lt;&lt; endl;  <span class=\"comment\">// 精确到毫秒</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"chrono用法\"><a href=\"#chrono用法\" class=\"headerlink\" title=\"chrono用法\"></a>chrono用法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> start = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"built_in\">func</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> end = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end-start);</span><br><span class=\"line\">cout &lt;&lt;<span class=\"string\">&quot;spend &quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">double</span></span>(duration.<span class=\"built_in\">count</span>()) * microseconds::period::num / microseconds::period::den &lt;&lt; <span class=\"string\">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其中，auto为自动类型；除了system_clock,还可用steady_clock和high_resolution_clock; microseconds表示微妙，甚至还有nanoseconds纳秒；num和den表示计时单位的分子和分母。</p>\n","site":{"data":{}},"length":714,"excerpt":"","more":"<p>计时，常用于测试代码的运行时间和效率。</p>\n<h3 id=\"以往用法ctime\"><a href=\"#以往用法ctime\" class=\"headerlink\" title=\"以往用法ctime\"></a>以往用法ctime</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">clock_t</span> start = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\"><span class=\"built_in\">func</span>();</span><br><span class=\"line\"><span class=\"keyword\">clock_t</span> end = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;spend &quot;</span> &lt;&lt; (<span class=\"keyword\">double</span>)(end-start)/CLOCKS_PER_SEC &lt;&lt;<span class=\"string\">&quot; second&quot;</span> &lt;&lt; endl;  <span class=\"comment\">// 精确到毫秒</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"chrono用法\"><a href=\"#chrono用法\" class=\"headerlink\" title=\"chrono用法\"></a>chrono用法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> start = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"built_in\">func</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> end = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> duration = duration_cast&lt;microseconds&gt;(end-start);</span><br><span class=\"line\">cout &lt;&lt;<span class=\"string\">&quot;spend &quot;</span> &lt;&lt; <span class=\"built_in\"><span class=\"keyword\">double</span></span>(duration.<span class=\"built_in\">count</span>()) * microseconds::period::num / microseconds::period::den &lt;&lt; <span class=\"string\">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其中，auto为自动类型；除了system_clock,还可用steady_clock和high_resolution_clock; microseconds表示微妙，甚至还有nanoseconds纳秒；num和den表示计时单位的分子和分母。</p>\n"},{"title":"cpp生成代码及数据类型","date":"2021-12-14T02:58:56.000Z","_content":"\nc++基本数据类型主要有*bool, char, int, float, double*。具体如下：\n\n![basic data structure](/images/12_14_2.png)\n![basic data structure2](/images/12_14_3.png)\n\n另外，C++**生成代码的过程**是：1.程序员编写源代码 2.编译器正确翻译C++为目标代码 3.链接器将环境启动的代码以及引入库的代码与目标代码正确链接 4.最后才输出机器认识的可执行代码\n![code procedure](/images/12_14_1.png)\n\n整型提升(integral promotion): 计算表达式时，bool, char, unsigned char, signed char short会转换为int，即int为计算机最自然的类型，也是运算速度可能最快的。较小与较大运算也可能提升。\n\n\n","source":"_posts/cpp/cpp数据类型.md","raw":"---\ntitle: cpp生成代码及数据类型\ndate: 2021-12-14 10:58:56\ntags: c++ primer\ncategories:\n- c++\n---\n\nc++基本数据类型主要有*bool, char, int, float, double*。具体如下：\n\n![basic data structure](/images/12_14_2.png)\n![basic data structure2](/images/12_14_3.png)\n\n另外，C++**生成代码的过程**是：1.程序员编写源代码 2.编译器正确翻译C++为目标代码 3.链接器将环境启动的代码以及引入库的代码与目标代码正确链接 4.最后才输出机器认识的可执行代码\n![code procedure](/images/12_14_1.png)\n\n整型提升(integral promotion): 计算表达式时，bool, char, unsigned char, signed char short会转换为int，即int为计算机最自然的类型，也是运算速度可能最快的。较小与较大运算也可能提升。\n\n\n","slug":"cpp/cpp数据类型","published":1,"updated":"2022-01-05T06:25:34.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav0000e28zdavgtdiz9","content":"<p>c++基本数据类型主要有<em>bool, char, int, float, double</em>。具体如下：</p>\n<p><img src=\"/images/12_14_2.png\" alt=\"basic data structure\"><br><img src=\"/images/12_14_3.png\" alt=\"basic data structure2\"></p>\n<p>另外，C++<strong>生成代码的过程</strong>是：1.程序员编写源代码 2.编译器正确翻译C++为目标代码 3.链接器将环境启动的代码以及引入库的代码与目标代码正确链接 4.最后才输出机器认识的可执行代码<br><img src=\"/images/12_14_1.png\" alt=\"code procedure\"></p>\n<p>整型提升(integral promotion): 计算表达式时，bool, char, unsigned char, signed char short会转换为int，即int为计算机最自然的类型，也是运算速度可能最快的。较小与较大运算也可能提升。</p>\n","site":{"data":{}},"length":250,"excerpt":"","more":"<p>c++基本数据类型主要有<em>bool, char, int, float, double</em>。具体如下：</p>\n<p><img src=\"/images/12_14_2.png\" alt=\"basic data structure\"><br><img src=\"/images/12_14_3.png\" alt=\"basic data structure2\"></p>\n<p>另外，C++<strong>生成代码的过程</strong>是：1.程序员编写源代码 2.编译器正确翻译C++为目标代码 3.链接器将环境启动的代码以及引入库的代码与目标代码正确链接 4.最后才输出机器认识的可执行代码<br><img src=\"/images/12_14_1.png\" alt=\"code procedure\"></p>\n<p>整型提升(integral promotion): 计算表达式时，bool, char, unsigned char, signed char short会转换为int，即int为计算机最自然的类型，也是运算速度可能最快的。较小与较大运算也可能提升。</p>\n"},{"title":"代码重用","mathjax":true,"date":"2022-01-26T02:01:07.000Z","_content":"\n### 类的复用\n上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.私有继承包含\n大多数人会倾向于使用包含，一方面方便理解，另一方面多重继承容易引起问题；私有继承主要区别在于私有成员变成了继承而来的无名成员，调用成员时依赖this的类型转换。\n\n### 多重继承\nMI会带来许多新问题：1.两个基类的同名方法； 2.多个相关基类继承同一个类的多个实例问题；为此大家对MI有喜忧参半不同的态度。\n\n祖先相同时，要用虚基类解决 class Singer:virtual public Worker，虚拟继承。禁止正常的信息再中间类自动传递。\n\nMI中间隐含较多问题，尽量减少使用，要么就不用。\n\n### 类模板\n模板主要作用是提供参数化类型，将类型关键名作为参数传递给模板类或函数，从而实现最大程度代码复用。\n\n模板类型使用指针时，代码实现上也得调整，所以一般减少依赖指针模板使用，尽量时bool,char,int,double,string，及一般对象等。\n\n为容器类提供可重用代码是引入模板的主要动机。非类型参数可以是int,枚举，引用或指针，因此double m 不合法，但double *m是合法的。\n\n模板多功能性，可用于基类，组件类以及其他模板的类型参数。\n\n``` cpp\ntemplate <class T>\nclass ARray\n{\n  private:\n    T entry;\n    ...\n};\n\ntemplate <class Type>\nclass GrowArray:public Array<Type> {...}; // inheritance\n\ntemplate <calss Tp>\nclass Stack\n{\n  Array<Tp> ar;    // use an Array<> as a component\n  ...\n};\n\n// need a blank between > >, show differ from >> operator\nArray < Stack<int> > asi; // an array of stacks of int\n\n// 模板也可传参\ntemplate<class T, int n>\nArrayTP<T, n>::ArrayTP(const T & v)\n{\n  for(int i=0;i<n;i++>)\n    ar[i] = v;\n}\n\n// 显示具体化，用于专用定义，优先匹配\ntemplate<> class Ic<char *>\n{\n  private:\n  public:\n};\n```\n\n模板参数类似函数参数，带有隐式显式转换及参数匹配规则。\n\n\n### 友元类\n两个类关系既不是is-a也不是has-a，但存在控制的关系如电视和遥控。则可以定义遥控为电视的友元类，能够合理范围内修改电视的私有和保护的部分。相当于友元类需要直到朋友类的数据细节乃至实现细节。\n\n\n\n\n\n\n\n\n","source":"_posts/cpp/代码重用.md","raw":"---\ntitle: 代码重用\ncategories:\n  - c++\nmathjax: true\ndate: 2022-01-26 10:01:07\ntags: c++\n---\n\n### 类的复用\n上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.私有继承包含\n大多数人会倾向于使用包含，一方面方便理解，另一方面多重继承容易引起问题；私有继承主要区别在于私有成员变成了继承而来的无名成员，调用成员时依赖this的类型转换。\n\n### 多重继承\nMI会带来许多新问题：1.两个基类的同名方法； 2.多个相关基类继承同一个类的多个实例问题；为此大家对MI有喜忧参半不同的态度。\n\n祖先相同时，要用虚基类解决 class Singer:virtual public Worker，虚拟继承。禁止正常的信息再中间类自动传递。\n\nMI中间隐含较多问题，尽量减少使用，要么就不用。\n\n### 类模板\n模板主要作用是提供参数化类型，将类型关键名作为参数传递给模板类或函数，从而实现最大程度代码复用。\n\n模板类型使用指针时，代码实现上也得调整，所以一般减少依赖指针模板使用，尽量时bool,char,int,double,string，及一般对象等。\n\n为容器类提供可重用代码是引入模板的主要动机。非类型参数可以是int,枚举，引用或指针，因此double m 不合法，但double *m是合法的。\n\n模板多功能性，可用于基类，组件类以及其他模板的类型参数。\n\n``` cpp\ntemplate <class T>\nclass ARray\n{\n  private:\n    T entry;\n    ...\n};\n\ntemplate <class Type>\nclass GrowArray:public Array<Type> {...}; // inheritance\n\ntemplate <calss Tp>\nclass Stack\n{\n  Array<Tp> ar;    // use an Array<> as a component\n  ...\n};\n\n// need a blank between > >, show differ from >> operator\nArray < Stack<int> > asi; // an array of stacks of int\n\n// 模板也可传参\ntemplate<class T, int n>\nArrayTP<T, n>::ArrayTP(const T & v)\n{\n  for(int i=0;i<n;i++>)\n    ar[i] = v;\n}\n\n// 显示具体化，用于专用定义，优先匹配\ntemplate<> class Ic<char *>\n{\n  private:\n  public:\n};\n```\n\n模板参数类似函数参数，带有隐式显式转换及参数匹配规则。\n\n\n### 友元类\n两个类关系既不是is-a也不是has-a，但存在控制的关系如电视和遥控。则可以定义遥控为电视的友元类，能够合理范围内修改电视的私有和保护的部分。相当于友元类需要直到朋友类的数据细节乃至实现细节。\n\n\n\n\n\n\n\n\n","slug":"cpp/代码重用","published":1,"updated":"2022-01-29T02:10:28.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav0000i28zd1get5nwh","content":"<h3 id=\"类的复用\"><a href=\"#类的复用\" class=\"headerlink\" title=\"类的复用\"></a>类的复用</h3><p>上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.私有继承包含<br>大多数人会倾向于使用包含，一方面方便理解，另一方面多重继承容易引起问题；私有继承主要区别在于私有成员变成了继承而来的无名成员，调用成员时依赖this的类型转换。</p>\n<h3 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h3><p>MI会带来许多新问题：1.两个基类的同名方法； 2.多个相关基类继承同一个类的多个实例问题；为此大家对MI有喜忧参半不同的态度。</p>\n<p>祖先相同时，要用虚基类解决 class Singer:virtual public Worker，虚拟继承。禁止正常的信息再中间类自动传递。</p>\n<p>MI中间隐含较多问题，尽量减少使用，要么就不用。</p>\n<h3 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h3><p>模板主要作用是提供参数化类型，将类型关键名作为参数传递给模板类或函数，从而实现最大程度代码复用。</p>\n<p>模板类型使用指针时，代码实现上也得调整，所以一般减少依赖指针模板使用，尽量时bool,char,int,double,string，及一般对象等。</p>\n<p>为容器类提供可重用代码是引入模板的主要动机。非类型参数可以是int,枚举，引用或指针，因此double m 不合法，但double *m是合法的。</p>\n<p>模板多功能性，可用于基类，组件类以及其他模板的类型参数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ARray</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T entry;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrowArray</span>:</span><span class=\"keyword\">public</span> Array&lt;Type&gt; &#123;...&#125;; <span class=\"comment\">// inheritance</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;calss Tp&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Array&lt;Tp&gt; ar;    <span class=\"comment\">// use an Array&lt;&gt; as a component</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// need a blank between &gt; &gt;, show differ from &gt;&gt; operator</span></span><br><span class=\"line\">Array &lt; Stack&lt;<span class=\"keyword\">int</span>&gt; &gt; asi; <span class=\"comment\">// an array of stacks of int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板也可传参</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">n</span>&gt;</span></span><br><span class=\"line\">ArrayTP&lt;T, n&gt;::<span class=\"built_in\">ArrayTP</span>(<span class=\"keyword\">const</span> T &amp; v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++&gt;)</span><br><span class=\"line\">    ar[i] = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示具体化，用于专用定义，优先匹配</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ic</span>&lt;</span><span class=\"keyword\">char</span> *&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>模板参数类似函数参数，带有隐式显式转换及参数匹配规则。</p>\n<h3 id=\"友元类\"><a href=\"#友元类\" class=\"headerlink\" title=\"友元类\"></a>友元类</h3><p>两个类关系既不是is-a也不是has-a，但存在控制的关系如电视和遥控。则可以定义遥控为电视的友元类，能够合理范围内修改电视的私有和保护的部分。相当于友元类需要直到朋友类的数据细节乃至实现细节。</p>\n","site":{"data":{}},"length":1289,"excerpt":"","more":"<h3 id=\"类的复用\"><a href=\"#类的复用\" class=\"headerlink\" title=\"类的复用\"></a>类的复用</h3><p>上一节了解了public继承是is-a关系;C++ PRIMER第十四章重用讲解包含has-a的两种用法：1.组件包含 2.私有继承包含<br>大多数人会倾向于使用包含，一方面方便理解，另一方面多重继承容易引起问题；私有继承主要区别在于私有成员变成了继承而来的无名成员，调用成员时依赖this的类型转换。</p>\n<h3 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h3><p>MI会带来许多新问题：1.两个基类的同名方法； 2.多个相关基类继承同一个类的多个实例问题；为此大家对MI有喜忧参半不同的态度。</p>\n<p>祖先相同时，要用虚基类解决 class Singer:virtual public Worker，虚拟继承。禁止正常的信息再中间类自动传递。</p>\n<p>MI中间隐含较多问题，尽量减少使用，要么就不用。</p>\n<h3 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h3><p>模板主要作用是提供参数化类型，将类型关键名作为参数传递给模板类或函数，从而实现最大程度代码复用。</p>\n<p>模板类型使用指针时，代码实现上也得调整，所以一般减少依赖指针模板使用，尽量时bool,char,int,double,string，及一般对象等。</p>\n<p>为容器类提供可重用代码是引入模板的主要动机。非类型参数可以是int,枚举，引用或指针，因此double m 不合法，但double *m是合法的。</p>\n<p>模板多功能性，可用于基类，组件类以及其他模板的类型参数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ARray</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T entry;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrowArray</span>:</span><span class=\"keyword\">public</span> Array&lt;Type&gt; &#123;...&#125;; <span class=\"comment\">// inheritance</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;calss Tp&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Array&lt;Tp&gt; ar;    <span class=\"comment\">// use an Array&lt;&gt; as a component</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// need a blank between &gt; &gt;, show differ from &gt;&gt; operator</span></span><br><span class=\"line\">Array &lt; Stack&lt;<span class=\"keyword\">int</span>&gt; &gt; asi; <span class=\"comment\">// an array of stacks of int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模板也可传参</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">int</span> <span class=\"title\">n</span>&gt;</span></span><br><span class=\"line\">ArrayTP&lt;T, n&gt;::<span class=\"built_in\">ArrayTP</span>(<span class=\"keyword\">const</span> T &amp; v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++&gt;)</span><br><span class=\"line\">    ar[i] = v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示具体化，用于专用定义，优先匹配</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ic</span>&lt;</span><span class=\"keyword\">char</span> *&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>模板参数类似函数参数，带有隐式显式转换及参数匹配规则。</p>\n<h3 id=\"友元类\"><a href=\"#友元类\" class=\"headerlink\" title=\"友元类\"></a>友元类</h3><p>两个类关系既不是is-a也不是has-a，但存在控制的关系如电视和遥控。则可以定义遥控为电视的友元类，能够合理范围内修改电视的私有和保护的部分。相当于友元类需要直到朋友类的数据细节乃至实现细节。</p>\n"},{"title":"内存模型","date":"2021-12-20T13:03:52.000Z","_content":"\n### 头文件通常包含的内容\n- 函数原型\n- 使用了#define或const定义的符号常量\n- 结构声明\n- 类声明\n- 模板声明\n- 内联函数\n用#include \"\"率先在当前工作目录或者源代码目录下找\n用#include <>率先在标准头的目录下找\n\n### 同一个头文件只包含一次\n``` cpp\n#ifndef INCLUDE_H_\n#define INCLUDE_H_\n...\n#endif\n```\n\n### 多个库的链接\n需要确保对象文件或库都是由同一个编译器生成的，若不同的编译器，会为同一个函数生成不同的修饰名称。若有源代码建议用**自己的编译器全部重新编译**，以消除链接错误。\n\n### 存储数据的三种方案\n- 自动存储持续性：函数中声明的变量以及函数参数，会在执行中自动创建，执行完自动释放\n- 静态存储持续性：使用static关键字的变量，在整个程序运行过程均存在\n- 动态存储持续性：用new分配的内存，一直存在直到delete\n\n### 编译器把自动变量用堆栈的形式管理\nregister的变量放在寄存器，依然没有链接性\n\n### 静态存储提供三种链接性\n- 外部链接性：全局（外部链接性）变量（main函数外)\n- 内部链接性：static的全局变量\n- 无链接性: 内部的static变量\n静态变量持续整个程序执行期间，编译器将分配固定的内存块来管理。默认情况下，静态数组以及结构的成员都设置为0。\n\n### 外部链接性使用\n``` cpp\n// file1\nint status = 100;\n#include \"file2.hpp\"\nprint();\n\n// file2\nextern int status;\nvoid print()\n{\n    cout << status;\n}\n\n```\n如果file2中，用status int status或者 extern int status=20;都会报重新定义的错误。\n\n\n### 应使用外部变量在多文件程序的不同部分共享数据\n内部链接性的静态变量用于多个函数之间共享数据(名称空间提供了新的共享数据方法，static的内部链接性逐步淘汰)\n\n\n### 存储说明符：auto, register, static, extern, mutable\nauto为自动变量;register为寄存器存储；static在整个cpp文件的声明具有函数间的链接性；extern是多文件的外部链接性；mutable使const临时失效；\nvolatile指程序代码没有对内存单元修改，其值也可能发生变化。即每次使用该变量都应其查找，别用缓存。\n\n另外\n``` cpp\nconst int fingers = 10; //same as static const int fingers;\n```\nconst使全局变量变成了内部链接性。\n\n但是在另外的文件用 extern const int fingers;又可以强行变成外部链接性而可用。\n\n### 关于函数的链接性\n由于C++不允许函数中定义另外的函数，所以所有函数都为静态存储持续性。但依然可以用extern来使函数为另一个文件使用。使用该函数的每个文件应包含函数原型（方便了解接口的描述，内联函数可以无需接口描述）\n\n### 语言链接性\n由于C和C++编译器对函数翻译不一致，在调用C外部链接函数时，应该标注extern \"C\"\n``` cpp\ne.g.\nextern \"C\" void spiff(int);\n```\n\n### 布局new占位符\n``` cpp\nconst int BUF = 512;\nchar buffer[BUF];\ndouble *pd1 = new double[BUF];\ndouble *pd2 = new (buffer)double[BUF];\n```\n上述两个指针，pd2为交由程序员自身管理的动态内存；且pd2在delete管辖区域之外。\n\n\n### 命名空间及前途\n- 命名空间具有外部链接性\n- 使用在已命名的名称空间中声明的变量，而不是使用外部全局变量\n- 使用在已命名的名称空间中声明的变量，而不是使用静态全局变量\n- 如果开发函数库或者类库，将其放入一个名称空间中。如当前C++提倡标准库的都放入std空间中\n- 不要在头文件使用using,这样会掩盖了可用的名称；另外包含头的顺序会影响程序的行为；若坚持则应在所有的#include后用\n- 导入名称时，首选用作用域解析或using声明\n- 对于using声明，首选将作用域于局部，而非全局\n\n\n命名空间可以是全局的，也可以位于另一个名称空间中，但**不能位于代码块中**\n\nusing namespace std;就是using编译指令，使整个名称空间可用。\n\n","source":"_posts/cpp/内存模型.md","raw":"---\ntitle: 内存模型\ndate: 2021-12-20 21:03:52\ntags: c++\ncategories:\n- c++\n---\n\n### 头文件通常包含的内容\n- 函数原型\n- 使用了#define或const定义的符号常量\n- 结构声明\n- 类声明\n- 模板声明\n- 内联函数\n用#include \"\"率先在当前工作目录或者源代码目录下找\n用#include <>率先在标准头的目录下找\n\n### 同一个头文件只包含一次\n``` cpp\n#ifndef INCLUDE_H_\n#define INCLUDE_H_\n...\n#endif\n```\n\n### 多个库的链接\n需要确保对象文件或库都是由同一个编译器生成的，若不同的编译器，会为同一个函数生成不同的修饰名称。若有源代码建议用**自己的编译器全部重新编译**，以消除链接错误。\n\n### 存储数据的三种方案\n- 自动存储持续性：函数中声明的变量以及函数参数，会在执行中自动创建，执行完自动释放\n- 静态存储持续性：使用static关键字的变量，在整个程序运行过程均存在\n- 动态存储持续性：用new分配的内存，一直存在直到delete\n\n### 编译器把自动变量用堆栈的形式管理\nregister的变量放在寄存器，依然没有链接性\n\n### 静态存储提供三种链接性\n- 外部链接性：全局（外部链接性）变量（main函数外)\n- 内部链接性：static的全局变量\n- 无链接性: 内部的static变量\n静态变量持续整个程序执行期间，编译器将分配固定的内存块来管理。默认情况下，静态数组以及结构的成员都设置为0。\n\n### 外部链接性使用\n``` cpp\n// file1\nint status = 100;\n#include \"file2.hpp\"\nprint();\n\n// file2\nextern int status;\nvoid print()\n{\n    cout << status;\n}\n\n```\n如果file2中，用status int status或者 extern int status=20;都会报重新定义的错误。\n\n\n### 应使用外部变量在多文件程序的不同部分共享数据\n内部链接性的静态变量用于多个函数之间共享数据(名称空间提供了新的共享数据方法，static的内部链接性逐步淘汰)\n\n\n### 存储说明符：auto, register, static, extern, mutable\nauto为自动变量;register为寄存器存储；static在整个cpp文件的声明具有函数间的链接性；extern是多文件的外部链接性；mutable使const临时失效；\nvolatile指程序代码没有对内存单元修改，其值也可能发生变化。即每次使用该变量都应其查找，别用缓存。\n\n另外\n``` cpp\nconst int fingers = 10; //same as static const int fingers;\n```\nconst使全局变量变成了内部链接性。\n\n但是在另外的文件用 extern const int fingers;又可以强行变成外部链接性而可用。\n\n### 关于函数的链接性\n由于C++不允许函数中定义另外的函数，所以所有函数都为静态存储持续性。但依然可以用extern来使函数为另一个文件使用。使用该函数的每个文件应包含函数原型（方便了解接口的描述，内联函数可以无需接口描述）\n\n### 语言链接性\n由于C和C++编译器对函数翻译不一致，在调用C外部链接函数时，应该标注extern \"C\"\n``` cpp\ne.g.\nextern \"C\" void spiff(int);\n```\n\n### 布局new占位符\n``` cpp\nconst int BUF = 512;\nchar buffer[BUF];\ndouble *pd1 = new double[BUF];\ndouble *pd2 = new (buffer)double[BUF];\n```\n上述两个指针，pd2为交由程序员自身管理的动态内存；且pd2在delete管辖区域之外。\n\n\n### 命名空间及前途\n- 命名空间具有外部链接性\n- 使用在已命名的名称空间中声明的变量，而不是使用外部全局变量\n- 使用在已命名的名称空间中声明的变量，而不是使用静态全局变量\n- 如果开发函数库或者类库，将其放入一个名称空间中。如当前C++提倡标准库的都放入std空间中\n- 不要在头文件使用using,这样会掩盖了可用的名称；另外包含头的顺序会影响程序的行为；若坚持则应在所有的#include后用\n- 导入名称时，首选用作用域解析或using声明\n- 对于using声明，首选将作用域于局部，而非全局\n\n\n命名空间可以是全局的，也可以位于另一个名称空间中，但**不能位于代码块中**\n\nusing namespace std;就是using编译指令，使整个名称空间可用。\n\n","slug":"cpp/内存模型","published":1,"updated":"2022-01-05T06:25:34.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav1000k28zdgq4l8z6j","content":"<h3 id=\"头文件通常包含的内容\"><a href=\"#头文件通常包含的内容\" class=\"headerlink\" title=\"头文件通常包含的内容\"></a>头文件通常包含的内容</h3><ul>\n<li>函数原型</li>\n<li>使用了#define或const定义的符号常量</li>\n<li>结构声明</li>\n<li>类声明</li>\n<li>模板声明</li>\n<li>内联函数<br>用#include “”率先在当前工作目录或者源代码目录下找<br>用#include &lt;&gt;率先在标准头的目录下找</li>\n</ul>\n<h3 id=\"同一个头文件只包含一次\"><a href=\"#同一个头文件只包含一次\" class=\"headerlink\" title=\"同一个头文件只包含一次\"></a>同一个头文件只包含一次</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> INCLUDE_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INCLUDE_H_</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多个库的链接\"><a href=\"#多个库的链接\" class=\"headerlink\" title=\"多个库的链接\"></a>多个库的链接</h3><p>需要确保对象文件或库都是由同一个编译器生成的，若不同的编译器，会为同一个函数生成不同的修饰名称。若有源代码建议用<strong>自己的编译器全部重新编译</strong>，以消除链接错误。</p>\n<h3 id=\"存储数据的三种方案\"><a href=\"#存储数据的三种方案\" class=\"headerlink\" title=\"存储数据的三种方案\"></a>存储数据的三种方案</h3><ul>\n<li>自动存储持续性：函数中声明的变量以及函数参数，会在执行中自动创建，执行完自动释放</li>\n<li>静态存储持续性：使用static关键字的变量，在整个程序运行过程均存在</li>\n<li>动态存储持续性：用new分配的内存，一直存在直到delete</li>\n</ul>\n<h3 id=\"编译器把自动变量用堆栈的形式管理\"><a href=\"#编译器把自动变量用堆栈的形式管理\" class=\"headerlink\" title=\"编译器把自动变量用堆栈的形式管理\"></a>编译器把自动变量用堆栈的形式管理</h3><p>register的变量放在寄存器，依然没有链接性</p>\n<h3 id=\"静态存储提供三种链接性\"><a href=\"#静态存储提供三种链接性\" class=\"headerlink\" title=\"静态存储提供三种链接性\"></a>静态存储提供三种链接性</h3><ul>\n<li>外部链接性：全局（外部链接性）变量（main函数外)</li>\n<li>内部链接性：static的全局变量</li>\n<li>无链接性: 内部的static变量<br>静态变量持续整个程序执行期间，编译器将分配固定的内存块来管理。默认情况下，静态数组以及结构的成员都设置为0。</li>\n</ul>\n<h3 id=\"外部链接性使用\"><a href=\"#外部链接性使用\" class=\"headerlink\" title=\"外部链接性使用\"></a>外部链接性使用</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> status = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;file2.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"built_in\">print</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file2</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; status;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果file2中，用status int status或者 extern int status=20;都会报重新定义的错误。</p>\n<h3 id=\"应使用外部变量在多文件程序的不同部分共享数据\"><a href=\"#应使用外部变量在多文件程序的不同部分共享数据\" class=\"headerlink\" title=\"应使用外部变量在多文件程序的不同部分共享数据\"></a>应使用外部变量在多文件程序的不同部分共享数据</h3><p>内部链接性的静态变量用于多个函数之间共享数据(名称空间提供了新的共享数据方法，static的内部链接性逐步淘汰)</p>\n<h3 id=\"存储说明符：auto-register-static-extern-mutable\"><a href=\"#存储说明符：auto-register-static-extern-mutable\" class=\"headerlink\" title=\"存储说明符：auto, register, static, extern, mutable\"></a>存储说明符：auto, register, static, extern, mutable</h3><p>auto为自动变量;register为寄存器存储；static在整个cpp文件的声明具有函数间的链接性；extern是多文件的外部链接性；mutable使const临时失效；<br>volatile指程序代码没有对内存单元修改，其值也可能发生变化。即每次使用该变量都应其查找，别用缓存。</p>\n<p>另外</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> fingers = <span class=\"number\">10</span>; <span class=\"comment\">//same as static const int fingers;</span></span><br></pre></td></tr></table></figure>\n<p>const使全局变量变成了内部链接性。</p>\n<p>但是在另外的文件用 extern const int fingers;又可以强行变成外部链接性而可用。</p>\n<h3 id=\"关于函数的链接性\"><a href=\"#关于函数的链接性\" class=\"headerlink\" title=\"关于函数的链接性\"></a>关于函数的链接性</h3><p>由于C++不允许函数中定义另外的函数，所以所有函数都为静态存储持续性。但依然可以用extern来使函数为另一个文件使用。使用该函数的每个文件应包含函数原型（方便了解接口的描述，内联函数可以无需接口描述）</p>\n<h3 id=\"语言链接性\"><a href=\"#语言链接性\" class=\"headerlink\" title=\"语言链接性\"></a>语言链接性</h3><p>由于C和C++编译器对函数翻译不一致，在调用C外部链接函数时，应该标注extern “C”</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.g.</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spiff</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布局new占位符\"><a href=\"#布局new占位符\" class=\"headerlink\" title=\"布局new占位符\"></a>布局new占位符</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> BUF = <span class=\"number\">512</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> buffer[BUF];</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd1 = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[BUF];</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd2 = <span class=\"built_in\"><span class=\"keyword\">new</span></span> (buffer)<span class=\"keyword\">double</span>[BUF];</span><br></pre></td></tr></table></figure>\n<p>上述两个指针，pd2为交由程序员自身管理的动态内存；且pd2在delete管辖区域之外。</p>\n<h3 id=\"命名空间及前途\"><a href=\"#命名空间及前途\" class=\"headerlink\" title=\"命名空间及前途\"></a>命名空间及前途</h3><ul>\n<li>命名空间具有外部链接性</li>\n<li>使用在已命名的名称空间中声明的变量，而不是使用外部全局变量</li>\n<li>使用在已命名的名称空间中声明的变量，而不是使用静态全局变量</li>\n<li>如果开发函数库或者类库，将其放入一个名称空间中。如当前C++提倡标准库的都放入std空间中</li>\n<li>不要在头文件使用using,这样会掩盖了可用的名称；另外包含头的顺序会影响程序的行为；若坚持则应在所有的#include后用</li>\n<li>导入名称时，首选用作用域解析或using声明</li>\n<li>对于using声明，首选将作用域于局部，而非全局</li>\n</ul>\n<p>命名空间可以是全局的，也可以位于另一个名称空间中，但<strong>不能位于代码块中</strong></p>\n<p>using namespace std;就是using编译指令，使整个名称空间可用。</p>\n","site":{"data":{}},"length":1755,"excerpt":"","more":"<h3 id=\"头文件通常包含的内容\"><a href=\"#头文件通常包含的内容\" class=\"headerlink\" title=\"头文件通常包含的内容\"></a>头文件通常包含的内容</h3><ul>\n<li>函数原型</li>\n<li>使用了#define或const定义的符号常量</li>\n<li>结构声明</li>\n<li>类声明</li>\n<li>模板声明</li>\n<li>内联函数<br>用#include “”率先在当前工作目录或者源代码目录下找<br>用#include &lt;&gt;率先在标准头的目录下找</li>\n</ul>\n<h3 id=\"同一个头文件只包含一次\"><a href=\"#同一个头文件只包含一次\" class=\"headerlink\" title=\"同一个头文件只包含一次\"></a>同一个头文件只包含一次</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> INCLUDE_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INCLUDE_H_</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多个库的链接\"><a href=\"#多个库的链接\" class=\"headerlink\" title=\"多个库的链接\"></a>多个库的链接</h3><p>需要确保对象文件或库都是由同一个编译器生成的，若不同的编译器，会为同一个函数生成不同的修饰名称。若有源代码建议用<strong>自己的编译器全部重新编译</strong>，以消除链接错误。</p>\n<h3 id=\"存储数据的三种方案\"><a href=\"#存储数据的三种方案\" class=\"headerlink\" title=\"存储数据的三种方案\"></a>存储数据的三种方案</h3><ul>\n<li>自动存储持续性：函数中声明的变量以及函数参数，会在执行中自动创建，执行完自动释放</li>\n<li>静态存储持续性：使用static关键字的变量，在整个程序运行过程均存在</li>\n<li>动态存储持续性：用new分配的内存，一直存在直到delete</li>\n</ul>\n<h3 id=\"编译器把自动变量用堆栈的形式管理\"><a href=\"#编译器把自动变量用堆栈的形式管理\" class=\"headerlink\" title=\"编译器把自动变量用堆栈的形式管理\"></a>编译器把自动变量用堆栈的形式管理</h3><p>register的变量放在寄存器，依然没有链接性</p>\n<h3 id=\"静态存储提供三种链接性\"><a href=\"#静态存储提供三种链接性\" class=\"headerlink\" title=\"静态存储提供三种链接性\"></a>静态存储提供三种链接性</h3><ul>\n<li>外部链接性：全局（外部链接性）变量（main函数外)</li>\n<li>内部链接性：static的全局变量</li>\n<li>无链接性: 内部的static变量<br>静态变量持续整个程序执行期间，编译器将分配固定的内存块来管理。默认情况下，静态数组以及结构的成员都设置为0。</li>\n</ul>\n<h3 id=\"外部链接性使用\"><a href=\"#外部链接性使用\" class=\"headerlink\" title=\"外部链接性使用\"></a>外部链接性使用</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> status = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;file2.hpp&quot;</span></span></span><br><span class=\"line\"><span class=\"built_in\">print</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file2</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; status;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果file2中，用status int status或者 extern int status=20;都会报重新定义的错误。</p>\n<h3 id=\"应使用外部变量在多文件程序的不同部分共享数据\"><a href=\"#应使用外部变量在多文件程序的不同部分共享数据\" class=\"headerlink\" title=\"应使用外部变量在多文件程序的不同部分共享数据\"></a>应使用外部变量在多文件程序的不同部分共享数据</h3><p>内部链接性的静态变量用于多个函数之间共享数据(名称空间提供了新的共享数据方法，static的内部链接性逐步淘汰)</p>\n<h3 id=\"存储说明符：auto-register-static-extern-mutable\"><a href=\"#存储说明符：auto-register-static-extern-mutable\" class=\"headerlink\" title=\"存储说明符：auto, register, static, extern, mutable\"></a>存储说明符：auto, register, static, extern, mutable</h3><p>auto为自动变量;register为寄存器存储；static在整个cpp文件的声明具有函数间的链接性；extern是多文件的外部链接性；mutable使const临时失效；<br>volatile指程序代码没有对内存单元修改，其值也可能发生变化。即每次使用该变量都应其查找，别用缓存。</p>\n<p>另外</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> fingers = <span class=\"number\">10</span>; <span class=\"comment\">//same as static const int fingers;</span></span><br></pre></td></tr></table></figure>\n<p>const使全局变量变成了内部链接性。</p>\n<p>但是在另外的文件用 extern const int fingers;又可以强行变成外部链接性而可用。</p>\n<h3 id=\"关于函数的链接性\"><a href=\"#关于函数的链接性\" class=\"headerlink\" title=\"关于函数的链接性\"></a>关于函数的链接性</h3><p>由于C++不允许函数中定义另外的函数，所以所有函数都为静态存储持续性。但依然可以用extern来使函数为另一个文件使用。使用该函数的每个文件应包含函数原型（方便了解接口的描述，内联函数可以无需接口描述）</p>\n<h3 id=\"语言链接性\"><a href=\"#语言链接性\" class=\"headerlink\" title=\"语言链接性\"></a>语言链接性</h3><p>由于C和C++编译器对函数翻译不一致，在调用C外部链接函数时，应该标注extern “C”</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.g.</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spiff</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布局new占位符\"><a href=\"#布局new占位符\" class=\"headerlink\" title=\"布局new占位符\"></a>布局new占位符</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> BUF = <span class=\"number\">512</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> buffer[BUF];</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd1 = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[BUF];</span><br><span class=\"line\"><span class=\"keyword\">double</span> *pd2 = <span class=\"built_in\"><span class=\"keyword\">new</span></span> (buffer)<span class=\"keyword\">double</span>[BUF];</span><br></pre></td></tr></table></figure>\n<p>上述两个指针，pd2为交由程序员自身管理的动态内存；且pd2在delete管辖区域之外。</p>\n<h3 id=\"命名空间及前途\"><a href=\"#命名空间及前途\" class=\"headerlink\" title=\"命名空间及前途\"></a>命名空间及前途</h3><ul>\n<li>命名空间具有外部链接性</li>\n<li>使用在已命名的名称空间中声明的变量，而不是使用外部全局变量</li>\n<li>使用在已命名的名称空间中声明的变量，而不是使用静态全局变量</li>\n<li>如果开发函数库或者类库，将其放入一个名称空间中。如当前C++提倡标准库的都放入std空间中</li>\n<li>不要在头文件使用using,这样会掩盖了可用的名称；另外包含头的顺序会影响程序的行为；若坚持则应在所有的#include后用</li>\n<li>导入名称时，首选用作用域解析或using声明</li>\n<li>对于using声明，首选将作用域于局部，而非全局</li>\n</ul>\n<p>命名空间可以是全局的，也可以位于另一个名称空间中，但<strong>不能位于代码块中</strong></p>\n<p>using namespace std;就是using编译指令，使整个名称空间可用。</p>\n"},{"title":"字符串","date":"2021-12-15T08:08:04.000Z","_content":"\n### C-style字符串\n结尾带'\\0',这对于很多处理字符串的函数很关键。#include <cstring>包含大量C语言字串的操作函数如strlen, strcpy, strcat...\n\nstrlen():只计算数组或者指针中的字符个数，不带结尾\n\n`cin.getline(name,20)`:读取整行的字串到name,最多20个\ncin.get()：类似，但下一次调用开头会带有换行(换行缓存到下次get)，顺便检查了上一次输入的正确程度。\n\n针对string类的getline(cin, string); 与cin混合使用时，在cin>>完成后，getline前需要通过getline(cin,\"\\n\")清除缓存，否则不进入getline输入。\n``` cpp\n// 清除缓存\nstring str=\"\\n\";\ngetline(cin,str);\n```\n\n\n\n### string类\n``` cpp\n#include <string>\nstd::string\n```\n更方便，也更安全。像vector一样管理char.\n\n### struct和union\nunion只能同时存储**一种**类型，其他类型的会lost\n\n### new和delete\n- 不要delete释放不是new的内存\n- 不要delete同一块内存两次\n- new[]数组应当用delete []释放\n- 若用new[]为单一实体分配内存，应使用delete（不带方括号）释放\n- 对空指针delete是安全的\n\n\n### cin与cin.getline区别\ncin.getline(addr,80) 与cin>>addr\ngetline:读整行直到‘回车’\ncin:首先跳过‘空格’，读取字串，再次遇‘空格’停止；即跳过前面的空格，读取单个单词。\n\n``` cpp\ncin>>ch;\ncin.get(ch);\nch=cin.get();\n```\n上面区别主要是cin>>ch直接跳过空格换行以及制表符\n\n### string格式化输出4位数字,前面补0，多用于文件名操作\n``` cpp\nint num_zero = 4;\nstring num = to_string(int_val);\nstring new_num = string(num_zero-num.length(),'0') + num;\n```\n注意int_val长度小于num_zero。\n\n","source":"_posts/cpp/字符串.md","raw":"---\ntitle: 字符串\ndate: 2021-12-15 16:08:04\ntags: c++ primer\ncategories:\n- c++\n---\n\n### C-style字符串\n结尾带'\\0',这对于很多处理字符串的函数很关键。#include <cstring>包含大量C语言字串的操作函数如strlen, strcpy, strcat...\n\nstrlen():只计算数组或者指针中的字符个数，不带结尾\n\n`cin.getline(name,20)`:读取整行的字串到name,最多20个\ncin.get()：类似，但下一次调用开头会带有换行(换行缓存到下次get)，顺便检查了上一次输入的正确程度。\n\n针对string类的getline(cin, string); 与cin混合使用时，在cin>>完成后，getline前需要通过getline(cin,\"\\n\")清除缓存，否则不进入getline输入。\n``` cpp\n// 清除缓存\nstring str=\"\\n\";\ngetline(cin,str);\n```\n\n\n\n### string类\n``` cpp\n#include <string>\nstd::string\n```\n更方便，也更安全。像vector一样管理char.\n\n### struct和union\nunion只能同时存储**一种**类型，其他类型的会lost\n\n### new和delete\n- 不要delete释放不是new的内存\n- 不要delete同一块内存两次\n- new[]数组应当用delete []释放\n- 若用new[]为单一实体分配内存，应使用delete（不带方括号）释放\n- 对空指针delete是安全的\n\n\n### cin与cin.getline区别\ncin.getline(addr,80) 与cin>>addr\ngetline:读整行直到‘回车’\ncin:首先跳过‘空格’，读取字串，再次遇‘空格’停止；即跳过前面的空格，读取单个单词。\n\n``` cpp\ncin>>ch;\ncin.get(ch);\nch=cin.get();\n```\n上面区别主要是cin>>ch直接跳过空格换行以及制表符\n\n### string格式化输出4位数字,前面补0，多用于文件名操作\n``` cpp\nint num_zero = 4;\nstring num = to_string(int_val);\nstring new_num = string(num_zero-num.length(),'0') + num;\n```\n注意int_val长度小于num_zero。\n\n","slug":"cpp/字符串","published":1,"updated":"2022-01-05T06:25:34.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav2000o28zdg4vcab2z","content":"<h3 id=\"C-style字符串\"><a href=\"#C-style字符串\" class=\"headerlink\" title=\"C-style字符串\"></a>C-style字符串</h3><p>结尾带’\\0’,这对于很多处理字符串的函数很关键。#include <cstring>包含大量C语言字串的操作函数如strlen, strcpy, strcat…</p>\n<p>strlen():只计算数组或者指针中的字符个数，不带结尾</p>\n<p><code>cin.getline(name,20)</code>:读取整行的字串到name,最多20个<br>cin.get()：类似，但下一次调用开头会带有换行(换行缓存到下次get)，顺便检查了上一次输入的正确程度。</p>\n<p>针对string类的getline(cin, string); 与cin混合使用时，在cin&gt;&gt;完成后，getline前需要通过getline(cin,”\\n”)清除缓存，否则不进入getline输入。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清除缓存</span></span><br><span class=\"line\">string str=<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin,str);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"string类\"><a href=\"#string类\" class=\"headerlink\" title=\"string类\"></a>string类</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\">std::string</span><br></pre></td></tr></table></figure>\n<p>更方便，也更安全。像vector一样管理char.</p>\n<h3 id=\"struct和union\"><a href=\"#struct和union\" class=\"headerlink\" title=\"struct和union\"></a>struct和union</h3><p>union只能同时存储<strong>一种</strong>类型，其他类型的会lost</p>\n<h3 id=\"new和delete\"><a href=\"#new和delete\" class=\"headerlink\" title=\"new和delete\"></a>new和delete</h3><ul>\n<li>不要delete释放不是new的内存</li>\n<li>不要delete同一块内存两次</li>\n<li>new[]数组应当用delete []释放</li>\n<li>若用new[]为单一实体分配内存，应使用delete（不带方括号）释放</li>\n<li>对空指针delete是安全的</li>\n</ul>\n<h3 id=\"cin与cin-getline区别\"><a href=\"#cin与cin-getline区别\" class=\"headerlink\" title=\"cin与cin.getline区别\"></a>cin与cin.getline区别</h3><p>cin.getline(addr,80) 与cin&gt;&gt;addr<br>getline:读整行直到‘回车’<br>cin:首先跳过‘空格’，读取字串，再次遇‘空格’停止；即跳过前面的空格，读取单个单词。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin&gt;&gt;ch;</span><br><span class=\"line\">cin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">ch=cin.<span class=\"built_in\">get</span>();</span><br></pre></td></tr></table></figure>\n<p>上面区别主要是cin&gt;&gt;ch直接跳过空格换行以及制表符</p>\n<h3 id=\"string格式化输出4位数字-前面补0，多用于文件名操作\"><a href=\"#string格式化输出4位数字-前面补0，多用于文件名操作\" class=\"headerlink\" title=\"string格式化输出4位数字,前面补0，多用于文件名操作\"></a>string格式化输出4位数字,前面补0，多用于文件名操作</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num_zero = <span class=\"number\">4</span>;</span><br><span class=\"line\">string num = <span class=\"built_in\">to_string</span>(int_val);</span><br><span class=\"line\">string new_num = <span class=\"built_in\">string</span>(num_zero-num.<span class=\"built_in\">length</span>(),<span class=\"string\">&#x27;0&#x27;</span>) + num;</span><br></pre></td></tr></table></figure>\n<p>注意int_val长度小于num_zero。</p>\n","site":{"data":{}},"length":923,"excerpt":"","more":"<h3 id=\"C-style字符串\"><a href=\"#C-style字符串\" class=\"headerlink\" title=\"C-style字符串\"></a>C-style字符串</h3><p>结尾带’\\0’,这对于很多处理字符串的函数很关键。#include <cstring>包含大量C语言字串的操作函数如strlen, strcpy, strcat…</p>\n<p>strlen():只计算数组或者指针中的字符个数，不带结尾</p>\n<p><code>cin.getline(name,20)</code>:读取整行的字串到name,最多20个<br>cin.get()：类似，但下一次调用开头会带有换行(换行缓存到下次get)，顺便检查了上一次输入的正确程度。</p>\n<p>针对string类的getline(cin, string); 与cin混合使用时，在cin&gt;&gt;完成后，getline前需要通过getline(cin,”\\n”)清除缓存，否则不进入getline输入。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清除缓存</span></span><br><span class=\"line\">string str=<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin,str);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"string类\"><a href=\"#string类\" class=\"headerlink\" title=\"string类\"></a>string类</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\">std::string</span><br></pre></td></tr></table></figure>\n<p>更方便，也更安全。像vector一样管理char.</p>\n<h3 id=\"struct和union\"><a href=\"#struct和union\" class=\"headerlink\" title=\"struct和union\"></a>struct和union</h3><p>union只能同时存储<strong>一种</strong>类型，其他类型的会lost</p>\n<h3 id=\"new和delete\"><a href=\"#new和delete\" class=\"headerlink\" title=\"new和delete\"></a>new和delete</h3><ul>\n<li>不要delete释放不是new的内存</li>\n<li>不要delete同一块内存两次</li>\n<li>new[]数组应当用delete []释放</li>\n<li>若用new[]为单一实体分配内存，应使用delete（不带方括号）释放</li>\n<li>对空指针delete是安全的</li>\n</ul>\n<h3 id=\"cin与cin-getline区别\"><a href=\"#cin与cin-getline区别\" class=\"headerlink\" title=\"cin与cin.getline区别\"></a>cin与cin.getline区别</h3><p>cin.getline(addr,80) 与cin&gt;&gt;addr<br>getline:读整行直到‘回车’<br>cin:首先跳过‘空格’，读取字串，再次遇‘空格’停止；即跳过前面的空格，读取单个单词。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin&gt;&gt;ch;</span><br><span class=\"line\">cin.<span class=\"built_in\">get</span>(ch);</span><br><span class=\"line\">ch=cin.<span class=\"built_in\">get</span>();</span><br></pre></td></tr></table></figure>\n<p>上面区别主要是cin&gt;&gt;ch直接跳过空格换行以及制表符</p>\n<h3 id=\"string格式化输出4位数字-前面补0，多用于文件名操作\"><a href=\"#string格式化输出4位数字-前面补0，多用于文件名操作\" class=\"headerlink\" title=\"string格式化输出4位数字,前面补0，多用于文件名操作\"></a>string格式化输出4位数字,前面补0，多用于文件名操作</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num_zero = <span class=\"number\">4</span>;</span><br><span class=\"line\">string num = <span class=\"built_in\">to_string</span>(int_val);</span><br><span class=\"line\">string new_num = <span class=\"built_in\">string</span>(num_zero-num.<span class=\"built_in\">length</span>(),<span class=\"string\">&#x27;0&#x27;</span>) + num;</span><br></pre></td></tr></table></figure>\n<p>注意int_val长度小于num_zero。</p>\n"},{"title":"对象和类","mathjax":true,"date":"2021-12-31T08:19:41.000Z","_content":"\nOOP特性：\n- 抽象\n- 封装和数据隐藏\n- 多态\n- 继承\n- 代码的可重用性\n\n接口分离： 1.提供类的声明 2.提供类成员函数\n\n析构函数只有在构造函数用了new分配内存，才需要出来delete释放内存。否则无需工作。\n\n**const放在函数括号后**：即为const成员函数，作用指不修改调用对象。\n\nthis指针的引入： 用来指向调用当前成员函数的对象（this作为隐藏参数传递给方法）\n\n类静态成员变量： static const int Len = 30; 只能是整型或枚举的静态常量\n\n#### 类结合操作符重载\n成为多态的重要一部分，隐藏了内部操作，强调了抽象的实质意义。\nC++操作符重载要点：\n1. 重载后的操作符至少有一个操作数是用户定义的类型\n2. 使用操作符不能违反该操作符原有的句法规则\n3. 无法定义新的操作符\n4. 不能重载sizeof . .* :: ?: typeid *_cast\n\n#### 友元包含函数，类和成员函数\n\n为何需要？  在为类重载二元操作符时，需要用到友元关系，方便使用。\n存在的主要目的是作为类扩展接口的组成部分。\ne.g Time乘以double可以用成员函数重载，但double乘以Time时不能，除非要求用户不能如此调用。否则应该引入友元函数重载。\n一个常用的友元重载则是  cout << Time,而非用成员函数的 Time<< cout\n``` cpp\n// 前一种成员函数重载 Time*double\nTime Time::operator*(double mul) const\n{\n  Time result;\n  long totalminutes = hours * mul * 60 + minutes * mul;\n  result.hours = totalminutes /60;\n  result.minutes = totalminutes %60;\n  return result;\n}\n\n// 后一种友元重载 double*Time\n// 第一步：原型放入类的声明之中\nfriend Time operator*(double m, const Time & t);\n// 第二步：定义编写\nTime operator*(double mul, const Time & t)\n{\n   Time result;\n  long totalminutes = t.hours * mul * 60 + t.minutes * mul;\n  result.hours = totalminutes /60;\n  result.minutes = totalminutes %60;\n  return result;\n}\n```\n\n为了cout <<连续可输出，友元声明如下：\n``` cpp\nostream & operator<< (ostream & os, const Time & t)\n{\n  os << t.hours << \" hours\" << t.minutes<< \" minutes\";\n  return os;\n}\n```\n\n#### 接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)\n蓝图是一个有意思的词语，后续多态也会继续接触到，是一个隐性类型表征；在类的类型转换上，需要尤其注意编译器二义性转换的问题。\n警告：谨慎地使用隐式转换函数。**explicit**定义类的构造函数，则相关对象的类型转换需要显式调用，不能隐式转换。\n\n#### 类声明描述了如何分配内存，但并不执行分配内存\nstatic int num;的初始化是在类声明之外，int className::num=0;\n\n``` cpp\nStringBad sailor = sports;\n\n//等价于\nStringBad sailor = StringBad(sports);\n\n// 则原型为\nStringBad (const StringBad &); //由于不知道更新类静态变量，导致计数出问题\n```\n\n#### 隐式成员函数\nC++自动提供下列成员函数\n- 默认构造函数\n- 复制构造函数\n- 赋值操作符\n- 默认析构函数\n- 地址操作符\n析构用了delete的类，所有对象生成的构造函数都应该使用new，否则会引起浅复制析构的错误。绝对避免试图删除已经删除的数据的行为！\n\n书中的解决方案：使用deep copy，每个对象有自己的数据，而不是引用。\n增加复制构造函数和赋值操作符，使类正确管理对象使用的内存。\n``` cpp\n// 拷贝函数深复制\nStringBad::StringBad(const StringBad & st)\n{\n  num_strings++;\n  len = st.len;\n  str = new char[len+1];\n  std::strcpy(str, st.str);  // 复制构造，深复制而非隐式浅复制\n}\n\n// 赋值深复制:并非创建对象，而是对已有对象操作\nStringBad & StringBad::operator=(const StringBad & st)\n{\n  if(this == &st)  // assigned to itself\n    return *this;\n  delete [] str; // free old\n  len = st.len;\n  str = new char [len+1];\n  strcpy(str, st.str);\n  return *this;\n}\n```\n#### 适配数组指针的释放语法\n``` cpp\nchar words[15]=\"bad idea\";\nchar * p1 = words;\nchar * p2 = new char;\nchar * p3;\n// delete p1,p2,p3; suitable way\n\n// insuitable way, undefined\ndelete [] p1;\ndelete [] p2;\ndelete [] p3;\n\n```\nnew 对应 delete, delete[] 对应new []\n\n\n#### 初始化列表\n执行在构造函数之前，因此可用于对const常量进行赋值，对声明为引用的类成员也类似。\n- 只能用于构造函数\n- 必须以此初始化非静态const数据成员\n- 必须以此初始化引用数据成员\n\n\n#### 继承is-a\n用virtual虚函数以及动态指针来实现多态（dynamic binding动态编译，需额外开销），派生可自动向基类类型转换，称为向上强制转换。反之则不可，需显式转换。\n引出C++指导原则之一：不要为不使用的特性付出代价\n\n#### 虚函数工作原理\n编译器处理虚函数会增加一个隐藏成员指向该函数的地址，若派生重定义了虚函数，则该指针指向新的函数地址。\n多态在内存和执行带来一定的成本：1.每个对象因存储地址而增大 2.编译器要为每个类创建虚函数地址表（数组） 3.每个函数调用需要额外查找表中的地址\n重载的虚基函数在派生实现时改动需要全部一起改动，称为类型协变\n\n应当把所有派生重新定义的函数再基类设置为虚函数，如果强制需重新定义则=0成纯虚函数\n\n#### public/protected/private继承\n派生公共继承关系是is-a，继承了基类的接口；其他两种是has-a关系，继承了成员成为私有，只可在声明内部使用；\n\n构造函数，析构函数，=号，友元不能自动继承，需重新声明并实现。\nprotect继承则派生声明不能直接访问基类私有成员，通过public方法调用\n``` cpp\n//单例模式\nclass TheOnlyInstance\n{\n  public:\n    static TheOnlyInstance * GetTheOnlyInstance()\n    {\n      static TheOnlyInstance obj;\n      return &obj;\n    }\n\n  protect:\n    TheOnlyInstance(){}\n  private:\n    // other data\n};\n// 调用时 TheOnlyInstance * p = TheOnlyInstance::GetTheOnlyInstance();\n```\n\n传对象函数尽量用引用，避免构造和析构的开销；可以将派生对象用等号赋给基类对象，但相反则需提前明确定义。传引用可明确派生对象的类型，否则值引用可能会被编译器自动类型转换，发生意想不到的事情。也可使用dynamic_cast<const baseDMA &>(hs)的方式强制类型转换。\n\n\n\n\n\n","source":"_posts/cpp/对象和类.md","raw":"---\ntitle: 对象和类\ncategories:\n  - c++\nmathjax: true\ndate: 2021-12-31 16:19:41\ntags: c++\n---\n\nOOP特性：\n- 抽象\n- 封装和数据隐藏\n- 多态\n- 继承\n- 代码的可重用性\n\n接口分离： 1.提供类的声明 2.提供类成员函数\n\n析构函数只有在构造函数用了new分配内存，才需要出来delete释放内存。否则无需工作。\n\n**const放在函数括号后**：即为const成员函数，作用指不修改调用对象。\n\nthis指针的引入： 用来指向调用当前成员函数的对象（this作为隐藏参数传递给方法）\n\n类静态成员变量： static const int Len = 30; 只能是整型或枚举的静态常量\n\n#### 类结合操作符重载\n成为多态的重要一部分，隐藏了内部操作，强调了抽象的实质意义。\nC++操作符重载要点：\n1. 重载后的操作符至少有一个操作数是用户定义的类型\n2. 使用操作符不能违反该操作符原有的句法规则\n3. 无法定义新的操作符\n4. 不能重载sizeof . .* :: ?: typeid *_cast\n\n#### 友元包含函数，类和成员函数\n\n为何需要？  在为类重载二元操作符时，需要用到友元关系，方便使用。\n存在的主要目的是作为类扩展接口的组成部分。\ne.g Time乘以double可以用成员函数重载，但double乘以Time时不能，除非要求用户不能如此调用。否则应该引入友元函数重载。\n一个常用的友元重载则是  cout << Time,而非用成员函数的 Time<< cout\n``` cpp\n// 前一种成员函数重载 Time*double\nTime Time::operator*(double mul) const\n{\n  Time result;\n  long totalminutes = hours * mul * 60 + minutes * mul;\n  result.hours = totalminutes /60;\n  result.minutes = totalminutes %60;\n  return result;\n}\n\n// 后一种友元重载 double*Time\n// 第一步：原型放入类的声明之中\nfriend Time operator*(double m, const Time & t);\n// 第二步：定义编写\nTime operator*(double mul, const Time & t)\n{\n   Time result;\n  long totalminutes = t.hours * mul * 60 + t.minutes * mul;\n  result.hours = totalminutes /60;\n  result.minutes = totalminutes %60;\n  return result;\n}\n```\n\n为了cout <<连续可输出，友元声明如下：\n``` cpp\nostream & operator<< (ostream & os, const Time & t)\n{\n  os << t.hours << \" hours\" << t.minutes<< \" minutes\";\n  return os;\n}\n```\n\n#### 接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)\n蓝图是一个有意思的词语，后续多态也会继续接触到，是一个隐性类型表征；在类的类型转换上，需要尤其注意编译器二义性转换的问题。\n警告：谨慎地使用隐式转换函数。**explicit**定义类的构造函数，则相关对象的类型转换需要显式调用，不能隐式转换。\n\n#### 类声明描述了如何分配内存，但并不执行分配内存\nstatic int num;的初始化是在类声明之外，int className::num=0;\n\n``` cpp\nStringBad sailor = sports;\n\n//等价于\nStringBad sailor = StringBad(sports);\n\n// 则原型为\nStringBad (const StringBad &); //由于不知道更新类静态变量，导致计数出问题\n```\n\n#### 隐式成员函数\nC++自动提供下列成员函数\n- 默认构造函数\n- 复制构造函数\n- 赋值操作符\n- 默认析构函数\n- 地址操作符\n析构用了delete的类，所有对象生成的构造函数都应该使用new，否则会引起浅复制析构的错误。绝对避免试图删除已经删除的数据的行为！\n\n书中的解决方案：使用deep copy，每个对象有自己的数据，而不是引用。\n增加复制构造函数和赋值操作符，使类正确管理对象使用的内存。\n``` cpp\n// 拷贝函数深复制\nStringBad::StringBad(const StringBad & st)\n{\n  num_strings++;\n  len = st.len;\n  str = new char[len+1];\n  std::strcpy(str, st.str);  // 复制构造，深复制而非隐式浅复制\n}\n\n// 赋值深复制:并非创建对象，而是对已有对象操作\nStringBad & StringBad::operator=(const StringBad & st)\n{\n  if(this == &st)  // assigned to itself\n    return *this;\n  delete [] str; // free old\n  len = st.len;\n  str = new char [len+1];\n  strcpy(str, st.str);\n  return *this;\n}\n```\n#### 适配数组指针的释放语法\n``` cpp\nchar words[15]=\"bad idea\";\nchar * p1 = words;\nchar * p2 = new char;\nchar * p3;\n// delete p1,p2,p3; suitable way\n\n// insuitable way, undefined\ndelete [] p1;\ndelete [] p2;\ndelete [] p3;\n\n```\nnew 对应 delete, delete[] 对应new []\n\n\n#### 初始化列表\n执行在构造函数之前，因此可用于对const常量进行赋值，对声明为引用的类成员也类似。\n- 只能用于构造函数\n- 必须以此初始化非静态const数据成员\n- 必须以此初始化引用数据成员\n\n\n#### 继承is-a\n用virtual虚函数以及动态指针来实现多态（dynamic binding动态编译，需额外开销），派生可自动向基类类型转换，称为向上强制转换。反之则不可，需显式转换。\n引出C++指导原则之一：不要为不使用的特性付出代价\n\n#### 虚函数工作原理\n编译器处理虚函数会增加一个隐藏成员指向该函数的地址，若派生重定义了虚函数，则该指针指向新的函数地址。\n多态在内存和执行带来一定的成本：1.每个对象因存储地址而增大 2.编译器要为每个类创建虚函数地址表（数组） 3.每个函数调用需要额外查找表中的地址\n重载的虚基函数在派生实现时改动需要全部一起改动，称为类型协变\n\n应当把所有派生重新定义的函数再基类设置为虚函数，如果强制需重新定义则=0成纯虚函数\n\n#### public/protected/private继承\n派生公共继承关系是is-a，继承了基类的接口；其他两种是has-a关系，继承了成员成为私有，只可在声明内部使用；\n\n构造函数，析构函数，=号，友元不能自动继承，需重新声明并实现。\nprotect继承则派生声明不能直接访问基类私有成员，通过public方法调用\n``` cpp\n//单例模式\nclass TheOnlyInstance\n{\n  public:\n    static TheOnlyInstance * GetTheOnlyInstance()\n    {\n      static TheOnlyInstance obj;\n      return &obj;\n    }\n\n  protect:\n    TheOnlyInstance(){}\n  private:\n    // other data\n};\n// 调用时 TheOnlyInstance * p = TheOnlyInstance::GetTheOnlyInstance();\n```\n\n传对象函数尽量用引用，避免构造和析构的开销；可以将派生对象用等号赋给基类对象，但相反则需提前明确定义。传引用可明确派生对象的类型，否则值引用可能会被编译器自动类型转换，发生意想不到的事情。也可使用dynamic_cast<const baseDMA &>(hs)的方式强制类型转换。\n\n\n\n\n\n","slug":"cpp/对象和类","published":1,"updated":"2022-01-26T02:19:00.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav3000q28zd3iwza2ko","content":"<p>OOP特性：</p>\n<ul>\n<li>抽象</li>\n<li>封装和数据隐藏</li>\n<li>多态</li>\n<li>继承</li>\n<li>代码的可重用性</li>\n</ul>\n<p>接口分离： 1.提供类的声明 2.提供类成员函数</p>\n<p>析构函数只有在构造函数用了new分配内存，才需要出来delete释放内存。否则无需工作。</p>\n<p><strong>const放在函数括号后</strong>：即为const成员函数，作用指不修改调用对象。</p>\n<p>this指针的引入： 用来指向调用当前成员函数的对象（this作为隐藏参数传递给方法）</p>\n<p>类静态成员变量： static const int Len = 30; 只能是整型或枚举的静态常量</p>\n<h4 id=\"类结合操作符重载\"><a href=\"#类结合操作符重载\" class=\"headerlink\" title=\"类结合操作符重载\"></a>类结合操作符重载</h4><p>成为多态的重要一部分，隐藏了内部操作，强调了抽象的实质意义。<br>C++操作符重载要点：</p>\n<ol>\n<li>重载后的操作符至少有一个操作数是用户定义的类型</li>\n<li>使用操作符不能违反该操作符原有的句法规则</li>\n<li>无法定义新的操作符</li>\n<li>不能重载sizeof . .* :: ?: typeid *_cast</li>\n</ol>\n<h4 id=\"友元包含函数，类和成员函数\"><a href=\"#友元包含函数，类和成员函数\" class=\"headerlink\" title=\"友元包含函数，类和成员函数\"></a>友元包含函数，类和成员函数</h4><p>为何需要？  在为类重载二元操作符时，需要用到友元关系，方便使用。<br>存在的主要目的是作为类扩展接口的组成部分。<br>e.g Time乘以double可以用成员函数重载，但double乘以Time时不能，除非要求用户不能如此调用。否则应该引入友元函数重载。<br>一个常用的友元重载则是  cout &lt;&lt; Time,而非用成员函数的 Time&lt;&lt; cout</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前一种成员函数重载 Time*double</span></span><br><span class=\"line\">Time Time::<span class=\"keyword\">operator</span>*(<span class=\"keyword\">double</span> mul) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Time result;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> totalminutes = hours * mul * <span class=\"number\">60</span> + minutes * mul;</span><br><span class=\"line\">  result.hours = totalminutes /<span class=\"number\">60</span>;</span><br><span class=\"line\">  result.minutes = totalminutes %<span class=\"number\">60</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后一种友元重载 double*Time</span></span><br><span class=\"line\"><span class=\"comment\">// 第一步：原型放入类的声明之中</span></span><br><span class=\"line\"><span class=\"keyword\">friend</span> Time <span class=\"keyword\">operator</span>*(<span class=\"keyword\">double</span> m, <span class=\"keyword\">const</span> Time &amp; t);</span><br><span class=\"line\"><span class=\"comment\">// 第二步：定义编写</span></span><br><span class=\"line\">Time <span class=\"keyword\">operator</span>*(<span class=\"keyword\">double</span> mul, <span class=\"keyword\">const</span> Time &amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Time result;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> totalminutes = t.hours * mul * <span class=\"number\">60</span> + t.minutes * mul;</span><br><span class=\"line\">  result.hours = totalminutes /<span class=\"number\">60</span>;</span><br><span class=\"line\">  result.minutes = totalminutes %<span class=\"number\">60</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了cout &lt;&lt;连续可输出，友元声明如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ostream &amp; <span class=\"keyword\">operator</span>&lt;&lt; (ostream &amp; os, <span class=\"keyword\">const</span> Time &amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  os &lt;&lt; t.hours &lt;&lt; <span class=\"string\">&quot; hours&quot;</span> &lt;&lt; t.minutes&lt;&lt; <span class=\"string\">&quot; minutes&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint\"><a href=\"#接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint\" class=\"headerlink\" title=\"接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)\"></a>接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)</h4><p>蓝图是一个有意思的词语，后续多态也会继续接触到，是一个隐性类型表征；在类的类型转换上，需要尤其注意编译器二义性转换的问题。<br>警告：谨慎地使用隐式转换函数。<strong>explicit</strong>定义类的构造函数，则相关对象的类型转换需要显式调用，不能隐式转换。</p>\n<h4 id=\"类声明描述了如何分配内存，但并不执行分配内存\"><a href=\"#类声明描述了如何分配内存，但并不执行分配内存\" class=\"headerlink\" title=\"类声明描述了如何分配内存，但并不执行分配内存\"></a>类声明描述了如何分配内存，但并不执行分配内存</h4><p>static int num;的初始化是在类声明之外，int className::num=0;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBad sailor = sports;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\">StringBad sailor = <span class=\"built_in\">StringBad</span>(sports);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 则原型为</span></span><br><span class=\"line\"><span class=\"built_in\">StringBad</span> (<span class=\"keyword\">const</span> StringBad &amp;); <span class=\"comment\">//由于不知道更新类静态变量，导致计数出问题</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"隐式成员函数\"><a href=\"#隐式成员函数\" class=\"headerlink\" title=\"隐式成员函数\"></a>隐式成员函数</h4><p>C++自动提供下列成员函数</p>\n<ul>\n<li>默认构造函数</li>\n<li>复制构造函数</li>\n<li>赋值操作符</li>\n<li>默认析构函数</li>\n<li>地址操作符<br>析构用了delete的类，所有对象生成的构造函数都应该使用new，否则会引起浅复制析构的错误。绝对避免试图删除已经删除的数据的行为！</li>\n</ul>\n<p>书中的解决方案：使用deep copy，每个对象有自己的数据，而不是引用。<br>增加复制构造函数和赋值操作符，使类正确管理对象使用的内存。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拷贝函数深复制</span></span><br><span class=\"line\">StringBad::<span class=\"built_in\">StringBad</span>(<span class=\"keyword\">const</span> StringBad &amp; st)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  num_strings++;</span><br><span class=\"line\">  len = st.len;</span><br><span class=\"line\">  str = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len+<span class=\"number\">1</span>];</span><br><span class=\"line\">  std::<span class=\"built_in\">strcpy</span>(str, st.str);  <span class=\"comment\">// 复制构造，深复制而非隐式浅复制</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋值深复制:并非创建对象，而是对已有对象操作</span></span><br><span class=\"line\">StringBad &amp; StringBad::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> StringBad &amp; st)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> == &amp;st)  <span class=\"comment\">// assigned to itself</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> [] str; <span class=\"comment\">// free old</span></span><br><span class=\"line\">  len = st.len;</span><br><span class=\"line\">  str = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span> [len+<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(str, st.str);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"适配数组指针的释放语法\"><a href=\"#适配数组指针的释放语法\" class=\"headerlink\" title=\"适配数组指针的释放语法\"></a>适配数组指针的释放语法</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> words[<span class=\"number\">15</span>]=<span class=\"string\">&quot;bad idea&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p1 = words;</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p2 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p3;</span><br><span class=\"line\"><span class=\"comment\">// delete p1,p2,p3; suitable way</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// insuitable way, undefined</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p1;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p2;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p3;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>new 对应 delete, delete[] 对应new []</p>\n<h4 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h4><p>执行在构造函数之前，因此可用于对const常量进行赋值，对声明为引用的类成员也类似。</p>\n<ul>\n<li>只能用于构造函数</li>\n<li>必须以此初始化非静态const数据成员</li>\n<li>必须以此初始化引用数据成员</li>\n</ul>\n<h4 id=\"继承is-a\"><a href=\"#继承is-a\" class=\"headerlink\" title=\"继承is-a\"></a>继承is-a</h4><p>用virtual虚函数以及动态指针来实现多态（dynamic binding动态编译，需额外开销），派生可自动向基类类型转换，称为向上强制转换。反之则不可，需显式转换。<br>引出C++指导原则之一：不要为不使用的特性付出代价</p>\n<h4 id=\"虚函数工作原理\"><a href=\"#虚函数工作原理\" class=\"headerlink\" title=\"虚函数工作原理\"></a>虚函数工作原理</h4><p>编译器处理虚函数会增加一个隐藏成员指向该函数的地址，若派生重定义了虚函数，则该指针指向新的函数地址。<br>多态在内存和执行带来一定的成本：1.每个对象因存储地址而增大 2.编译器要为每个类创建虚函数地址表（数组） 3.每个函数调用需要额外查找表中的地址<br>重载的虚基函数在派生实现时改动需要全部一起改动，称为类型协变</p>\n<p>应当把所有派生重新定义的函数再基类设置为虚函数，如果强制需重新定义则=0成纯虚函数</p>\n<h4 id=\"public-protected-private继承\"><a href=\"#public-protected-private继承\" class=\"headerlink\" title=\"public/protected/private继承\"></a>public/protected/private继承</h4><p>派生公共继承关系是is-a，继承了基类的接口；其他两种是has-a关系，继承了成员成为私有，只可在声明内部使用；</p>\n<p>构造函数，析构函数，=号，友元不能自动继承，需重新声明并实现。<br>protect继承则派生声明不能直接访问基类私有成员，通过public方法调用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单例模式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TheOnlyInstance</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> TheOnlyInstance * <span class=\"title\">GetTheOnlyInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">static</span> TheOnlyInstance obj;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  protect:</span><br><span class=\"line\">    <span class=\"built_in\">TheOnlyInstance</span>()&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// other data</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 调用时 TheOnlyInstance * p = TheOnlyInstance::GetTheOnlyInstance();</span></span><br></pre></td></tr></table></figure>\n\n<p>传对象函数尽量用引用，避免构造和析构的开销；可以将派生对象用等号赋给基类对象，但相反则需提前明确定义。传引用可明确派生对象的类型，否则值引用可能会被编译器自动类型转换，发生意想不到的事情。也可使用dynamic_cast&lt;const baseDMA &amp;&gt;(hs)的方式强制类型转换。</p>\n","site":{"data":{}},"length":3346,"excerpt":"","more":"<p>OOP特性：</p>\n<ul>\n<li>抽象</li>\n<li>封装和数据隐藏</li>\n<li>多态</li>\n<li>继承</li>\n<li>代码的可重用性</li>\n</ul>\n<p>接口分离： 1.提供类的声明 2.提供类成员函数</p>\n<p>析构函数只有在构造函数用了new分配内存，才需要出来delete释放内存。否则无需工作。</p>\n<p><strong>const放在函数括号后</strong>：即为const成员函数，作用指不修改调用对象。</p>\n<p>this指针的引入： 用来指向调用当前成员函数的对象（this作为隐藏参数传递给方法）</p>\n<p>类静态成员变量： static const int Len = 30; 只能是整型或枚举的静态常量</p>\n<h4 id=\"类结合操作符重载\"><a href=\"#类结合操作符重载\" class=\"headerlink\" title=\"类结合操作符重载\"></a>类结合操作符重载</h4><p>成为多态的重要一部分，隐藏了内部操作，强调了抽象的实质意义。<br>C++操作符重载要点：</p>\n<ol>\n<li>重载后的操作符至少有一个操作数是用户定义的类型</li>\n<li>使用操作符不能违反该操作符原有的句法规则</li>\n<li>无法定义新的操作符</li>\n<li>不能重载sizeof . .* :: ?: typeid *_cast</li>\n</ol>\n<h4 id=\"友元包含函数，类和成员函数\"><a href=\"#友元包含函数，类和成员函数\" class=\"headerlink\" title=\"友元包含函数，类和成员函数\"></a>友元包含函数，类和成员函数</h4><p>为何需要？  在为类重载二元操作符时，需要用到友元关系，方便使用。<br>存在的主要目的是作为类扩展接口的组成部分。<br>e.g Time乘以double可以用成员函数重载，但double乘以Time时不能，除非要求用户不能如此调用。否则应该引入友元函数重载。<br>一个常用的友元重载则是  cout &lt;&lt; Time,而非用成员函数的 Time&lt;&lt; cout</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前一种成员函数重载 Time*double</span></span><br><span class=\"line\">Time Time::<span class=\"keyword\">operator</span>*(<span class=\"keyword\">double</span> mul) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Time result;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> totalminutes = hours * mul * <span class=\"number\">60</span> + minutes * mul;</span><br><span class=\"line\">  result.hours = totalminutes /<span class=\"number\">60</span>;</span><br><span class=\"line\">  result.minutes = totalminutes %<span class=\"number\">60</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后一种友元重载 double*Time</span></span><br><span class=\"line\"><span class=\"comment\">// 第一步：原型放入类的声明之中</span></span><br><span class=\"line\"><span class=\"keyword\">friend</span> Time <span class=\"keyword\">operator</span>*(<span class=\"keyword\">double</span> m, <span class=\"keyword\">const</span> Time &amp; t);</span><br><span class=\"line\"><span class=\"comment\">// 第二步：定义编写</span></span><br><span class=\"line\">Time <span class=\"keyword\">operator</span>*(<span class=\"keyword\">double</span> mul, <span class=\"keyword\">const</span> Time &amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Time result;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> totalminutes = t.hours * mul * <span class=\"number\">60</span> + t.minutes * mul;</span><br><span class=\"line\">  result.hours = totalminutes /<span class=\"number\">60</span>;</span><br><span class=\"line\">  result.minutes = totalminutes %<span class=\"number\">60</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了cout &lt;&lt;连续可输出，友元声明如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ostream &amp; <span class=\"keyword\">operator</span>&lt;&lt; (ostream &amp; os, <span class=\"keyword\">const</span> Time &amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  os &lt;&lt; t.hours &lt;&lt; <span class=\"string\">&quot; hours&quot;</span> &lt;&lt; t.minutes&lt;&lt; <span class=\"string\">&quot; minutes&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint\"><a href=\"#接受单一参数的构造函数为类的类型转换提供了蓝图-blueprint\" class=\"headerlink\" title=\"接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)\"></a>接受单一参数的构造函数为类的类型转换提供了蓝图(blueprint)</h4><p>蓝图是一个有意思的词语，后续多态也会继续接触到，是一个隐性类型表征；在类的类型转换上，需要尤其注意编译器二义性转换的问题。<br>警告：谨慎地使用隐式转换函数。<strong>explicit</strong>定义类的构造函数，则相关对象的类型转换需要显式调用，不能隐式转换。</p>\n<h4 id=\"类声明描述了如何分配内存，但并不执行分配内存\"><a href=\"#类声明描述了如何分配内存，但并不执行分配内存\" class=\"headerlink\" title=\"类声明描述了如何分配内存，但并不执行分配内存\"></a>类声明描述了如何分配内存，但并不执行分配内存</h4><p>static int num;的初始化是在类声明之外，int className::num=0;</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBad sailor = sports;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\">StringBad sailor = <span class=\"built_in\">StringBad</span>(sports);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 则原型为</span></span><br><span class=\"line\"><span class=\"built_in\">StringBad</span> (<span class=\"keyword\">const</span> StringBad &amp;); <span class=\"comment\">//由于不知道更新类静态变量，导致计数出问题</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"隐式成员函数\"><a href=\"#隐式成员函数\" class=\"headerlink\" title=\"隐式成员函数\"></a>隐式成员函数</h4><p>C++自动提供下列成员函数</p>\n<ul>\n<li>默认构造函数</li>\n<li>复制构造函数</li>\n<li>赋值操作符</li>\n<li>默认析构函数</li>\n<li>地址操作符<br>析构用了delete的类，所有对象生成的构造函数都应该使用new，否则会引起浅复制析构的错误。绝对避免试图删除已经删除的数据的行为！</li>\n</ul>\n<p>书中的解决方案：使用deep copy，每个对象有自己的数据，而不是引用。<br>增加复制构造函数和赋值操作符，使类正确管理对象使用的内存。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拷贝函数深复制</span></span><br><span class=\"line\">StringBad::<span class=\"built_in\">StringBad</span>(<span class=\"keyword\">const</span> StringBad &amp; st)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  num_strings++;</span><br><span class=\"line\">  len = st.len;</span><br><span class=\"line\">  str = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len+<span class=\"number\">1</span>];</span><br><span class=\"line\">  std::<span class=\"built_in\">strcpy</span>(str, st.str);  <span class=\"comment\">// 复制构造，深复制而非隐式浅复制</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋值深复制:并非创建对象，而是对已有对象操作</span></span><br><span class=\"line\">StringBad &amp; StringBad::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> StringBad &amp; st)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span> == &amp;st)  <span class=\"comment\">// assigned to itself</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> [] str; <span class=\"comment\">// free old</span></span><br><span class=\"line\">  len = st.len;</span><br><span class=\"line\">  str = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span> [len+<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>(str, st.str);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"适配数组指针的释放语法\"><a href=\"#适配数组指针的释放语法\" class=\"headerlink\" title=\"适配数组指针的释放语法\"></a>适配数组指针的释放语法</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> words[<span class=\"number\">15</span>]=<span class=\"string\">&quot;bad idea&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p1 = words;</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p2 = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p3;</span><br><span class=\"line\"><span class=\"comment\">// delete p1,p2,p3; suitable way</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// insuitable way, undefined</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p1;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p2;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] p3;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>new 对应 delete, delete[] 对应new []</p>\n<h4 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h4><p>执行在构造函数之前，因此可用于对const常量进行赋值，对声明为引用的类成员也类似。</p>\n<ul>\n<li>只能用于构造函数</li>\n<li>必须以此初始化非静态const数据成员</li>\n<li>必须以此初始化引用数据成员</li>\n</ul>\n<h4 id=\"继承is-a\"><a href=\"#继承is-a\" class=\"headerlink\" title=\"继承is-a\"></a>继承is-a</h4><p>用virtual虚函数以及动态指针来实现多态（dynamic binding动态编译，需额外开销），派生可自动向基类类型转换，称为向上强制转换。反之则不可，需显式转换。<br>引出C++指导原则之一：不要为不使用的特性付出代价</p>\n<h4 id=\"虚函数工作原理\"><a href=\"#虚函数工作原理\" class=\"headerlink\" title=\"虚函数工作原理\"></a>虚函数工作原理</h4><p>编译器处理虚函数会增加一个隐藏成员指向该函数的地址，若派生重定义了虚函数，则该指针指向新的函数地址。<br>多态在内存和执行带来一定的成本：1.每个对象因存储地址而增大 2.编译器要为每个类创建虚函数地址表（数组） 3.每个函数调用需要额外查找表中的地址<br>重载的虚基函数在派生实现时改动需要全部一起改动，称为类型协变</p>\n<p>应当把所有派生重新定义的函数再基类设置为虚函数，如果强制需重新定义则=0成纯虚函数</p>\n<h4 id=\"public-protected-private继承\"><a href=\"#public-protected-private继承\" class=\"headerlink\" title=\"public/protected/private继承\"></a>public/protected/private继承</h4><p>派生公共继承关系是is-a，继承了基类的接口；其他两种是has-a关系，继承了成员成为私有，只可在声明内部使用；</p>\n<p>构造函数，析构函数，=号，友元不能自动继承，需重新声明并实现。<br>protect继承则派生声明不能直接访问基类私有成员，通过public方法调用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单例模式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TheOnlyInstance</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> TheOnlyInstance * <span class=\"title\">GetTheOnlyInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">static</span> TheOnlyInstance obj;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  protect:</span><br><span class=\"line\">    <span class=\"built_in\">TheOnlyInstance</span>()&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// other data</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 调用时 TheOnlyInstance * p = TheOnlyInstance::GetTheOnlyInstance();</span></span><br></pre></td></tr></table></figure>\n\n<p>传对象函数尽量用引用，避免构造和析构的开销；可以将派生对象用等号赋给基类对象，但相反则需提前明确定义。传引用可明确派生对象的类型，否则值引用可能会被编译器自动类型转换，发生意想不到的事情。也可使用dynamic_cast&lt;const baseDMA &amp;&gt;(hs)的方式强制类型转换。</p>\n"},{"title":"异常处理","date":"2021-12-23T02:27:32.000Z","_content":"\n### 处理可能出现异常的方法\n- 调用abort()或exit()结束程序\n- 返回错误码\n- 异常机制：1.使用try块执行可能出现异常的代码段 2.throw引发异常 3.catch捕获并处理对应情况\n\n### throw机制\n若throw引发异常后，匹配对应catch。而后不是将控制权返回调用程序，而是引导程序沿着函数调用序列后退，直到找到try块中的函数\n若没有throw出异常，则catch被跳过.\n一般而言后退多步，再在main()中寻找与引发异常**类型匹配**的处理程序作处理。\n\n### 通常用对象作为异常类型处理\n好处是：直接根据类型区分异常，另外对象可以携带信息确定原因，catch根据信息来执行对应的操作\n\n### 堆栈解退（unwinding the stack）\n假设函数出现异常，而不是正确返回而终止。程序释放堆栈中的内存，但不会在释放堆栈的第一个返回地址后停止，而是继续释放堆栈，直到找到位于try块的返回地质。程序进行堆栈解退以回到能够捕获异常的地方时，将释放堆栈中的自动存储型变量。\n\n![](/images/12_23_1.png)\n\n### 文件IO\n``` cpp\n#include<iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    ifstream inFile;\n    inFile.open(\"file.txt\");\n    if(!inFile.is_open())\n    {\n        cerr <<\"Failed open file.txt\\n\";\n        exit(0);\n    }\n    char ch;\n    int cnt=0;\n    while(inFile>>ch)\n    {\n        cnt++;\n    }\n    cout << cnt <<endl;\n    inFile.close();\n    return 0;\n}\n\n```\n\n下面程序为harmony mean的除0错误，抛出const char *类型，匹配输出错误信息的代码。一般抛出错误类型通常为类。\n``` cpp\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\ndouble hmean(double a, double b)\n{\n    if (a == -b)\n        throw \"bad hmean() arguments: a = -b not allowed\";\n    return 2.0 * a * b / (a + b);\n}\nint main()\n{\n    double x, y, z;\n    cout << \"Enter two numbers:\";\n    while (cin >> x >> y)\n    {\n        try\n        {\n            z = hmean(x, y);\n        }\n        catch(const char * s)\n        {\n            cout << s << endl;\n            cout <<\"Enter a new pair of numbers: \";\n            continue;\n        }\n        \n        cout << \"Harmonic mean of \" << x << \" and \" << y << \". is \" << z << endl;\n        cout << \"Enter next set of numbers <q to quit>:\";\n    }\n    cout << \"Bye!\" << endl;\n    return 0;\n}\n\n```\n\n### throw-catch机制和函数参数以及函数返回机制的区别\n1.函数控制权返回到调用函数的函数，throw语句控制权向上返回到第一个包含能够捕获相应异常的try-catch组合\n2.引发异常时，编译器总是创建一个临时拷贝，彻底避免了函数机制指向不存在的临时变量的问题。\n3.经常可见catch(problem & p)，使用了引用，主要是针对通过继承关联起来的异常类型；此时使用基类引用即可执行派生类对象。此时层次结构最下面的异常类的catch语句应当放在最前面。\n\ncatch (...)表示捕获任何异常\n\n### 异常处理的注意事项\n1.使用异常，应在设计程序时就加入，而不是以后才添加。\n2.使用异常会增加程序代码，降低程序运行速度。\n3.异常规范不适用于模板，异常和动态内存分配不能总是协同工作\n因此，虽然异常处理对于某些项目极为重要，但也会增加编程的工作量、增大程序以及降低程序的速度。另外编译器对异常的支持以及用户的经验还没有达到成熟的程度，应有节制地使用这一特性。\n\n如无堆栈解退，则会出现内存泄漏，如下\n``` cpp\nvoid test(int n)\n{\n    double * ar = new double[n];\n    if(oh_no)\n        throw exception();\n    \n    delete [] ar;\n    return ;\n}\n```\nthrow了，则delete[]被忽略，ar指针消失了，内存块未释放且不可访问。\n\n### RTTI（RunTime Type Identification)\n三个支持RTTI的元素：\n- dynamic_cast操作符将基类指针生成派生指针：回答是否可以安全将对象的地址赋给特定类型的指针？如可，返回对象地址；否则，返回空指针。这对比“指向哪个类型的对象”，这更通用且有用。\n- typeid操作符返回对象的类型\n- type_info存储特定类型的信息\n注意：RTTI只适用于包含虚函数的类\n\n与通用转换机制相比，dynamic_cast、static_cast、const_cast、reinterpret_cast提供了更安全和明确的类型转换。\n\n### STL\n通用编程技术，迭代器概念。\n操作复杂度：固定时间、线性时间、随机时间\n线性容器以及联合容器(set、map、multiset、multimap)\n()函数符functor的概念,STL使用模板让for_each原型看上去像\n``` cpp\ntemplate<class InputIterator, class Function>\nFunction for_each(InputIterator first, InputIterator last, Function f);\n```\n\n### STL算法库\n分为四大类\n- 非修改式序列操作\n- 修改式序列操作\n- 排序和相关操作\n- 通用数字运算\n就地算法：在原始数据位置上操作；复制算法：在新的位置操作\n\n### IO\ncout不会截断数据，会尽量全部打印内容。\n``` cpp\ncout.width(int n); // 单次有效\ncout.fill(char c); // 一直有效\ncout.precision(int n); // 一直有效\n\n```\n","source":"_posts/cpp/异常处理.md","raw":"---\ntitle: 异常处理\ndate: 2021-12-23 10:27:32\ntags: c++\ncategories:\n- c++\n---\n\n### 处理可能出现异常的方法\n- 调用abort()或exit()结束程序\n- 返回错误码\n- 异常机制：1.使用try块执行可能出现异常的代码段 2.throw引发异常 3.catch捕获并处理对应情况\n\n### throw机制\n若throw引发异常后，匹配对应catch。而后不是将控制权返回调用程序，而是引导程序沿着函数调用序列后退，直到找到try块中的函数\n若没有throw出异常，则catch被跳过.\n一般而言后退多步，再在main()中寻找与引发异常**类型匹配**的处理程序作处理。\n\n### 通常用对象作为异常类型处理\n好处是：直接根据类型区分异常，另外对象可以携带信息确定原因，catch根据信息来执行对应的操作\n\n### 堆栈解退（unwinding the stack）\n假设函数出现异常，而不是正确返回而终止。程序释放堆栈中的内存，但不会在释放堆栈的第一个返回地址后停止，而是继续释放堆栈，直到找到位于try块的返回地质。程序进行堆栈解退以回到能够捕获异常的地方时，将释放堆栈中的自动存储型变量。\n\n![](/images/12_23_1.png)\n\n### 文件IO\n``` cpp\n#include<iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    ifstream inFile;\n    inFile.open(\"file.txt\");\n    if(!inFile.is_open())\n    {\n        cerr <<\"Failed open file.txt\\n\";\n        exit(0);\n    }\n    char ch;\n    int cnt=0;\n    while(inFile>>ch)\n    {\n        cnt++;\n    }\n    cout << cnt <<endl;\n    inFile.close();\n    return 0;\n}\n\n```\n\n下面程序为harmony mean的除0错误，抛出const char *类型，匹配输出错误信息的代码。一般抛出错误类型通常为类。\n``` cpp\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\ndouble hmean(double a, double b)\n{\n    if (a == -b)\n        throw \"bad hmean() arguments: a = -b not allowed\";\n    return 2.0 * a * b / (a + b);\n}\nint main()\n{\n    double x, y, z;\n    cout << \"Enter two numbers:\";\n    while (cin >> x >> y)\n    {\n        try\n        {\n            z = hmean(x, y);\n        }\n        catch(const char * s)\n        {\n            cout << s << endl;\n            cout <<\"Enter a new pair of numbers: \";\n            continue;\n        }\n        \n        cout << \"Harmonic mean of \" << x << \" and \" << y << \". is \" << z << endl;\n        cout << \"Enter next set of numbers <q to quit>:\";\n    }\n    cout << \"Bye!\" << endl;\n    return 0;\n}\n\n```\n\n### throw-catch机制和函数参数以及函数返回机制的区别\n1.函数控制权返回到调用函数的函数，throw语句控制权向上返回到第一个包含能够捕获相应异常的try-catch组合\n2.引发异常时，编译器总是创建一个临时拷贝，彻底避免了函数机制指向不存在的临时变量的问题。\n3.经常可见catch(problem & p)，使用了引用，主要是针对通过继承关联起来的异常类型；此时使用基类引用即可执行派生类对象。此时层次结构最下面的异常类的catch语句应当放在最前面。\n\ncatch (...)表示捕获任何异常\n\n### 异常处理的注意事项\n1.使用异常，应在设计程序时就加入，而不是以后才添加。\n2.使用异常会增加程序代码，降低程序运行速度。\n3.异常规范不适用于模板，异常和动态内存分配不能总是协同工作\n因此，虽然异常处理对于某些项目极为重要，但也会增加编程的工作量、增大程序以及降低程序的速度。另外编译器对异常的支持以及用户的经验还没有达到成熟的程度，应有节制地使用这一特性。\n\n如无堆栈解退，则会出现内存泄漏，如下\n``` cpp\nvoid test(int n)\n{\n    double * ar = new double[n];\n    if(oh_no)\n        throw exception();\n    \n    delete [] ar;\n    return ;\n}\n```\nthrow了，则delete[]被忽略，ar指针消失了，内存块未释放且不可访问。\n\n### RTTI（RunTime Type Identification)\n三个支持RTTI的元素：\n- dynamic_cast操作符将基类指针生成派生指针：回答是否可以安全将对象的地址赋给特定类型的指针？如可，返回对象地址；否则，返回空指针。这对比“指向哪个类型的对象”，这更通用且有用。\n- typeid操作符返回对象的类型\n- type_info存储特定类型的信息\n注意：RTTI只适用于包含虚函数的类\n\n与通用转换机制相比，dynamic_cast、static_cast、const_cast、reinterpret_cast提供了更安全和明确的类型转换。\n\n### STL\n通用编程技术，迭代器概念。\n操作复杂度：固定时间、线性时间、随机时间\n线性容器以及联合容器(set、map、multiset、multimap)\n()函数符functor的概念,STL使用模板让for_each原型看上去像\n``` cpp\ntemplate<class InputIterator, class Function>\nFunction for_each(InputIterator first, InputIterator last, Function f);\n```\n\n### STL算法库\n分为四大类\n- 非修改式序列操作\n- 修改式序列操作\n- 排序和相关操作\n- 通用数字运算\n就地算法：在原始数据位置上操作；复制算法：在新的位置操作\n\n### IO\ncout不会截断数据，会尽量全部打印内容。\n``` cpp\ncout.width(int n); // 单次有效\ncout.fill(char c); // 一直有效\ncout.precision(int n); // 一直有效\n\n```\n","slug":"cpp/异常处理","published":1,"updated":"2022-02-14T02:50:40.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav4000u28zd7q0c6n9p","content":"<h3 id=\"处理可能出现异常的方法\"><a href=\"#处理可能出现异常的方法\" class=\"headerlink\" title=\"处理可能出现异常的方法\"></a>处理可能出现异常的方法</h3><ul>\n<li>调用abort()或exit()结束程序</li>\n<li>返回错误码</li>\n<li>异常机制：1.使用try块执行可能出现异常的代码段 2.throw引发异常 3.catch捕获并处理对应情况</li>\n</ul>\n<h3 id=\"throw机制\"><a href=\"#throw机制\" class=\"headerlink\" title=\"throw机制\"></a>throw机制</h3><p>若throw引发异常后，匹配对应catch。而后不是将控制权返回调用程序，而是引导程序沿着函数调用序列后退，直到找到try块中的函数<br>若没有throw出异常，则catch被跳过.<br>一般而言后退多步，再在main()中寻找与引发异常<strong>类型匹配</strong>的处理程序作处理。</p>\n<h3 id=\"通常用对象作为异常类型处理\"><a href=\"#通常用对象作为异常类型处理\" class=\"headerlink\" title=\"通常用对象作为异常类型处理\"></a>通常用对象作为异常类型处理</h3><p>好处是：直接根据类型区分异常，另外对象可以携带信息确定原因，catch根据信息来执行对应的操作</p>\n<h3 id=\"堆栈解退（unwinding-the-stack）\"><a href=\"#堆栈解退（unwinding-the-stack）\" class=\"headerlink\" title=\"堆栈解退（unwinding the stack）\"></a>堆栈解退（unwinding the stack）</h3><p>假设函数出现异常，而不是正确返回而终止。程序释放堆栈中的内存，但不会在释放堆栈的第一个返回地址后停止，而是继续释放堆栈，直到找到位于try块的返回地质。程序进行堆栈解退以回到能够捕获异常的地方时，将释放堆栈中的自动存储型变量。</p>\n<p><img src=\"/images/12_23_1.png\"></p>\n<h3 id=\"文件IO\"><a href=\"#文件IO\" class=\"headerlink\" title=\"文件IO\"></a>文件IO</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ifstream inFile;</span><br><span class=\"line\">    inFile.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!inFile.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cerr &lt;&lt;<span class=\"string\">&quot;Failed open file.txt\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(inFile&gt;&gt;ch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt;endl;</span><br><span class=\"line\">    inFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面程序为harmony mean的除0错误，抛出const char *类型，匹配输出错误信息的代码。一般抛出错误类型通常为类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">hmean</span><span class=\"params\">(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == -b)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">&quot;bad hmean() arguments: a = -b not allowed&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2.0</span> * a * b / (a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y, z;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Enter two numbers:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            z = <span class=\"built_in\">hmean</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">catch</span></span>(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * s)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt;<span class=\"string\">&quot;Enter a new pair of numbers: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Harmonic mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"string\">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class=\"string\">&quot;. is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Enter next set of numbers &lt;q to quit&gt;:&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Bye!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"throw-catch机制和函数参数以及函数返回机制的区别\"><a href=\"#throw-catch机制和函数参数以及函数返回机制的区别\" class=\"headerlink\" title=\"throw-catch机制和函数参数以及函数返回机制的区别\"></a>throw-catch机制和函数参数以及函数返回机制的区别</h3><p>1.函数控制权返回到调用函数的函数，throw语句控制权向上返回到第一个包含能够捕获相应异常的try-catch组合<br>2.引发异常时，编译器总是创建一个临时拷贝，彻底避免了函数机制指向不存在的临时变量的问题。<br>3.经常可见catch(problem &amp; p)，使用了引用，主要是针对通过继承关联起来的异常类型；此时使用基类引用即可执行派生类对象。此时层次结构最下面的异常类的catch语句应当放在最前面。</p>\n<p>catch (…)表示捕获任何异常</p>\n<h3 id=\"异常处理的注意事项\"><a href=\"#异常处理的注意事项\" class=\"headerlink\" title=\"异常处理的注意事项\"></a>异常处理的注意事项</h3><p>1.使用异常，应在设计程序时就加入，而不是以后才添加。<br>2.使用异常会增加程序代码，降低程序运行速度。<br>3.异常规范不适用于模板，异常和动态内存分配不能总是协同工作<br>因此，虽然异常处理对于某些项目极为重要，但也会增加编程的工作量、增大程序以及降低程序的速度。另外编译器对异常的支持以及用户的经验还没有达到成熟的程度，应有节制地使用这一特性。</p>\n<p>如无堆栈解退，则会出现内存泄漏，如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> * ar = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oh_no)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">exception</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] ar;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throw了，则delete[]被忽略，ar指针消失了，内存块未释放且不可访问。</p>\n<h3 id=\"RTTI（RunTime-Type-Identification\"><a href=\"#RTTI（RunTime-Type-Identification\" class=\"headerlink\" title=\"RTTI（RunTime Type Identification)\"></a>RTTI（RunTime Type Identification)</h3><p>三个支持RTTI的元素：</p>\n<ul>\n<li>dynamic_cast操作符将基类指针生成派生指针：回答是否可以安全将对象的地址赋给特定类型的指针？如可，返回对象地址；否则，返回空指针。这对比“指向哪个类型的对象”，这更通用且有用。</li>\n<li>typeid操作符返回对象的类型</li>\n<li>type_info存储特定类型的信息<br>注意：RTTI只适用于包含虚函数的类</li>\n</ul>\n<p>与通用转换机制相比，dynamic_cast、static_cast、const_cast、reinterpret_cast提供了更安全和明确的类型转换。</p>\n<h3 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h3><p>通用编程技术，迭代器概念。<br>操作复杂度：固定时间、线性时间、随机时间<br>线性容器以及联合容器(set、map、multiset、multimap)<br>()函数符functor的概念,STL使用模板让for_each原型看上去像</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class InputIterator, class Function&gt;</span></span><br><span class=\"line\"><span class=\"function\">Function <span class=\"title\">for_each</span><span class=\"params\">(InputIterator first, InputIterator last, Function f)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"STL算法库\"><a href=\"#STL算法库\" class=\"headerlink\" title=\"STL算法库\"></a>STL算法库</h3><p>分为四大类</p>\n<ul>\n<li>非修改式序列操作</li>\n<li>修改式序列操作</li>\n<li>排序和相关操作</li>\n<li>通用数字运算<br>就地算法：在原始数据位置上操作；复制算法：在新的位置操作</li>\n</ul>\n<h3 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h3><p>cout不会截断数据，会尽量全部打印内容。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout.<span class=\"built_in\">width</span>(<span class=\"keyword\">int</span> n); <span class=\"comment\">// 单次有效</span></span><br><span class=\"line\">cout.<span class=\"built_in\">fill</span>(<span class=\"keyword\">char</span> c); <span class=\"comment\">// 一直有效</span></span><br><span class=\"line\">cout.<span class=\"built_in\">precision</span>(<span class=\"keyword\">int</span> n); <span class=\"comment\">// 一直有效</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2829,"excerpt":"","more":"<h3 id=\"处理可能出现异常的方法\"><a href=\"#处理可能出现异常的方法\" class=\"headerlink\" title=\"处理可能出现异常的方法\"></a>处理可能出现异常的方法</h3><ul>\n<li>调用abort()或exit()结束程序</li>\n<li>返回错误码</li>\n<li>异常机制：1.使用try块执行可能出现异常的代码段 2.throw引发异常 3.catch捕获并处理对应情况</li>\n</ul>\n<h3 id=\"throw机制\"><a href=\"#throw机制\" class=\"headerlink\" title=\"throw机制\"></a>throw机制</h3><p>若throw引发异常后，匹配对应catch。而后不是将控制权返回调用程序，而是引导程序沿着函数调用序列后退，直到找到try块中的函数<br>若没有throw出异常，则catch被跳过.<br>一般而言后退多步，再在main()中寻找与引发异常<strong>类型匹配</strong>的处理程序作处理。</p>\n<h3 id=\"通常用对象作为异常类型处理\"><a href=\"#通常用对象作为异常类型处理\" class=\"headerlink\" title=\"通常用对象作为异常类型处理\"></a>通常用对象作为异常类型处理</h3><p>好处是：直接根据类型区分异常，另外对象可以携带信息确定原因，catch根据信息来执行对应的操作</p>\n<h3 id=\"堆栈解退（unwinding-the-stack）\"><a href=\"#堆栈解退（unwinding-the-stack）\" class=\"headerlink\" title=\"堆栈解退（unwinding the stack）\"></a>堆栈解退（unwinding the stack）</h3><p>假设函数出现异常，而不是正确返回而终止。程序释放堆栈中的内存，但不会在释放堆栈的第一个返回地址后停止，而是继续释放堆栈，直到找到位于try块的返回地质。程序进行堆栈解退以回到能够捕获异常的地方时，将释放堆栈中的自动存储型变量。</p>\n<p><img src=\"/images/12_23_1.png\"></p>\n<h3 id=\"文件IO\"><a href=\"#文件IO\" class=\"headerlink\" title=\"文件IO\"></a>文件IO</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ifstream inFile;</span><br><span class=\"line\">    inFile.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;file.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!inFile.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cerr &lt;&lt;<span class=\"string\">&quot;Failed open file.txt\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(inFile&gt;&gt;ch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt;endl;</span><br><span class=\"line\">    inFile.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>下面程序为harmony mean的除0错误，抛出const char *类型，匹配输出错误信息的代码。一般抛出错误类型通常为类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">hmean</span><span class=\"params\">(<span class=\"keyword\">double</span> a, <span class=\"keyword\">double</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == -b)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">&quot;bad hmean() arguments: a = -b not allowed&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2.0</span> * a * b / (a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x, y, z;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Enter two numbers:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; x &gt;&gt; y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            z = <span class=\"built_in\">hmean</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\"><span class=\"keyword\">catch</span></span>(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * s)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">            cout &lt;&lt;<span class=\"string\">&quot;Enter a new pair of numbers: &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Harmonic mean of &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"string\">&quot; and &quot;</span> &lt;&lt; y &lt;&lt; <span class=\"string\">&quot;. is &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Enter next set of numbers &lt;q to quit&gt;:&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Bye!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"throw-catch机制和函数参数以及函数返回机制的区别\"><a href=\"#throw-catch机制和函数参数以及函数返回机制的区别\" class=\"headerlink\" title=\"throw-catch机制和函数参数以及函数返回机制的区别\"></a>throw-catch机制和函数参数以及函数返回机制的区别</h3><p>1.函数控制权返回到调用函数的函数，throw语句控制权向上返回到第一个包含能够捕获相应异常的try-catch组合<br>2.引发异常时，编译器总是创建一个临时拷贝，彻底避免了函数机制指向不存在的临时变量的问题。<br>3.经常可见catch(problem &amp; p)，使用了引用，主要是针对通过继承关联起来的异常类型；此时使用基类引用即可执行派生类对象。此时层次结构最下面的异常类的catch语句应当放在最前面。</p>\n<p>catch (…)表示捕获任何异常</p>\n<h3 id=\"异常处理的注意事项\"><a href=\"#异常处理的注意事项\" class=\"headerlink\" title=\"异常处理的注意事项\"></a>异常处理的注意事项</h3><p>1.使用异常，应在设计程序时就加入，而不是以后才添加。<br>2.使用异常会增加程序代码，降低程序运行速度。<br>3.异常规范不适用于模板，异常和动态内存分配不能总是协同工作<br>因此，虽然异常处理对于某些项目极为重要，但也会增加编程的工作量、增大程序以及降低程序的速度。另外编译器对异常的支持以及用户的经验还没有达到成熟的程度，应有节制地使用这一特性。</p>\n<p>如无堆栈解退，则会出现内存泄漏，如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> * ar = <span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[n];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oh_no)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"built_in\">exception</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] ar;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throw了，则delete[]被忽略，ar指针消失了，内存块未释放且不可访问。</p>\n<h3 id=\"RTTI（RunTime-Type-Identification\"><a href=\"#RTTI（RunTime-Type-Identification\" class=\"headerlink\" title=\"RTTI（RunTime Type Identification)\"></a>RTTI（RunTime Type Identification)</h3><p>三个支持RTTI的元素：</p>\n<ul>\n<li>dynamic_cast操作符将基类指针生成派生指针：回答是否可以安全将对象的地址赋给特定类型的指针？如可，返回对象地址；否则，返回空指针。这对比“指向哪个类型的对象”，这更通用且有用。</li>\n<li>typeid操作符返回对象的类型</li>\n<li>type_info存储特定类型的信息<br>注意：RTTI只适用于包含虚函数的类</li>\n</ul>\n<p>与通用转换机制相比，dynamic_cast、static_cast、const_cast、reinterpret_cast提供了更安全和明确的类型转换。</p>\n<h3 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h3><p>通用编程技术，迭代器概念。<br>操作复杂度：固定时间、线性时间、随机时间<br>线性容器以及联合容器(set、map、multiset、multimap)<br>()函数符functor的概念,STL使用模板让for_each原型看上去像</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class InputIterator, class Function&gt;</span></span><br><span class=\"line\"><span class=\"function\">Function <span class=\"title\">for_each</span><span class=\"params\">(InputIterator first, InputIterator last, Function f)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"STL算法库\"><a href=\"#STL算法库\" class=\"headerlink\" title=\"STL算法库\"></a>STL算法库</h3><p>分为四大类</p>\n<ul>\n<li>非修改式序列操作</li>\n<li>修改式序列操作</li>\n<li>排序和相关操作</li>\n<li>通用数字运算<br>就地算法：在原始数据位置上操作；复制算法：在新的位置操作</li>\n</ul>\n<h3 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h3><p>cout不会截断数据，会尽量全部打印内容。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout.<span class=\"built_in\">width</span>(<span class=\"keyword\">int</span> n); <span class=\"comment\">// 单次有效</span></span><br><span class=\"line\">cout.<span class=\"built_in\">fill</span>(<span class=\"keyword\">char</span> c); <span class=\"comment\">// 一直有效</span></span><br><span class=\"line\">cout.<span class=\"built_in\">precision</span>(<span class=\"keyword\">int</span> n); <span class=\"comment\">// 一直有效</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"EIGEN_1 HELLO_WOLRD","mathjax":true,"date":"2022-01-20T07:19:05.000Z","_content":"\n### EIGEN简介\nFROM WIKI: Eigen is a high-level C++ library of template headers for linear algebra, matrix and vector operations, geometrical transformations, numerical solvers and related algorithms. \n简而言之C++开源模板库，支持线性代数、矩阵矢量运算和数值分析，是个方便好用的数学库。\n\n更绝的是，EIGEN所有源码用头文件编写，所以只需要Include,无需编译链接过程，直接与平台无关，非常通用！\n\n### 安装\n安装过程也很简单，在UBUNTU下直接\n``` cpp\nsudo apt-get install libeigen3-dev\n```\n一般安装在/usr/include目录下\n\n使用直接与标准库类似，#include <Eigen/Dense>等\n\n\n### 主要模块\n![](/images/01_20_1.png)\n\n### 简单例子\n``` cpp\n#include <iostream>\n#include <eigen3/Eigen/Dense>\n\nusing namespace std;\nusing namespace Eigen;\n\nint main()\n{\n\n    Matrix3d m = Matrix3d::Random();\n    m = ( m + Matrix3d::Constant(1.2)) * 50;\n\n    cout << m << endl;\n    Vector3d v(3);\n    v << 1, 2, 3;\n    cout <<m*v << endl;\n    \n    return 0;\n}\n\n```\n这是fix_sized定义的写法，一般4*4以下的矩阵矢量用固定大小写法，对于比较大的才用不定量写法MatirxXd, VectorXd;\n\n主要结构为1D对象Vector, Array和2D对象Matrix","source":"_posts/eigen/eigen-1.md","raw":"---\ntitle: EIGEN_1 HELLO_WOLRD\ncategories:\n  - EIGEN\nmathjax: true\ndate: 2022-01-20 15:19:05\ntags: EIGEN\n---\n\n### EIGEN简介\nFROM WIKI: Eigen is a high-level C++ library of template headers for linear algebra, matrix and vector operations, geometrical transformations, numerical solvers and related algorithms. \n简而言之C++开源模板库，支持线性代数、矩阵矢量运算和数值分析，是个方便好用的数学库。\n\n更绝的是，EIGEN所有源码用头文件编写，所以只需要Include,无需编译链接过程，直接与平台无关，非常通用！\n\n### 安装\n安装过程也很简单，在UBUNTU下直接\n``` cpp\nsudo apt-get install libeigen3-dev\n```\n一般安装在/usr/include目录下\n\n使用直接与标准库类似，#include <Eigen/Dense>等\n\n\n### 主要模块\n![](/images/01_20_1.png)\n\n### 简单例子\n``` cpp\n#include <iostream>\n#include <eigen3/Eigen/Dense>\n\nusing namespace std;\nusing namespace Eigen;\n\nint main()\n{\n\n    Matrix3d m = Matrix3d::Random();\n    m = ( m + Matrix3d::Constant(1.2)) * 50;\n\n    cout << m << endl;\n    Vector3d v(3);\n    v << 1, 2, 3;\n    cout <<m*v << endl;\n    \n    return 0;\n}\n\n```\n这是fix_sized定义的写法，一般4*4以下的矩阵矢量用固定大小写法，对于比较大的才用不定量写法MatirxXd, VectorXd;\n\n主要结构为1D对象Vector, Array和2D对象Matrix","slug":"eigen/eigen-1","published":1,"updated":"2022-01-24T10:04:32.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav5000w28zde9z98urg","content":"<h3 id=\"EIGEN简介\"><a href=\"#EIGEN简介\" class=\"headerlink\" title=\"EIGEN简介\"></a>EIGEN简介</h3><p>FROM WIKI: Eigen is a high-level C++ library of template headers for linear algebra, matrix and vector operations, geometrical transformations, numerical solvers and related algorithms.<br>简而言之C++开源模板库，支持线性代数、矩阵矢量运算和数值分析，是个方便好用的数学库。</p>\n<p>更绝的是，EIGEN所有源码用头文件编写，所以只需要Include,无需编译链接过程，直接与平台无关，非常通用！</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装过程也很简单，在UBUNTU下直接</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>\n<p>一般安装在/usr/include目录下</p>\n<p>使用直接与标准库类似，#include &lt;Eigen/Dense&gt;等</p>\n<h3 id=\"主要模块\"><a href=\"#主要模块\" class=\"headerlink\" title=\"主要模块\"></a>主要模块</h3><p><img src=\"/images/01_20_1.png\"></p>\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix3d m = Matrix3d::<span class=\"built_in\">Random</span>();</span><br><span class=\"line\">    m = ( m + Matrix3d::<span class=\"built_in\">Constant</span>(<span class=\"number\">1.2</span>)) * <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">Vector3d <span class=\"title\">v</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">    v &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>;</span><br><span class=\"line\">    cout &lt;&lt;m*v &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这是fix_sized定义的写法，一般4*4以下的矩阵矢量用固定大小写法，对于比较大的才用不定量写法MatirxXd, VectorXd;</p>\n<p>主要结构为1D对象Vector, Array和2D对象Matrix</p>\n","site":{"data":{}},"length":787,"excerpt":"","more":"<h3 id=\"EIGEN简介\"><a href=\"#EIGEN简介\" class=\"headerlink\" title=\"EIGEN简介\"></a>EIGEN简介</h3><p>FROM WIKI: Eigen is a high-level C++ library of template headers for linear algebra, matrix and vector operations, geometrical transformations, numerical solvers and related algorithms.<br>简而言之C++开源模板库，支持线性代数、矩阵矢量运算和数值分析，是个方便好用的数学库。</p>\n<p>更绝的是，EIGEN所有源码用头文件编写，所以只需要Include,无需编译链接过程，直接与平台无关，非常通用！</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装过程也很简单，在UBUNTU下直接</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>\n<p>一般安装在/usr/include目录下</p>\n<p>使用直接与标准库类似，#include &lt;Eigen/Dense&gt;等</p>\n<h3 id=\"主要模块\"><a href=\"#主要模块\" class=\"headerlink\" title=\"主要模块\"></a>主要模块</h3><p><img src=\"/images/01_20_1.png\"></p>\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;eigen3/Eigen/Dense&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix3d m = Matrix3d::<span class=\"built_in\">Random</span>();</span><br><span class=\"line\">    m = ( m + Matrix3d::<span class=\"built_in\">Constant</span>(<span class=\"number\">1.2</span>)) * <span class=\"number\">50</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"function\">Vector3d <span class=\"title\">v</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">    v &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>;</span><br><span class=\"line\">    cout &lt;&lt;m*v &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这是fix_sized定义的写法，一般4*4以下的矩阵矢量用固定大小写法，对于比较大的才用不定量写法MatirxXd, VectorXd;</p>\n<p>主要结构为1D对象Vector, Array和2D对象Matrix</p>\n"},{"title":"逻辑控制","date":"2021-12-16T07:09:48.000Z","_content":"\n### do...while... 至少会执行一次的循环逻辑\n\n哨兵(sentinel)字符: 一直读取，直到’他‘为止\n\n### 检查文件是否正确打开很关键\n用string读ifstream数据\n``` cpp\n#include <fstream>\n#include <string>\nint main()\n{\n    using namespace std;\n    ifstream inFile;\n    inFile.open(filename);\n    if(!inFile.is_open())\n    {\n        cout <<\"Failed Open\";\n        exit(EXIT_FAILURE);\n    }\n    // 逐行读放在string\n    string str;\n    getline(inFile, str);\n    //stoi, stof, stod \n}\n```\n\n\n### 关于函数，真正的乐趣在于编写自己的函数，函数库\n\n### 指向const的指针以及const指针\n![](/images/12_17_1.png)\n\n\n### 递归使用\n``` cpp\nvoid recurs(arg)\n{\n    stat1\n    if(test)\n        recurs(arg)\n    stat2\n}\n```\n先执行stat1,打开满足条件，打开新的递归；直到新的递归不满足条件，逐步执行stat2并关闭当前函数；直到所有打开的函数都关闭了。\n\n### 函数指针\n用函数指针将第一函数找到第二函数，而非直接调用；虽然笨拙，但好处是可以在不同时间传递不同的函数地址；\n语法：double (*pf)(int);\n\n### 应尽量使用const\n1.使用const可以避免无意中修改数据的失误\n2.使用const使函数能够处理const和非const实参，否则将不能处理const实参\n3.使用const引用使函数能够正确生成并使用临时变量\n\n### 引用非常适合用于**结构和类**\n何时使用引用参数：1.能够修改调用函数中的数据对象 2.通过传递引用而非拷贝提高程序运行速度\n\n### 语法糖：函数默认参数从右往左\n\n\n### 函数多态：重载函数\n不应滥用，适用于不同参数类型输入，完成基本一致功能的多个函数使用，const与非const也不一样\n\n### 函数多态：模板编程\n``` cpp\ntemplate <typename T>  // typename -> class is ok\nvoid Swap(T &a, T &b)\n{\n    T temp;\n    temp = a;\n    a = b;\n    b = temp;\n}\n\n```\n编译器如何匹配最佳函数是一个复杂而完备的过程，大致规则如下：\n1.完全匹配，但常规函数优于模板\n2.提升转换（char/shorts提升至int, float提升至double)\n3.标准转换（int 转换char, long 转换double)\n4.用户定义的转换，如类声明\n\n","source":"_posts/cpp/逻辑控制.md","raw":"---\ntitle: 逻辑控制\ndate: 2021-12-16 15:09:48\ntags: c++ primer\ncategories:\n- c++\n---\n\n### do...while... 至少会执行一次的循环逻辑\n\n哨兵(sentinel)字符: 一直读取，直到’他‘为止\n\n### 检查文件是否正确打开很关键\n用string读ifstream数据\n``` cpp\n#include <fstream>\n#include <string>\nint main()\n{\n    using namespace std;\n    ifstream inFile;\n    inFile.open(filename);\n    if(!inFile.is_open())\n    {\n        cout <<\"Failed Open\";\n        exit(EXIT_FAILURE);\n    }\n    // 逐行读放在string\n    string str;\n    getline(inFile, str);\n    //stoi, stof, stod \n}\n```\n\n\n### 关于函数，真正的乐趣在于编写自己的函数，函数库\n\n### 指向const的指针以及const指针\n![](/images/12_17_1.png)\n\n\n### 递归使用\n``` cpp\nvoid recurs(arg)\n{\n    stat1\n    if(test)\n        recurs(arg)\n    stat2\n}\n```\n先执行stat1,打开满足条件，打开新的递归；直到新的递归不满足条件，逐步执行stat2并关闭当前函数；直到所有打开的函数都关闭了。\n\n### 函数指针\n用函数指针将第一函数找到第二函数，而非直接调用；虽然笨拙，但好处是可以在不同时间传递不同的函数地址；\n语法：double (*pf)(int);\n\n### 应尽量使用const\n1.使用const可以避免无意中修改数据的失误\n2.使用const使函数能够处理const和非const实参，否则将不能处理const实参\n3.使用const引用使函数能够正确生成并使用临时变量\n\n### 引用非常适合用于**结构和类**\n何时使用引用参数：1.能够修改调用函数中的数据对象 2.通过传递引用而非拷贝提高程序运行速度\n\n### 语法糖：函数默认参数从右往左\n\n\n### 函数多态：重载函数\n不应滥用，适用于不同参数类型输入，完成基本一致功能的多个函数使用，const与非const也不一样\n\n### 函数多态：模板编程\n``` cpp\ntemplate <typename T>  // typename -> class is ok\nvoid Swap(T &a, T &b)\n{\n    T temp;\n    temp = a;\n    a = b;\n    b = temp;\n}\n\n```\n编译器如何匹配最佳函数是一个复杂而完备的过程，大致规则如下：\n1.完全匹配，但常规函数优于模板\n2.提升转换（char/shorts提升至int, float提升至double)\n3.标准转换（int 转换char, long 转换double)\n4.用户定义的转换，如类声明\n\n","slug":"cpp/逻辑控制","published":1,"updated":"2022-01-05T06:25:34.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav6000y28zd6j8zaiw5","content":"<h3 id=\"do…while…-至少会执行一次的循环逻辑\"><a href=\"#do…while…-至少会执行一次的循环逻辑\" class=\"headerlink\" title=\"do…while… 至少会执行一次的循环逻辑\"></a>do…while… 至少会执行一次的循环逻辑</h3><p>哨兵(sentinel)字符: 一直读取，直到’他‘为止</p>\n<h3 id=\"检查文件是否正确打开很关键\"><a href=\"#检查文件是否正确打开很关键\" class=\"headerlink\" title=\"检查文件是否正确打开很关键\"></a>检查文件是否正确打开很关键</h3><p>用string读ifstream数据</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    ifstream inFile;</span><br><span class=\"line\">    inFile.<span class=\"built_in\">open</span>(filename);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!inFile.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt;<span class=\"string\">&quot;Failed Open&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 逐行读放在string</span></span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(inFile, str);</span><br><span class=\"line\">    <span class=\"comment\">//stoi, stof, stod </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"关于函数，真正的乐趣在于编写自己的函数，函数库\"><a href=\"#关于函数，真正的乐趣在于编写自己的函数，函数库\" class=\"headerlink\" title=\"关于函数，真正的乐趣在于编写自己的函数，函数库\"></a>关于函数，真正的乐趣在于编写自己的函数，函数库</h3><h3 id=\"指向const的指针以及const指针\"><a href=\"#指向const的指针以及const指针\" class=\"headerlink\" title=\"指向const的指针以及const指针\"></a>指向const的指针以及const指针</h3><p><img src=\"/images/12_17_1.png\"></p>\n<h3 id=\"递归使用\"><a href=\"#递归使用\" class=\"headerlink\" title=\"递归使用\"></a>递归使用</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recurs</span><span class=\"params\">(arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">stat1</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">if</span><span class=\"params\">(test)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">recurs</span><span class=\"params\">(arg)</span></span></span><br><span class=\"line\"><span class=\"function\">    stat2</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>先执行stat1,打开满足条件，打开新的递归；直到新的递归不满足条件，逐步执行stat2并关闭当前函数；直到所有打开的函数都关闭了。</p>\n<h3 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h3><p>用函数指针将第一函数找到第二函数，而非直接调用；虽然笨拙，但好处是可以在不同时间传递不同的函数地址；<br>语法：double (*pf)(int);</p>\n<h3 id=\"应尽量使用const\"><a href=\"#应尽量使用const\" class=\"headerlink\" title=\"应尽量使用const\"></a>应尽量使用const</h3><p>1.使用const可以避免无意中修改数据的失误<br>2.使用const使函数能够处理const和非const实参，否则将不能处理const实参<br>3.使用const引用使函数能够正确生成并使用临时变量</p>\n<h3 id=\"引用非常适合用于结构和类\"><a href=\"#引用非常适合用于结构和类\" class=\"headerlink\" title=\"引用非常适合用于结构和类\"></a>引用非常适合用于<strong>结构和类</strong></h3><p>何时使用引用参数：1.能够修改调用函数中的数据对象 2.通过传递引用而非拷贝提高程序运行速度</p>\n<h3 id=\"语法糖：函数默认参数从右往左\"><a href=\"#语法糖：函数默认参数从右往左\" class=\"headerlink\" title=\"语法糖：函数默认参数从右往左\"></a>语法糖：函数默认参数从右往左</h3><h3 id=\"函数多态：重载函数\"><a href=\"#函数多态：重载函数\" class=\"headerlink\" title=\"函数多态：重载函数\"></a>函数多态：重载函数</h3><p>不应滥用，适用于不同参数类型输入，完成基本一致功能的多个函数使用，const与非const也不一样</p>\n<h3 id=\"函数多态：模板编程\"><a href=\"#函数多态：模板编程\" class=\"headerlink\" title=\"函数多态：模板编程\"></a>函数多态：模板编程</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;  <span class=\"comment\">// typename -&gt; class is ok</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(T &amp;a, T &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译器如何匹配最佳函数是一个复杂而完备的过程，大致规则如下：<br>1.完全匹配，但常规函数优于模板<br>2.提升转换（char/shorts提升至int, float提升至double)<br>3.标准转换（int 转换char, long 转换double)<br>4.用户定义的转换，如类声明</p>\n","site":{"data":{}},"length":1112,"excerpt":"","more":"<h3 id=\"do…while…-至少会执行一次的循环逻辑\"><a href=\"#do…while…-至少会执行一次的循环逻辑\" class=\"headerlink\" title=\"do…while… 至少会执行一次的循环逻辑\"></a>do…while… 至少会执行一次的循环逻辑</h3><p>哨兵(sentinel)字符: 一直读取，直到’他‘为止</p>\n<h3 id=\"检查文件是否正确打开很关键\"><a href=\"#检查文件是否正确打开很关键\" class=\"headerlink\" title=\"检查文件是否正确打开很关键\"></a>检查文件是否正确打开很关键</h3><p>用string读ifstream数据</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    ifstream inFile;</span><br><span class=\"line\">    inFile.<span class=\"built_in\">open</span>(filename);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!inFile.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt;<span class=\"string\">&quot;Failed Open&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 逐行读放在string</span></span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(inFile, str);</span><br><span class=\"line\">    <span class=\"comment\">//stoi, stof, stod </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"关于函数，真正的乐趣在于编写自己的函数，函数库\"><a href=\"#关于函数，真正的乐趣在于编写自己的函数，函数库\" class=\"headerlink\" title=\"关于函数，真正的乐趣在于编写自己的函数，函数库\"></a>关于函数，真正的乐趣在于编写自己的函数，函数库</h3><h3 id=\"指向const的指针以及const指针\"><a href=\"#指向const的指针以及const指针\" class=\"headerlink\" title=\"指向const的指针以及const指针\"></a>指向const的指针以及const指针</h3><p><img src=\"/images/12_17_1.png\"></p>\n<h3 id=\"递归使用\"><a href=\"#递归使用\" class=\"headerlink\" title=\"递归使用\"></a>递归使用</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recurs</span><span class=\"params\">(arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">stat1</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">if</span><span class=\"params\">(test)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">recurs</span><span class=\"params\">(arg)</span></span></span><br><span class=\"line\"><span class=\"function\">    stat2</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>先执行stat1,打开满足条件，打开新的递归；直到新的递归不满足条件，逐步执行stat2并关闭当前函数；直到所有打开的函数都关闭了。</p>\n<h3 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h3><p>用函数指针将第一函数找到第二函数，而非直接调用；虽然笨拙，但好处是可以在不同时间传递不同的函数地址；<br>语法：double (*pf)(int);</p>\n<h3 id=\"应尽量使用const\"><a href=\"#应尽量使用const\" class=\"headerlink\" title=\"应尽量使用const\"></a>应尽量使用const</h3><p>1.使用const可以避免无意中修改数据的失误<br>2.使用const使函数能够处理const和非const实参，否则将不能处理const实参<br>3.使用const引用使函数能够正确生成并使用临时变量</p>\n<h3 id=\"引用非常适合用于结构和类\"><a href=\"#引用非常适合用于结构和类\" class=\"headerlink\" title=\"引用非常适合用于结构和类\"></a>引用非常适合用于<strong>结构和类</strong></h3><p>何时使用引用参数：1.能够修改调用函数中的数据对象 2.通过传递引用而非拷贝提高程序运行速度</p>\n<h3 id=\"语法糖：函数默认参数从右往左\"><a href=\"#语法糖：函数默认参数从右往左\" class=\"headerlink\" title=\"语法糖：函数默认参数从右往左\"></a>语法糖：函数默认参数从右往左</h3><h3 id=\"函数多态：重载函数\"><a href=\"#函数多态：重载函数\" class=\"headerlink\" title=\"函数多态：重载函数\"></a>函数多态：重载函数</h3><p>不应滥用，适用于不同参数类型输入，完成基本一致功能的多个函数使用，const与非const也不一样</p>\n<h3 id=\"函数多态：模板编程\"><a href=\"#函数多态：模板编程\" class=\"headerlink\" title=\"函数多态：模板编程\"></a>函数多态：模板编程</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;  <span class=\"comment\">// typename -&gt; class is ok</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(T &amp;a, T &amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译器如何匹配最佳函数是一个复杂而完备的过程，大致规则如下：<br>1.完全匹配，但常规函数优于模板<br>2.提升转换（char/shorts提升至int, float提升至double)<br>3.标准转换（int 转换char, long 转换double)<br>4.用户定义的转换，如类声明</p>\n"},{"title":"腾讯课堂-C++11多线程","mathjax":true,"date":"2021-12-28T07:58:29.000Z","_content":"\n### 线程管理\n多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；\n``` cpp\n#include <iostream>\n#include <thread>\n#include <unistd.h>\nusing namespace std;\n\n// 传入操作类，重载运算符()\nclass Fctor{\n  public:    // 参数使用引用减少多线程资源拷贝\n    void operator()(string& msg)     // opt: string msg\n    {\n      cout <<\"from f1:\" << msg<<endl;\n      msg = \"changed\";\n    }\n};\n\nint main()\n{\n  string s = \"not changed\";\n  cout << this_thread::get_id()<<endl;\n  thread t1((Fctor()), ref(s));    // move(s),此时最后输出的s为空。\n  t1.join();\n\n  cout << s << endl;\n  cout << thread::hardware_concurrency() << endl; //当前设备核心数\n\n  return 0;\n}\n\n// output\n// thread_id\n// from f1:not changed\n// not changed\n\n```\n\n### 数据竞争及互斥对象\n避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全\n``` cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <fstream>\nusing namespace std;\n\n// lock_guard构建f单例，保证独占fout资源，从而保证线程安全\nclass LofFile\n{\n    public:\n    LofFile(){\n        f.open(\"log.txt\");\n    }\n    void shared_print(string id, int value)\n    {\n        lock_guard<mutex> locker(m_mutex);\n        f<< \"From\" << id <<\": \" << value << endl;\n    }\n\n    private:\n        mutex m_mutex;\n        ofstream f;\n};\n/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护\nmutex mu;\nvoid shared_print(string msg, int id)\n{\n    lock_guard<mutex> guard(mu);\n    // mu.lock();\n    cout << msg << id << endl;\n    // mu.unlock();\n}\n*/\n\n\nvoid function_1(LofFile& log)\n{\n    for(int i=0; i>-100; i--)\n        log.shared_print(\"From t1:\",i);\n}\nint main()\n{\n    LofFile log;\n    thread t1(function_1, ref(log));\n\n    for(int i=0; i< 100; i++)\n        log.shared_print(\"from main: \", i);\n\n    t1.join();\n    return 0;\n}\n\n```\n\n\n### 死锁\n避免死锁：\n- 评估线程是否需要两个或以上的互斥对象\n- 避免在锁住资源的同时去调用一些不熟悉的函数\n- 使用lock函数帮助mutex顺序一致\n\n``` cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <fstream>\nusing namespace std;\n\n// 循环依赖产生的死锁\nclass LofFile\n{\npublic:\n    LofFile() {}\n\n    void shared_print(string id, int value)\n    {\n        lock(m_mutex, m_mutex2);  \n        lock_guard<mutex> locker(m_mutex, adopt_lock);\n        lock_guard<mutex> locker2(m_mutex2, adopt_lock);\n        cout << \"From\" << id << \": \" << value << endl;\n    }\n    void shared_print2(string id, int value)\n    {\n        lock(m_mutex, m_mutex2); // 用lock确保互斥顺序一致\n\n        lock_guard<mutex> locker2(m_mutex2, adopt_lock); // 若调换，则可避免\n        lock_guard<mutex> locker(m_mutex, adopt_lock);\n        cout << \"From\" << id << \": \" << value << endl;\n    }\n\nprivate:\n    mutex m_mutex;\n    mutex m_mutex2;\n    ofstream f; // 被m_mutex保护的对象\n};\n\nvoid function_1(LofFile &log)\n{\n    for (int i = 0; i > -100; i--)\n        log.shared_print(\"From t1:\", i);\n}\nint main()\n{\n    LofFile log;\n    thread t1(function_1, ref(log));\n\n    for (int i = 0; i < 100; i++)\n        log.shared_print2(\"from main: \", i);\n\n    t1.join();\n    return 0;\n}\n\n```\n\n### Unique Lock和lazy Initialization\n加锁的方式：\n1. lock_guard<mutex>\n2. mutex.lock\n3. unique_lock(推荐，但占用更多系统资源)\n\n``` cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <fstream>\nusing namespace std;\n\n// 所占用的资源\nclass LofFile\n{\n    public:\n    LofFile(){\n        f.open(\"log.txt\");\n    }\n    void shared_print(string id, int value)\n    {\n        // lock_guard<mutex> locker(m_mutex);  \n        unique_lock<mutex> locker(m_mutex, defer_lock); // unique_lock占用更多系统资源\n        // do_sth()  unlock\n        // ...        \n\n        locker.lock();\n        f << id <<\": \" << value << endl;\n        locker.unlock();\n        // ...\n\n\n        locker.lock(); // another unique_lock\n\n        unique_lock<mutex> locker2 = move(locker);\n    \n    }\n\n    private:\n        mutex m_mutex;\n        ofstream f;\n};\n\n\nvoid function_1(LofFile& log)\n{\n    for(int i=0; i>-100; i--)\n        log.shared_print(\"From t1:\",i);\n}\nint main()\n{\n    LofFile log;\n    thread t1(function_1, ref(log));\n\n    for(int i=0; i< 100; i++)\n        log.shared_print(\"From main: \", i);\n\n    t1.join();\n    return 0;\n}\n\n```\n\n### 生产者和消费者问题\n结合unique_lock和lambda，让线程之间高效相互响应执行\n``` cpp\n#include <functional>\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <mutex>\n#include <thread>\n#include <deque>\n#include <condition_variable>\n\nusing namespace std;\n\ndeque<int> q;\nmutex mu;\ncondition_variable cond;  // 条件变量\n// 生产者\nvoid function_1()\n{\n    int count = 10;\n    while(count > 0)\n    {\n        unique_lock<mutex> locker(mu);\n        q.push_front(count);\n        locker.unlock();\n        cond.notify_one();\n        this_thread::sleep_for(chrono::seconds(1));\n        count--;\n    }\n}\n\n// 消费者：条件变量\nvoid function_2()\n{\n    int data = 0;\n    while(data!=1)\n    {\n        unique_lock<mutex> locker(mu);\n        cond.wait(locker, [](){ return !q.empty(); }); // 只能搭配unique_lock使用，用Lambda函数避免自解锁\n        data = q.back();\n        q.pop_back();\n        locker.unlock();\n        cout <<\"t2 got a value from t1: \" << data<<endl;\n    }\n}\n\n/* 不优雅\nvoid function_2()\n{\n    int data = 0;\n    while(data!=1)\n    {\n        unique_lock<mutex> locker(mu);\n        if(!q.empty())\n        {\n            data = q.back();\n            q.pop_back();\n            locker.unlock();\n            cout <<\"t2 got a value from t1: \" << data<<endl;\n        }\n        else {\n            locker.unlock();\n            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为\n        }\n    }\n}\n*/\n\nint main()\n{\n    thread t1(function_1);\n    thread t2(function_2);\n    t1.join();\n    t2.join();\n    return 0;\n\n}\n\n\n```\n","source":"_posts/cpp/腾讯课堂-C-11多线程.md","raw":"---\ntitle: 腾讯课堂-C++11多线程\nmathjax: true\ndate: 2021-12-28 15:58:29\ntags: C++ 多线程 并发\ncategories:\n- c++\n---\n\n### 线程管理\n多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；\n``` cpp\n#include <iostream>\n#include <thread>\n#include <unistd.h>\nusing namespace std;\n\n// 传入操作类，重载运算符()\nclass Fctor{\n  public:    // 参数使用引用减少多线程资源拷贝\n    void operator()(string& msg)     // opt: string msg\n    {\n      cout <<\"from f1:\" << msg<<endl;\n      msg = \"changed\";\n    }\n};\n\nint main()\n{\n  string s = \"not changed\";\n  cout << this_thread::get_id()<<endl;\n  thread t1((Fctor()), ref(s));    // move(s),此时最后输出的s为空。\n  t1.join();\n\n  cout << s << endl;\n  cout << thread::hardware_concurrency() << endl; //当前设备核心数\n\n  return 0;\n}\n\n// output\n// thread_id\n// from f1:not changed\n// not changed\n\n```\n\n### 数据竞争及互斥对象\n避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全\n``` cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <fstream>\nusing namespace std;\n\n// lock_guard构建f单例，保证独占fout资源，从而保证线程安全\nclass LofFile\n{\n    public:\n    LofFile(){\n        f.open(\"log.txt\");\n    }\n    void shared_print(string id, int value)\n    {\n        lock_guard<mutex> locker(m_mutex);\n        f<< \"From\" << id <<\": \" << value << endl;\n    }\n\n    private:\n        mutex m_mutex;\n        ofstream f;\n};\n/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护\nmutex mu;\nvoid shared_print(string msg, int id)\n{\n    lock_guard<mutex> guard(mu);\n    // mu.lock();\n    cout << msg << id << endl;\n    // mu.unlock();\n}\n*/\n\n\nvoid function_1(LofFile& log)\n{\n    for(int i=0; i>-100; i--)\n        log.shared_print(\"From t1:\",i);\n}\nint main()\n{\n    LofFile log;\n    thread t1(function_1, ref(log));\n\n    for(int i=0; i< 100; i++)\n        log.shared_print(\"from main: \", i);\n\n    t1.join();\n    return 0;\n}\n\n```\n\n\n### 死锁\n避免死锁：\n- 评估线程是否需要两个或以上的互斥对象\n- 避免在锁住资源的同时去调用一些不熟悉的函数\n- 使用lock函数帮助mutex顺序一致\n\n``` cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <fstream>\nusing namespace std;\n\n// 循环依赖产生的死锁\nclass LofFile\n{\npublic:\n    LofFile() {}\n\n    void shared_print(string id, int value)\n    {\n        lock(m_mutex, m_mutex2);  \n        lock_guard<mutex> locker(m_mutex, adopt_lock);\n        lock_guard<mutex> locker2(m_mutex2, adopt_lock);\n        cout << \"From\" << id << \": \" << value << endl;\n    }\n    void shared_print2(string id, int value)\n    {\n        lock(m_mutex, m_mutex2); // 用lock确保互斥顺序一致\n\n        lock_guard<mutex> locker2(m_mutex2, adopt_lock); // 若调换，则可避免\n        lock_guard<mutex> locker(m_mutex, adopt_lock);\n        cout << \"From\" << id << \": \" << value << endl;\n    }\n\nprivate:\n    mutex m_mutex;\n    mutex m_mutex2;\n    ofstream f; // 被m_mutex保护的对象\n};\n\nvoid function_1(LofFile &log)\n{\n    for (int i = 0; i > -100; i--)\n        log.shared_print(\"From t1:\", i);\n}\nint main()\n{\n    LofFile log;\n    thread t1(function_1, ref(log));\n\n    for (int i = 0; i < 100; i++)\n        log.shared_print2(\"from main: \", i);\n\n    t1.join();\n    return 0;\n}\n\n```\n\n### Unique Lock和lazy Initialization\n加锁的方式：\n1. lock_guard<mutex>\n2. mutex.lock\n3. unique_lock(推荐，但占用更多系统资源)\n\n``` cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <fstream>\nusing namespace std;\n\n// 所占用的资源\nclass LofFile\n{\n    public:\n    LofFile(){\n        f.open(\"log.txt\");\n    }\n    void shared_print(string id, int value)\n    {\n        // lock_guard<mutex> locker(m_mutex);  \n        unique_lock<mutex> locker(m_mutex, defer_lock); // unique_lock占用更多系统资源\n        // do_sth()  unlock\n        // ...        \n\n        locker.lock();\n        f << id <<\": \" << value << endl;\n        locker.unlock();\n        // ...\n\n\n        locker.lock(); // another unique_lock\n\n        unique_lock<mutex> locker2 = move(locker);\n    \n    }\n\n    private:\n        mutex m_mutex;\n        ofstream f;\n};\n\n\nvoid function_1(LofFile& log)\n{\n    for(int i=0; i>-100; i--)\n        log.shared_print(\"From t1:\",i);\n}\nint main()\n{\n    LofFile log;\n    thread t1(function_1, ref(log));\n\n    for(int i=0; i< 100; i++)\n        log.shared_print(\"From main: \", i);\n\n    t1.join();\n    return 0;\n}\n\n```\n\n### 生产者和消费者问题\n结合unique_lock和lambda，让线程之间高效相互响应执行\n``` cpp\n#include <functional>\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <mutex>\n#include <thread>\n#include <deque>\n#include <condition_variable>\n\nusing namespace std;\n\ndeque<int> q;\nmutex mu;\ncondition_variable cond;  // 条件变量\n// 生产者\nvoid function_1()\n{\n    int count = 10;\n    while(count > 0)\n    {\n        unique_lock<mutex> locker(mu);\n        q.push_front(count);\n        locker.unlock();\n        cond.notify_one();\n        this_thread::sleep_for(chrono::seconds(1));\n        count--;\n    }\n}\n\n// 消费者：条件变量\nvoid function_2()\n{\n    int data = 0;\n    while(data!=1)\n    {\n        unique_lock<mutex> locker(mu);\n        cond.wait(locker, [](){ return !q.empty(); }); // 只能搭配unique_lock使用，用Lambda函数避免自解锁\n        data = q.back();\n        q.pop_back();\n        locker.unlock();\n        cout <<\"t2 got a value from t1: \" << data<<endl;\n    }\n}\n\n/* 不优雅\nvoid function_2()\n{\n    int data = 0;\n    while(data!=1)\n    {\n        unique_lock<mutex> locker(mu);\n        if(!q.empty())\n        {\n            data = q.back();\n            q.pop_back();\n            locker.unlock();\n            cout <<\"t2 got a value from t1: \" << data<<endl;\n        }\n        else {\n            locker.unlock();\n            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为\n        }\n    }\n}\n*/\n\nint main()\n{\n    thread t1(function_1);\n    thread t2(function_2);\n    t1.join();\n    t2.join();\n    return 0;\n\n}\n\n\n```\n","slug":"cpp/腾讯课堂-C-11多线程","published":1,"updated":"2022-01-05T06:25:34.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav8001228zd3oj9fvrv","content":"<h3 id=\"线程管理\"><a href=\"#线程管理\" class=\"headerlink\" title=\"线程管理\"></a>线程管理</h3><p>多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入操作类，重载运算符()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fctor</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:    <span class=\"comment\">// 参数使用引用减少多线程资源拷贝</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(string&amp; msg)</span>     <span class=\"comment\">// opt: string msg</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      cout &lt;&lt;<span class=\"string\">&quot;from f1:&quot;</span> &lt;&lt; msg&lt;&lt;endl;</span><br><span class=\"line\">      msg = <span class=\"string\">&quot;changed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  string s = <span class=\"string\">&quot;not changed&quot;</span>;</span><br><span class=\"line\">  cout &lt;&lt; this_thread::<span class=\"built_in\">get_id</span>()&lt;&lt;endl;</span><br><span class=\"line\">  <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">((Fctor()), ref(s))</span></span>;    <span class=\"comment\">// move(s),此时最后输出的s为空。</span></span><br><span class=\"line\">  t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">  cout &lt;&lt; thread::<span class=\"built_in\">hardware_concurrency</span>() &lt;&lt; endl; <span class=\"comment\">//当前设备核心数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\"><span class=\"comment\">// thread_id</span></span><br><span class=\"line\"><span class=\"comment\">// from f1:not changed</span></span><br><span class=\"line\"><span class=\"comment\">// not changed</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据竞争及互斥对象\"><a href=\"#数据竞争及互斥对象\" class=\"headerlink\" title=\"数据竞争及互斥对象\"></a>数据竞争及互斥对象</h3><p>避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lock_guard构建f单例，保证独占fout资源，从而保证线程安全</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LofFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LofFile</span>()&#123;</span><br><span class=\"line\">        f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;log.txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex)</span></span>;</span><br><span class=\"line\">        f&lt;&lt; <span class=\"string\">&quot;From&quot;</span> &lt;&lt; id &lt;&lt;<span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        mutex m_mutex;</span><br><span class=\"line\">        ofstream f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护</span></span><br><span class=\"line\"><span class=\"comment\">mutex mu;</span></span><br><span class=\"line\"><span class=\"comment\">void shared_print(string msg, int id)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    lock_guard&lt;mutex&gt; guard(mu);</span></span><br><span class=\"line\"><span class=\"comment\">    // mu.lock();</span></span><br><span class=\"line\"><span class=\"comment\">    cout &lt;&lt; msg &lt;&lt; id &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">    // mu.unlock();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">(LofFile&amp; log)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&gt;<span class=\"number\">-100</span>; i--)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From t1:&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LofFile log;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1, ref(log))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;from main: &quot;</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>避免死锁：</p>\n<ul>\n<li>评估线程是否需要两个或以上的互斥对象</li>\n<li>避免在锁住资源的同时去调用一些不熟悉的函数</li>\n<li>使用lock函数帮助mutex顺序一致</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环依赖产生的死锁</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LofFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LofFile</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">lock</span>(m_mutex, m_mutex2);  </span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex, adopt_lock)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker2</span><span class=\"params\">(m_mutex2, adopt_lock)</span></span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print2</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">lock</span>(m_mutex, m_mutex2); <span class=\"comment\">// 用lock确保互斥顺序一致</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker2</span><span class=\"params\">(m_mutex2, adopt_lock)</span></span>; <span class=\"comment\">// 若调换，则可避免</span></span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex, adopt_lock)</span></span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    mutex m_mutex;</span><br><span class=\"line\">    mutex m_mutex2;</span><br><span class=\"line\">    ofstream f; <span class=\"comment\">// 被m_mutex保护的对象</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">(LofFile &amp;log)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &gt; <span class=\"number\">-100</span>; i--)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From t1:&quot;</span>, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LofFile log;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1, ref(log))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print2</span>(<span class=\"string\">&quot;from main: &quot;</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Unique-Lock和lazy-Initialization\"><a href=\"#Unique-Lock和lazy-Initialization\" class=\"headerlink\" title=\"Unique Lock和lazy Initialization\"></a>Unique Lock和lazy Initialization</h3><p>加锁的方式：</p>\n<ol>\n<li>lock_guard<mutex></li>\n<li>mutex.lock</li>\n<li>unique_lock(推荐，但占用更多系统资源)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所占用的资源</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LofFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LofFile</span>()&#123;</span><br><span class=\"line\">        f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;log.txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// lock_guard&lt;mutex&gt; locker(m_mutex);  </span></span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex, defer_lock)</span></span>; <span class=\"comment\">// unique_lock占用更多系统资源</span></span><br><span class=\"line\">        <span class=\"comment\">// do_sth()  unlock</span></span><br><span class=\"line\">        <span class=\"comment\">// ...        </span></span><br><span class=\"line\"></span><br><span class=\"line\">        locker.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">        f &lt;&lt; id &lt;&lt;<span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">        locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        locker.<span class=\"built_in\">lock</span>(); <span class=\"comment\">// another unique_lock</span></span><br><span class=\"line\"></span><br><span class=\"line\">        unique_lock&lt;mutex&gt; locker2 = <span class=\"built_in\">move</span>(locker);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        mutex m_mutex;</span><br><span class=\"line\">        ofstream f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">(LofFile&amp; log)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&gt;<span class=\"number\">-100</span>; i--)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From t1:&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LofFile log;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1, ref(log))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From main: &quot;</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产者和消费者问题\"><a href=\"#生产者和消费者问题\" class=\"headerlink\" title=\"生产者和消费者问题\"></a>生产者和消费者问题</h3><p>结合unique_lock和lambda，让线程之间高效相互响应执行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">deque&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">mutex mu;</span><br><span class=\"line\">condition_variable cond;  <span class=\"comment\">// 条件变量</span></span><br><span class=\"line\"><span class=\"comment\">// 生产者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(mu)</span></span>;</span><br><span class=\"line\">        q.<span class=\"built_in\">push_front</span>(count);</span><br><span class=\"line\">        locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        cond.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">        this_thread::<span class=\"built_in\">sleep_for</span>(chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者：条件变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(data!=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(mu)</span></span>;</span><br><span class=\"line\">        cond.<span class=\"built_in\">wait</span>(locker, []()&#123; <span class=\"keyword\">return</span> !q.<span class=\"built_in\">empty</span>(); &#125;); <span class=\"comment\">// 只能搭配unique_lock使用，用Lambda函数避免自解锁</span></span><br><span class=\"line\">        data = q.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        cout &lt;&lt;<span class=\"string\">&quot;t2 got a value from t1: &quot;</span> &lt;&lt; data&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不优雅</span></span><br><span class=\"line\"><span class=\"comment\">void function_2()</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    while(data!=1)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        unique_lock&lt;mutex&gt; locker(mu);</span></span><br><span class=\"line\"><span class=\"comment\">        if(!q.empty())</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            data = q.back();</span></span><br><span class=\"line\"><span class=\"comment\">            q.pop_back();</span></span><br><span class=\"line\"><span class=\"comment\">            locker.unlock();</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt;&quot;t2 got a value from t1: &quot; &lt;&lt; data&lt;&lt;endl;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            locker.unlock();</span></span><br><span class=\"line\"><span class=\"comment\">            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(function_2)</span></span>;</span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    t2.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":5425,"excerpt":"","more":"<h3 id=\"线程管理\"><a href=\"#线程管理\" class=\"headerlink\" title=\"线程管理\"></a>线程管理</h3><p>多线程的执行函数尽量用传引用，以减少不必要资源开销；根据hardware_concurrency得到核心数来决定开多线程的数量；</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入操作类，重载运算符()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fctor</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:    <span class=\"comment\">// 参数使用引用减少多线程资源拷贝</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(string&amp; msg)</span>     <span class=\"comment\">// opt: string msg</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">      cout &lt;&lt;<span class=\"string\">&quot;from f1:&quot;</span> &lt;&lt; msg&lt;&lt;endl;</span><br><span class=\"line\">      msg = <span class=\"string\">&quot;changed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  string s = <span class=\"string\">&quot;not changed&quot;</span>;</span><br><span class=\"line\">  cout &lt;&lt; this_thread::<span class=\"built_in\">get_id</span>()&lt;&lt;endl;</span><br><span class=\"line\">  <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">((Fctor()), ref(s))</span></span>;    <span class=\"comment\">// move(s),此时最后输出的s为空。</span></span><br><span class=\"line\">  t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  cout &lt;&lt; s &lt;&lt; endl;</span><br><span class=\"line\">  cout &lt;&lt; thread::<span class=\"built_in\">hardware_concurrency</span>() &lt;&lt; endl; <span class=\"comment\">//当前设备核心数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\"><span class=\"comment\">// thread_id</span></span><br><span class=\"line\"><span class=\"comment\">// from f1:not changed</span></span><br><span class=\"line\"><span class=\"comment\">// not changed</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据竞争及互斥对象\"><a href=\"#数据竞争及互斥对象\" class=\"headerlink\" title=\"数据竞争及互斥对象\"></a>数据竞争及互斥对象</h3><p>避免数据竞争,用lock_guard解决抛出异常的问题;lock_guard<mutex>保证线程独占资源而安全</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lock_guard构建f单例，保证独占fout资源，从而保证线程安全</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LofFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LofFile</span>()&#123;</span><br><span class=\"line\">        f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;log.txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex)</span></span>;</span><br><span class=\"line\">        f&lt;&lt; <span class=\"string\">&quot;From&quot;</span> &lt;&lt; id &lt;&lt;<span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        mutex m_mutex;</span><br><span class=\"line\">        ofstream f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/*  cout资源为全局所有，即使加入互斥对象依然不能完全保护</span></span><br><span class=\"line\"><span class=\"comment\">mutex mu;</span></span><br><span class=\"line\"><span class=\"comment\">void shared_print(string msg, int id)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    lock_guard&lt;mutex&gt; guard(mu);</span></span><br><span class=\"line\"><span class=\"comment\">    // mu.lock();</span></span><br><span class=\"line\"><span class=\"comment\">    cout &lt;&lt; msg &lt;&lt; id &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">    // mu.unlock();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">(LofFile&amp; log)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&gt;<span class=\"number\">-100</span>; i--)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From t1:&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LofFile log;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1, ref(log))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;from main: &quot;</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>避免死锁：</p>\n<ul>\n<li>评估线程是否需要两个或以上的互斥对象</li>\n<li>避免在锁住资源的同时去调用一些不熟悉的函数</li>\n<li>使用lock函数帮助mutex顺序一致</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环依赖产生的死锁</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LofFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LofFile</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">lock</span>(m_mutex, m_mutex2);  </span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex, adopt_lock)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker2</span><span class=\"params\">(m_mutex2, adopt_lock)</span></span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print2</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">lock</span>(m_mutex, m_mutex2); <span class=\"comment\">// 用lock确保互斥顺序一致</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker2</span><span class=\"params\">(m_mutex2, adopt_lock)</span></span>; <span class=\"comment\">// 若调换，则可避免</span></span><br><span class=\"line\">        <span class=\"function\">lock_guard&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex, adopt_lock)</span></span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;From&quot;</span> &lt;&lt; id &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    mutex m_mutex;</span><br><span class=\"line\">    mutex m_mutex2;</span><br><span class=\"line\">    ofstream f; <span class=\"comment\">// 被m_mutex保护的对象</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">(LofFile &amp;log)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &gt; <span class=\"number\">-100</span>; i--)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From t1:&quot;</span>, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LofFile log;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1, ref(log))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print2</span>(<span class=\"string\">&quot;from main: &quot;</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Unique-Lock和lazy-Initialization\"><a href=\"#Unique-Lock和lazy-Initialization\" class=\"headerlink\" title=\"Unique Lock和lazy Initialization\"></a>Unique Lock和lazy Initialization</h3><p>加锁的方式：</p>\n<ol>\n<li>lock_guard<mutex></li>\n<li>mutex.lock</li>\n<li>unique_lock(推荐，但占用更多系统资源)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所占用的资源</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LofFile</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LofFile</span>()&#123;</span><br><span class=\"line\">        f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;log.txt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shared_print</span><span class=\"params\">(string id, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// lock_guard&lt;mutex&gt; locker(m_mutex);  </span></span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(m_mutex, defer_lock)</span></span>; <span class=\"comment\">// unique_lock占用更多系统资源</span></span><br><span class=\"line\">        <span class=\"comment\">// do_sth()  unlock</span></span><br><span class=\"line\">        <span class=\"comment\">// ...        </span></span><br><span class=\"line\"></span><br><span class=\"line\">        locker.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">        f &lt;&lt; id &lt;&lt;<span class=\"string\">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class=\"line\">        locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        locker.<span class=\"built_in\">lock</span>(); <span class=\"comment\">// another unique_lock</span></span><br><span class=\"line\"></span><br><span class=\"line\">        unique_lock&lt;mutex&gt; locker2 = <span class=\"built_in\">move</span>(locker);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        mutex m_mutex;</span><br><span class=\"line\">        ofstream f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">(LofFile&amp; log)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&gt;<span class=\"number\">-100</span>; i--)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From t1:&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LofFile log;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1, ref(log))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">        log.<span class=\"built_in\">shared_print</span>(<span class=\"string\">&quot;From main: &quot;</span>, i);</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产者和消费者问题\"><a href=\"#生产者和消费者问题\" class=\"headerlink\" title=\"生产者和消费者问题\"></a>生产者和消费者问题</h3><p>结合unique_lock和lambda，让线程之间高效相互响应执行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;condition_variable&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">deque&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">mutex mu;</span><br><span class=\"line\">condition_variable cond;  <span class=\"comment\">// 条件变量</span></span><br><span class=\"line\"><span class=\"comment\">// 生产者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(mu)</span></span>;</span><br><span class=\"line\">        q.<span class=\"built_in\">push_front</span>(count);</span><br><span class=\"line\">        locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        cond.<span class=\"built_in\">notify_one</span>();</span><br><span class=\"line\">        this_thread::<span class=\"built_in\">sleep_for</span>(chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者：条件变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function_2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(data!=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(mu)</span></span>;</span><br><span class=\"line\">        cond.<span class=\"built_in\">wait</span>(locker, []()&#123; <span class=\"keyword\">return</span> !q.<span class=\"built_in\">empty</span>(); &#125;); <span class=\"comment\">// 只能搭配unique_lock使用，用Lambda函数避免自解锁</span></span><br><span class=\"line\">        data = q.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        cout &lt;&lt;<span class=\"string\">&quot;t2 got a value from t1: &quot;</span> &lt;&lt; data&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不优雅</span></span><br><span class=\"line\"><span class=\"comment\">void function_2()</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    while(data!=1)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        unique_lock&lt;mutex&gt; locker(mu);</span></span><br><span class=\"line\"><span class=\"comment\">        if(!q.empty())</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            data = q.back();</span></span><br><span class=\"line\"><span class=\"comment\">            q.pop_back();</span></span><br><span class=\"line\"><span class=\"comment\">            locker.unlock();</span></span><br><span class=\"line\"><span class=\"comment\">            cout &lt;&lt;&quot;t2 got a value from t1: &quot; &lt;&lt; data&lt;&lt;endl;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            locker.unlock();</span></span><br><span class=\"line\"><span class=\"comment\">            // this_thread::sleep_for(chrono::milliseconds(10));  若无数据，一直解锁locker;此时加入sleep缓解不停释放的行为</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t1</span><span class=\"params\">(function_1)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">thread <span class=\"title\">t2</span><span class=\"params\">(function_2)</span></span>;</span><br><span class=\"line\">    t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    t2.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"墙面分割","mathjax":true,"date":"2022-01-14T06:12:27.000Z","_content":"\n### 区域生长分割region growing segmentation\n\n算法核心：基于点法线之间角度的比较，尽量将满足平滑约束的相邻点合并在一起，以一簇点集的形式输出，视为相同平面\n\n工作原理：区域增长从有最小曲率值curvature的点。则需要计算所有曲率值并进行排序；因为曲率最小的点位于平坦区域，从平坦区域增长可以减少区域的总数。（曲率与法线的求解方法类似,法线描述点在表面的法向，曲率则是法线间协方差矩阵的特征值，描述法向一致性)\n\n具体过程：\n1. 对未标记点的曲率排序，将最小曲率点放入种子集\n2. 对每个种子的所有邻点计算\n  2.1 每个近邻点与当前点的法线角度差(reg.setSmoothnessThreshold),如果小于阈值则重点考虑，进入2.2判断\n  2.2 该点通过2.1法线角度差检验，如果曲率小于设定的阈值(reg.setCurvatureThreshold)，这个点即被添加到种子点集，属于当前平面\n3. 通过两次检验的点，被从原始点云去除\n4. 设置最小点簇的点数reg.setMinClusterSize,以及最大簇reg.segMaxClusterSize\n5. 重复1-3生成min~max个点数的所有平面，并对不同平面标记颜色区分\n6. 直到算法在剩余点中生成的点簇不能满足min,停止工作\n","source":"_posts/pcl/墙面分割.md","raw":"---\ntitle: 墙面分割\ncategories:\n  - pcl\nmathjax: true\ndate: 2022-01-14 14:12:27\ntags: pcl\n---\n\n### 区域生长分割region growing segmentation\n\n算法核心：基于点法线之间角度的比较，尽量将满足平滑约束的相邻点合并在一起，以一簇点集的形式输出，视为相同平面\n\n工作原理：区域增长从有最小曲率值curvature的点。则需要计算所有曲率值并进行排序；因为曲率最小的点位于平坦区域，从平坦区域增长可以减少区域的总数。（曲率与法线的求解方法类似,法线描述点在表面的法向，曲率则是法线间协方差矩阵的特征值，描述法向一致性)\n\n具体过程：\n1. 对未标记点的曲率排序，将最小曲率点放入种子集\n2. 对每个种子的所有邻点计算\n  2.1 每个近邻点与当前点的法线角度差(reg.setSmoothnessThreshold),如果小于阈值则重点考虑，进入2.2判断\n  2.2 该点通过2.1法线角度差检验，如果曲率小于设定的阈值(reg.setCurvatureThreshold)，这个点即被添加到种子点集，属于当前平面\n3. 通过两次检验的点，被从原始点云去除\n4. 设置最小点簇的点数reg.setMinClusterSize,以及最大簇reg.segMaxClusterSize\n5. 重复1-3生成min~max个点数的所有平面，并对不同平面标记颜色区分\n6. 直到算法在剩余点中生成的点簇不能满足min,停止工作\n","slug":"pcl/墙面分割","published":1,"updated":"2022-01-17T09:21:51.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgav9001328zd1gtvdt83","content":"<h3 id=\"区域生长分割region-growing-segmentation\"><a href=\"#区域生长分割region-growing-segmentation\" class=\"headerlink\" title=\"区域生长分割region growing segmentation\"></a>区域生长分割region growing segmentation</h3><p>算法核心：基于点法线之间角度的比较，尽量将满足平滑约束的相邻点合并在一起，以一簇点集的形式输出，视为相同平面</p>\n<p>工作原理：区域增长从有最小曲率值curvature的点。则需要计算所有曲率值并进行排序；因为曲率最小的点位于平坦区域，从平坦区域增长可以减少区域的总数。（曲率与法线的求解方法类似,法线描述点在表面的法向，曲率则是法线间协方差矩阵的特征值，描述法向一致性)</p>\n<p>具体过程：</p>\n<ol>\n<li>对未标记点的曲率排序，将最小曲率点放入种子集</li>\n<li>对每个种子的所有邻点计算</li>\n<li>1 每个近邻点与当前点的法线角度差(reg.setSmoothnessThreshold),如果小于阈值则重点考虑，进入2.2判断</li>\n<li>2 该点通过2.1法线角度差检验，如果曲率小于设定的阈值(reg.setCurvatureThreshold)，这个点即被添加到种子点集，属于当前平面</li>\n<li>通过两次检验的点，被从原始点云去除</li>\n<li>设置最小点簇的点数reg.setMinClusterSize,以及最大簇reg.segMaxClusterSize</li>\n<li>重复1-3生成min~max个点数的所有平面，并对不同平面标记颜色区分</li>\n<li>直到算法在剩余点中生成的点簇不能满足min,停止工作</li>\n</ol>\n","site":{"data":{}},"length":524,"excerpt":"","more":"<h3 id=\"区域生长分割region-growing-segmentation\"><a href=\"#区域生长分割region-growing-segmentation\" class=\"headerlink\" title=\"区域生长分割region growing segmentation\"></a>区域生长分割region growing segmentation</h3><p>算法核心：基于点法线之间角度的比较，尽量将满足平滑约束的相邻点合并在一起，以一簇点集的形式输出，视为相同平面</p>\n<p>工作原理：区域增长从有最小曲率值curvature的点。则需要计算所有曲率值并进行排序；因为曲率最小的点位于平坦区域，从平坦区域增长可以减少区域的总数。（曲率与法线的求解方法类似,法线描述点在表面的法向，曲率则是法线间协方差矩阵的特征值，描述法向一致性)</p>\n<p>具体过程：</p>\n<ol>\n<li>对未标记点的曲率排序，将最小曲率点放入种子集</li>\n<li>对每个种子的所有邻点计算</li>\n<li>1 每个近邻点与当前点的法线角度差(reg.setSmoothnessThreshold),如果小于阈值则重点考虑，进入2.2判断</li>\n<li>2 该点通过2.1法线角度差检验，如果曲率小于设定的阈值(reg.setCurvatureThreshold)，这个点即被添加到种子点集，属于当前平面</li>\n<li>通过两次检验的点，被从原始点云去除</li>\n<li>设置最小点簇的点数reg.setMinClusterSize,以及最大簇reg.segMaxClusterSize</li>\n<li>重复1-3生成min~max个点数的所有平面，并对不同平面标记颜色区分</li>\n<li>直到算法在剩余点中生成的点簇不能满足min,停止工作</li>\n</ol>\n"},{"title":"特征匹配","mathjax":true,"date":"2022-01-13T09:32:27.000Z","_content":"\n#### ubuntu下opencv CMakeList文件\n通过terminal直接apt安装opencv，一般挂载在/usr/local/lib下；此时find_package即可找到\n\n``` cpp\n\n# cmake needs this line\ncmake_minimum_required(VERSION 3.1)\n\n# Define project name\nproject(FeatureMapping)\n\n# Find OpenCV, you may need to set OpenCV_DIR variable\n# to the absolute path to the directory containing OpenCVConfig.cmake file\n# via the command line or GUI\nfind_package(OpenCV REQUIRED)\n\n# Enable C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n\n# Declare the executable target built from your sources\nadd_executable(main main.cpp)\n\n# Link your application with OpenCV libraries\ntarget_link_libraries(main PRIVATE ${OpenCV_LIBS})\n\n```\n\n\n#### 两RGB图间的特征匹配\n具体可参考官方教程[https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html](https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html)\n\n\n``` cpp\n#include <opencv4/opencv2/highgui.hpp>\n#include <opencv4/opencv2/opencv.hpp>\n#include <opencv4/opencv2/imgproc.hpp>\n#include <opencv4/opencv2/features2d.hpp>\n#include <opencv4/opencv2/core.hpp>\n#include <opencv4/opencv2/calib3d.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char **argv)\n{\n    cout << CV_VERSION << endl;\n\n    Mat img1 = imread(\"001.JPG\");\n    Mat img2 = imread(\"002.JPG\");\n\n    Ptr<SIFT> detector = SIFT::create();\n    vector<KeyPoint> keypoints1, keypoints2;\n    Mat descriptors1, descriptors2;\n    detector->detectAndCompute(img1, noArray(), keypoints1, descriptors1);\n    detector->detectAndCompute(img2, noArray(), keypoints2, descriptors2);\n\n    Ptr<DescriptorMatcher> matcher = DescriptorMatcher::create(DescriptorMatcher::FLANNBASED);\n\n    vector<vector<DMatch>> knn_matches;\n    matcher->knnMatch(descriptors1, descriptors2, knn_matches, 2);\n\n    const float ratio_thresh = 0.5f;\n    vector<DMatch> good_matches;\n    for(size_t i=0; i<knn_matches.size();i++)\n    {\n        if(knn_matches[i][0].distance < ratio_thresh * knn_matches[i][1].distance)\n        {\n            good_matches.push_back(knn_matches[i][0]);\n        }\n    }\n\n    Mat img_matches;\n    drawMatches(img1, keypoints1, img2, keypoints2, good_matches, img_matches);\n    \n    \n    //-- Localize the object\n    std::vector<Point2f> obj;\n    std::vector<Point2f> scene;\n    for( size_t i = 0; i < good_matches.size(); i++ )\n    {\n        //-- Get the keypoints from the good matches\n        obj.push_back( keypoints1[ good_matches[i].queryIdx ].pt );\n        scene.push_back( keypoints2[ good_matches[i].trainIdx ].pt );\n    }\n    Mat H = findHomography( obj, scene, RANSAC );\n    cout << H << endl;\n    //-- Get the corners from the image_1 ( the object to be \"detected\" )\n    std::vector<Point2f> obj_corners(4);\n    obj_corners[0] = Point2f(0, 0);\n    obj_corners[1] = Point2f( (float)img1.cols, 0 );\n    obj_corners[2] = Point2f( (float)img1.cols, (float)img1.rows );\n    obj_corners[3] = Point2f( 0, (float)img1.rows );\n    std::vector<Point2f> scene_corners(4);\n    perspectiveTransform( obj_corners, scene_corners, H);\n    //-- Draw lines between the corners (the mapped object in the scene - image_2 )\n    line( img_matches, scene_corners[0] + Point2f((float)img1.cols, 0),\n          scene_corners[1] + Point2f((float)img1.cols, 0), Scalar(0, 255, 0), 4 );\n    line( img_matches, scene_corners[1] + Point2f((float)img1.cols, 0),\n          scene_corners[2] + Point2f((float)img1.cols, 0), Scalar( 0, 255, 0), 4 );\n    line( img_matches, scene_corners[2] + Point2f((float)img1.cols, 0),\n          scene_corners[3] + Point2f((float)img1.cols, 0), Scalar( 0, 255, 0), 4 );\n    line( img_matches, scene_corners[3] + Point2f((float)img1.cols, 0),\n          scene_corners[0] + Point2f((float)img1.cols, 0), Scalar( 0, 255, 0), 4 );\n    //-- Show detected matches\n\n    namedWindow(\"Matches\", WINDOW_NORMAL);\n    imshow(\"Matches\", img_matches );\n    // imwrite(\"good_res.jpg\", img_matches);\n    \n   \n    waitKey();\n    return 0;\n}\n\n/*\n输出H：\n[0.9771928708495958, -0.008932567941541457, 129.4806431662592;\n 0.0342771681684575, 0.9114878090650101, 163.0011063784843;\n 3.322036688562577e-05, -1.090291446290035e-05, 1]\n\n*/\n\n```\n\n值得注意的是，本版本是opencv 4.5,与Opencv2/3有很多语法不一样了；关于特征点和描述子最大的区别：特征点是特征坐标KeyPoint，描述子是描述邻域信息的Mat。\n\n特征匹配总体的流程：\n1.首先读取图片，创建检测特征SIFT，ORB，SURF(xfeature)等\n2.如果检测子包含描述子，则直接detectAndCompute\n3.一般用BFMatcher直接对描述子点对vector<DMatch> 进行暴力匹配，这里是优化加速版用FLANN的knn，注意的是ORB可用HAMMING距离，其他则不可。\n4.接着对KNN点对进行基于距离的筛选\n5.对置信度高的点对进行RANSAC的单应变换矩阵求解\n\n至此基本完成特征匹配的功能，得到的单应矩阵描述了图片间的变换关系；这是很多CV高级应用的基础，如校正，拼接，SLAM等。","source":"_posts/opencv/特征匹配.md","raw":"---\ntitle: 特征匹配\ncategories:\n  - opencv\nmathjax: true\ndate: 2022-01-13 17:32:27\ntags: opencv\n---\n\n#### ubuntu下opencv CMakeList文件\n通过terminal直接apt安装opencv，一般挂载在/usr/local/lib下；此时find_package即可找到\n\n``` cpp\n\n# cmake needs this line\ncmake_minimum_required(VERSION 3.1)\n\n# Define project name\nproject(FeatureMapping)\n\n# Find OpenCV, you may need to set OpenCV_DIR variable\n# to the absolute path to the directory containing OpenCVConfig.cmake file\n# via the command line or GUI\nfind_package(OpenCV REQUIRED)\n\n# Enable C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n\n# Declare the executable target built from your sources\nadd_executable(main main.cpp)\n\n# Link your application with OpenCV libraries\ntarget_link_libraries(main PRIVATE ${OpenCV_LIBS})\n\n```\n\n\n#### 两RGB图间的特征匹配\n具体可参考官方教程[https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html](https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html)\n\n\n``` cpp\n#include <opencv4/opencv2/highgui.hpp>\n#include <opencv4/opencv2/opencv.hpp>\n#include <opencv4/opencv2/imgproc.hpp>\n#include <opencv4/opencv2/features2d.hpp>\n#include <opencv4/opencv2/core.hpp>\n#include <opencv4/opencv2/calib3d.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char **argv)\n{\n    cout << CV_VERSION << endl;\n\n    Mat img1 = imread(\"001.JPG\");\n    Mat img2 = imread(\"002.JPG\");\n\n    Ptr<SIFT> detector = SIFT::create();\n    vector<KeyPoint> keypoints1, keypoints2;\n    Mat descriptors1, descriptors2;\n    detector->detectAndCompute(img1, noArray(), keypoints1, descriptors1);\n    detector->detectAndCompute(img2, noArray(), keypoints2, descriptors2);\n\n    Ptr<DescriptorMatcher> matcher = DescriptorMatcher::create(DescriptorMatcher::FLANNBASED);\n\n    vector<vector<DMatch>> knn_matches;\n    matcher->knnMatch(descriptors1, descriptors2, knn_matches, 2);\n\n    const float ratio_thresh = 0.5f;\n    vector<DMatch> good_matches;\n    for(size_t i=0; i<knn_matches.size();i++)\n    {\n        if(knn_matches[i][0].distance < ratio_thresh * knn_matches[i][1].distance)\n        {\n            good_matches.push_back(knn_matches[i][0]);\n        }\n    }\n\n    Mat img_matches;\n    drawMatches(img1, keypoints1, img2, keypoints2, good_matches, img_matches);\n    \n    \n    //-- Localize the object\n    std::vector<Point2f> obj;\n    std::vector<Point2f> scene;\n    for( size_t i = 0; i < good_matches.size(); i++ )\n    {\n        //-- Get the keypoints from the good matches\n        obj.push_back( keypoints1[ good_matches[i].queryIdx ].pt );\n        scene.push_back( keypoints2[ good_matches[i].trainIdx ].pt );\n    }\n    Mat H = findHomography( obj, scene, RANSAC );\n    cout << H << endl;\n    //-- Get the corners from the image_1 ( the object to be \"detected\" )\n    std::vector<Point2f> obj_corners(4);\n    obj_corners[0] = Point2f(0, 0);\n    obj_corners[1] = Point2f( (float)img1.cols, 0 );\n    obj_corners[2] = Point2f( (float)img1.cols, (float)img1.rows );\n    obj_corners[3] = Point2f( 0, (float)img1.rows );\n    std::vector<Point2f> scene_corners(4);\n    perspectiveTransform( obj_corners, scene_corners, H);\n    //-- Draw lines between the corners (the mapped object in the scene - image_2 )\n    line( img_matches, scene_corners[0] + Point2f((float)img1.cols, 0),\n          scene_corners[1] + Point2f((float)img1.cols, 0), Scalar(0, 255, 0), 4 );\n    line( img_matches, scene_corners[1] + Point2f((float)img1.cols, 0),\n          scene_corners[2] + Point2f((float)img1.cols, 0), Scalar( 0, 255, 0), 4 );\n    line( img_matches, scene_corners[2] + Point2f((float)img1.cols, 0),\n          scene_corners[3] + Point2f((float)img1.cols, 0), Scalar( 0, 255, 0), 4 );\n    line( img_matches, scene_corners[3] + Point2f((float)img1.cols, 0),\n          scene_corners[0] + Point2f((float)img1.cols, 0), Scalar( 0, 255, 0), 4 );\n    //-- Show detected matches\n\n    namedWindow(\"Matches\", WINDOW_NORMAL);\n    imshow(\"Matches\", img_matches );\n    // imwrite(\"good_res.jpg\", img_matches);\n    \n   \n    waitKey();\n    return 0;\n}\n\n/*\n输出H：\n[0.9771928708495958, -0.008932567941541457, 129.4806431662592;\n 0.0342771681684575, 0.9114878090650101, 163.0011063784843;\n 3.322036688562577e-05, -1.090291446290035e-05, 1]\n\n*/\n\n```\n\n值得注意的是，本版本是opencv 4.5,与Opencv2/3有很多语法不一样了；关于特征点和描述子最大的区别：特征点是特征坐标KeyPoint，描述子是描述邻域信息的Mat。\n\n特征匹配总体的流程：\n1.首先读取图片，创建检测特征SIFT，ORB，SURF(xfeature)等\n2.如果检测子包含描述子，则直接detectAndCompute\n3.一般用BFMatcher直接对描述子点对vector<DMatch> 进行暴力匹配，这里是优化加速版用FLANN的knn，注意的是ORB可用HAMMING距离，其他则不可。\n4.接着对KNN点对进行基于距离的筛选\n5.对置信度高的点对进行RANSAC的单应变换矩阵求解\n\n至此基本完成特征匹配的功能，得到的单应矩阵描述了图片间的变换关系；这是很多CV高级应用的基础，如校正，拼接，SLAM等。","slug":"opencv/特征匹配","published":1,"updated":"2022-01-13T09:49:45.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgava001728zd1cnx0x4h","content":"<h4 id=\"ubuntu下opencv-CMakeList文件\"><a href=\"#ubuntu下opencv-CMakeList文件\" class=\"headerlink\" title=\"ubuntu下opencv CMakeList文件\"></a>ubuntu下opencv CMakeList文件</h4><p>通过terminal直接apt安装opencv，一般挂载在/usr/local/lib下；此时find_package即可找到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># cmake needs this <span class=\"meta-keyword\">line</span></span></span><br><span class=\"line\"><span class=\"built_in\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"function\">Define project name</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">project</span><span class=\"params\">(FeatureMapping)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Find OpenCV, you may need to set OpenCV_DIR variable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\"># to the absolute path to the directory containing OpenCVConfig.cmake file</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\"># via the command <span class=\"meta-keyword\">line</span> or GUI</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">find_package</span><span class=\"params\">(OpenCV REQUIRED)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Enable C++11</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set</span><span class=\"params\">(CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set</span><span class=\"params\">(CMAKE_CXX_STANDARD_REQUIRED TRUE)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Declare the executable target built from your sources</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(main main.cpp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Link your application with OpenCV libraries</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(main PRIVATE $&#123;OpenCV_LIBS&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"两RGB图间的特征匹配\"><a href=\"#两RGB图间的特征匹配\" class=\"headerlink\" title=\"两RGB图间的特征匹配\"></a>两RGB图间的特征匹配</h4><p>具体可参考官方教程<a href=\"https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html\">https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/highgui.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/imgproc.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/features2d.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/core.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/calib3d.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mat img1 = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;001.JPG&quot;</span>);</span><br><span class=\"line\">    Mat img2 = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;002.JPG&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Ptr&lt;SIFT&gt; detector = SIFT::<span class=\"built_in\">create</span>();</span><br><span class=\"line\">    vector&lt;KeyPoint&gt; keypoints1, keypoints2;</span><br><span class=\"line\">    Mat descriptors1, descriptors2;</span><br><span class=\"line\">    detector-&gt;<span class=\"built_in\">detectAndCompute</span>(img1, <span class=\"built_in\">noArray</span>(), keypoints1, descriptors1);</span><br><span class=\"line\">    detector-&gt;<span class=\"built_in\">detectAndCompute</span>(img2, <span class=\"built_in\">noArray</span>(), keypoints2, descriptors2);</span><br><span class=\"line\"></span><br><span class=\"line\">    Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class=\"built_in\">create</span>(DescriptorMatcher::FLANNBASED);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;vector&lt;DMatch&gt;&gt; knn_matches;</span><br><span class=\"line\">    matcher-&gt;<span class=\"built_in\">knnMatch</span>(descriptors1, descriptors2, knn_matches, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> ratio_thresh = <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    vector&lt;DMatch&gt; good_matches;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i=<span class=\"number\">0</span>; i&lt;knn_matches.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(knn_matches[i][<span class=\"number\">0</span>].distance &lt; ratio_thresh * knn_matches[i][<span class=\"number\">1</span>].distance)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            good_matches.<span class=\"built_in\">push_back</span>(knn_matches[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mat img_matches;</span><br><span class=\"line\">    <span class=\"built_in\">drawMatches</span>(img1, keypoints1, img2, keypoints2, good_matches, img_matches);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//-- Localize the object</span></span><br><span class=\"line\">    std::vector&lt;Point2f&gt; obj;</span><br><span class=\"line\">    std::vector&lt;Point2f&gt; scene;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; good_matches.<span class=\"built_in\">size</span>(); i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//-- Get the keypoints from the good matches</span></span><br><span class=\"line\">        obj.<span class=\"built_in\">push_back</span>( keypoints1[ good_matches[i].queryIdx ].pt );</span><br><span class=\"line\">        scene.<span class=\"built_in\">push_back</span>( keypoints2[ good_matches[i].trainIdx ].pt );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Mat H = <span class=\"built_in\">findHomography</span>( obj, scene, RANSAC );</span><br><span class=\"line\">    cout &lt;&lt; H &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//-- Get the corners from the image_1 ( the object to be &quot;detected&quot; )</span></span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;Point2f&gt; <span class=\"title\">obj_corners</span><span class=\"params\">(<span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">    obj_corners[<span class=\"number\">0</span>] = <span class=\"built_in\">Point2f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    obj_corners[<span class=\"number\">1</span>] = <span class=\"built_in\">Point2f</span>( (<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span> );</span><br><span class=\"line\">    obj_corners[<span class=\"number\">2</span>] = <span class=\"built_in\">Point2f</span>( (<span class=\"keyword\">float</span>)img1.cols, (<span class=\"keyword\">float</span>)img1.rows );</span><br><span class=\"line\">    obj_corners[<span class=\"number\">3</span>] = <span class=\"built_in\">Point2f</span>( <span class=\"number\">0</span>, (<span class=\"keyword\">float</span>)img1.rows );</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;Point2f&gt; <span class=\"title\">scene_corners</span><span class=\"params\">(<span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">perspectiveTransform</span>( obj_corners, scene_corners, H);</span><br><span class=\"line\">    <span class=\"comment\">//-- Draw lines between the corners (the mapped object in the scene - image_2 )</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">0</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">1</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">1</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">2</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>( <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">2</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">3</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>( <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">3</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">0</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>( <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"comment\">//-- Show detected matches</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;Matches&quot;</span>, WINDOW_NORMAL);</span><br><span class=\"line\">    <span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Matches&quot;</span>, img_matches );</span><br><span class=\"line\">    <span class=\"comment\">// imwrite(&quot;good_res.jpg&quot;, img_matches);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"built_in\">waitKey</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出H：</span></span><br><span class=\"line\"><span class=\"comment\">[0.9771928708495958, -0.008932567941541457, 129.4806431662592;</span></span><br><span class=\"line\"><span class=\"comment\"> 0.0342771681684575, 0.9114878090650101, 163.0011063784843;</span></span><br><span class=\"line\"><span class=\"comment\"> 3.322036688562577e-05, -1.090291446290035e-05, 1]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，本版本是opencv 4.5,与Opencv2/3有很多语法不一样了；关于特征点和描述子最大的区别：特征点是特征坐标KeyPoint，描述子是描述邻域信息的Mat。</p>\n<p>特征匹配总体的流程：<br>1.首先读取图片，创建检测特征SIFT，ORB，SURF(xfeature)等<br>2.如果检测子包含描述子，则直接detectAndCompute<br>3.一般用BFMatcher直接对描述子点对vector<DMatch> 进行暴力匹配，这里是优化加速版用FLANN的knn，注意的是ORB可用HAMMING距离，其他则不可。<br>4.接着对KNN点对进行基于距离的筛选<br>5.对置信度高的点对进行RANSAC的单应变换矩阵求解</p>\n<p>至此基本完成特征匹配的功能，得到的单应矩阵描述了图片间的变换关系；这是很多CV高级应用的基础，如校正，拼接，SLAM等。</p>\n","site":{"data":{}},"length":4114,"excerpt":"","more":"<h4 id=\"ubuntu下opencv-CMakeList文件\"><a href=\"#ubuntu下opencv-CMakeList文件\" class=\"headerlink\" title=\"ubuntu下opencv CMakeList文件\"></a>ubuntu下opencv CMakeList文件</h4><p>通过terminal直接apt安装opencv，一般挂载在/usr/local/lib下；此时find_package即可找到</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># cmake needs this <span class=\"meta-keyword\">line</span></span></span><br><span class=\"line\"><span class=\"built_in\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"function\">Define project name</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">project</span><span class=\"params\">(FeatureMapping)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Find OpenCV, you may need to set OpenCV_DIR variable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\"># to the absolute path to the directory containing OpenCVConfig.cmake file</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"meta\"># via the command <span class=\"meta-keyword\">line</span> or GUI</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">find_package</span><span class=\"params\">(OpenCV REQUIRED)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Enable C++11</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set</span><span class=\"params\">(CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">set</span><span class=\"params\">(CMAKE_CXX_STANDARD_REQUIRED TRUE)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Declare the executable target built from your sources</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(main main.cpp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># Link your application with OpenCV libraries</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(main PRIVATE $&#123;OpenCV_LIBS&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"两RGB图间的特征匹配\"><a href=\"#两RGB图间的特征匹配\" class=\"headerlink\" title=\"两RGB图间的特征匹配\"></a>两RGB图间的特征匹配</h4><p>具体可参考官方教程<a href=\"https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html\">https://docs.opencv.org/4.x/d7/dff/tutorial_feature_homography.html</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/highgui.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/opencv.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/imgproc.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/features2d.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/core.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;opencv4/opencv2/calib3d.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; CV_VERSION &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mat img1 = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;001.JPG&quot;</span>);</span><br><span class=\"line\">    Mat img2 = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;002.JPG&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Ptr&lt;SIFT&gt; detector = SIFT::<span class=\"built_in\">create</span>();</span><br><span class=\"line\">    vector&lt;KeyPoint&gt; keypoints1, keypoints2;</span><br><span class=\"line\">    Mat descriptors1, descriptors2;</span><br><span class=\"line\">    detector-&gt;<span class=\"built_in\">detectAndCompute</span>(img1, <span class=\"built_in\">noArray</span>(), keypoints1, descriptors1);</span><br><span class=\"line\">    detector-&gt;<span class=\"built_in\">detectAndCompute</span>(img2, <span class=\"built_in\">noArray</span>(), keypoints2, descriptors2);</span><br><span class=\"line\"></span><br><span class=\"line\">    Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class=\"built_in\">create</span>(DescriptorMatcher::FLANNBASED);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;vector&lt;DMatch&gt;&gt; knn_matches;</span><br><span class=\"line\">    matcher-&gt;<span class=\"built_in\">knnMatch</span>(descriptors1, descriptors2, knn_matches, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> ratio_thresh = <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    vector&lt;DMatch&gt; good_matches;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">size_t</span> i=<span class=\"number\">0</span>; i&lt;knn_matches.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(knn_matches[i][<span class=\"number\">0</span>].distance &lt; ratio_thresh * knn_matches[i][<span class=\"number\">1</span>].distance)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            good_matches.<span class=\"built_in\">push_back</span>(knn_matches[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Mat img_matches;</span><br><span class=\"line\">    <span class=\"built_in\">drawMatches</span>(img1, keypoints1, img2, keypoints2, good_matches, img_matches);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//-- Localize the object</span></span><br><span class=\"line\">    std::vector&lt;Point2f&gt; obj;</span><br><span class=\"line\">    std::vector&lt;Point2f&gt; scene;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; good_matches.<span class=\"built_in\">size</span>(); i++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//-- Get the keypoints from the good matches</span></span><br><span class=\"line\">        obj.<span class=\"built_in\">push_back</span>( keypoints1[ good_matches[i].queryIdx ].pt );</span><br><span class=\"line\">        scene.<span class=\"built_in\">push_back</span>( keypoints2[ good_matches[i].trainIdx ].pt );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Mat H = <span class=\"built_in\">findHomography</span>( obj, scene, RANSAC );</span><br><span class=\"line\">    cout &lt;&lt; H &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"comment\">//-- Get the corners from the image_1 ( the object to be &quot;detected&quot; )</span></span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;Point2f&gt; <span class=\"title\">obj_corners</span><span class=\"params\">(<span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">    obj_corners[<span class=\"number\">0</span>] = <span class=\"built_in\">Point2f</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    obj_corners[<span class=\"number\">1</span>] = <span class=\"built_in\">Point2f</span>( (<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span> );</span><br><span class=\"line\">    obj_corners[<span class=\"number\">2</span>] = <span class=\"built_in\">Point2f</span>( (<span class=\"keyword\">float</span>)img1.cols, (<span class=\"keyword\">float</span>)img1.rows );</span><br><span class=\"line\">    obj_corners[<span class=\"number\">3</span>] = <span class=\"built_in\">Point2f</span>( <span class=\"number\">0</span>, (<span class=\"keyword\">float</span>)img1.rows );</span><br><span class=\"line\">    <span class=\"function\">std::vector&lt;Point2f&gt; <span class=\"title\">scene_corners</span><span class=\"params\">(<span class=\"number\">4</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">perspectiveTransform</span>( obj_corners, scene_corners, H);</span><br><span class=\"line\">    <span class=\"comment\">//-- Draw lines between the corners (the mapped object in the scene - image_2 )</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">0</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">1</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">1</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">2</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>( <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">2</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">3</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>( <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"built_in\">line</span>( img_matches, scene_corners[<span class=\"number\">3</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>),</span><br><span class=\"line\">          scene_corners[<span class=\"number\">0</span>] + <span class=\"built_in\">Point2f</span>((<span class=\"keyword\">float</span>)img1.cols, <span class=\"number\">0</span>), <span class=\"built_in\">Scalar</span>( <span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>), <span class=\"number\">4</span> );</span><br><span class=\"line\">    <span class=\"comment\">//-- Show detected matches</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;Matches&quot;</span>, WINDOW_NORMAL);</span><br><span class=\"line\">    <span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;Matches&quot;</span>, img_matches );</span><br><span class=\"line\">    <span class=\"comment\">// imwrite(&quot;good_res.jpg&quot;, img_matches);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"built_in\">waitKey</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出H：</span></span><br><span class=\"line\"><span class=\"comment\">[0.9771928708495958, -0.008932567941541457, 129.4806431662592;</span></span><br><span class=\"line\"><span class=\"comment\"> 0.0342771681684575, 0.9114878090650101, 163.0011063784843;</span></span><br><span class=\"line\"><span class=\"comment\"> 3.322036688562577e-05, -1.090291446290035e-05, 1]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，本版本是opencv 4.5,与Opencv2/3有很多语法不一样了；关于特征点和描述子最大的区别：特征点是特征坐标KeyPoint，描述子是描述邻域信息的Mat。</p>\n<p>特征匹配总体的流程：<br>1.首先读取图片，创建检测特征SIFT，ORB，SURF(xfeature)等<br>2.如果检测子包含描述子，则直接detectAndCompute<br>3.一般用BFMatcher直接对描述子点对vector<DMatch> 进行暴力匹配，这里是优化加速版用FLANN的knn，注意的是ORB可用HAMMING距离，其他则不可。<br>4.接着对KNN点对进行基于距离的筛选<br>5.对置信度高的点对进行RANSAC的单应变换矩阵求解</p>\n<p>至此基本完成特征匹配的功能，得到的单应矩阵描述了图片间的变换关系；这是很多CV高级应用的基础，如校正，拼接，SLAM等。</p>\n"},{"title":"皮肤的秘密","mathjax":true,"date":"2022-01-19T03:07:58.000Z","_content":"\n### 认识皮肤\n皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经细胞。\n\n皮肤主要由三层构成：表皮，真皮以及皮下组合。其中表皮与真皮间的基底膜带决定了皮肤的弹性紧致，而且是在1岁形成不可逆的衰老，无法重生所以只能好好保护延缓其衰老。皮肤细胞从底层出生，衰老于真皮并死亡在表皮并成为保护屏障，正常周期为4周。患有皮肤病的可能会加速该过程至5天，导致表皮的屏障并不完整。\n\n### 表皮\n由于皮肤表面存在着大量微生物群，所以保持皮肤的pH值是非常重要的，应当合理维持完好无损的酸性保护膜，人工清洁剂约5.5，另外对于皮下脂肪过厚的皮肤褶皱，唯一有效办法是减肥。可以用抗真菌软膏，另外带锌软膏可缓解皮肤炎症，带走多余水分。\n\n![](/images/01_19_1.png)\n\n生长纹无足轻重，关于肤色，是有黑色素影响的。研究表明，橙色皮肤最具吸引力，可多摄入胡萝卜素B达到。颠痕主要由基底膜带大面积受损，表皮过度损耗引起的。对于渗水伤口可用硅霜或贴上硅凝胶伤口贴。治疗疙瘩需要强效疗法如：激光疗法、热针、冷冻疗法以及X射线放射疗法。\n\n### 真皮\n真皮充满紧致的结缔组织，带来稳固性以及拉伸性，任何的日晒、日光浴、烟草、压力、睡眠不足、营养不良以及缺乏运动等会加速弹性纤维的流失。臀部皮肤就是自然老化的参考，面部等受光照影响较大是老化较快的皮肤。另外，皮肤在4度就开始出现冻疮，而冬天皮肤也能适应，所以只在晚上睡前使用保湿即可，白天冬天保湿使皮肤含水量升高，反而容易冻伤。\n\n真皮层拥有大量神经，使皮肤成为最大的神经器官，抚摸有调节中枢神经和社交等作用。同时含有腺体，会分泌激素气味等。\n\n","source":"_posts/reading/皮肤的秘密.md","raw":"---\ntitle: 皮肤的秘密\ncategories:\n  - 读书笔记\nmathjax: true\ndate: 2022-01-19 11:07:58\ntags: 读书笔记\n---\n\n### 认识皮肤\n皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经细胞。\n\n皮肤主要由三层构成：表皮，真皮以及皮下组合。其中表皮与真皮间的基底膜带决定了皮肤的弹性紧致，而且是在1岁形成不可逆的衰老，无法重生所以只能好好保护延缓其衰老。皮肤细胞从底层出生，衰老于真皮并死亡在表皮并成为保护屏障，正常周期为4周。患有皮肤病的可能会加速该过程至5天，导致表皮的屏障并不完整。\n\n### 表皮\n由于皮肤表面存在着大量微生物群，所以保持皮肤的pH值是非常重要的，应当合理维持完好无损的酸性保护膜，人工清洁剂约5.5，另外对于皮下脂肪过厚的皮肤褶皱，唯一有效办法是减肥。可以用抗真菌软膏，另外带锌软膏可缓解皮肤炎症，带走多余水分。\n\n![](/images/01_19_1.png)\n\n生长纹无足轻重，关于肤色，是有黑色素影响的。研究表明，橙色皮肤最具吸引力，可多摄入胡萝卜素B达到。颠痕主要由基底膜带大面积受损，表皮过度损耗引起的。对于渗水伤口可用硅霜或贴上硅凝胶伤口贴。治疗疙瘩需要强效疗法如：激光疗法、热针、冷冻疗法以及X射线放射疗法。\n\n### 真皮\n真皮充满紧致的结缔组织，带来稳固性以及拉伸性，任何的日晒、日光浴、烟草、压力、睡眠不足、营养不良以及缺乏运动等会加速弹性纤维的流失。臀部皮肤就是自然老化的参考，面部等受光照影响较大是老化较快的皮肤。另外，皮肤在4度就开始出现冻疮，而冬天皮肤也能适应，所以只在晚上睡前使用保湿即可，白天冬天保湿使皮肤含水量升高，反而容易冻伤。\n\n真皮层拥有大量神经，使皮肤成为最大的神经器官，抚摸有调节中枢神经和社交等作用。同时含有腺体，会分泌激素气味等。\n\n","slug":"reading/皮肤的秘密","published":1,"updated":"2022-01-19T06:40:18.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavb001a28zd4qwmbhmr","content":"<h3 id=\"认识皮肤\"><a href=\"#认识皮肤\" class=\"headerlink\" title=\"认识皮肤\"></a>认识皮肤</h3><p>皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经细胞。</p>\n<p>皮肤主要由三层构成：表皮，真皮以及皮下组合。其中表皮与真皮间的基底膜带决定了皮肤的弹性紧致，而且是在1岁形成不可逆的衰老，无法重生所以只能好好保护延缓其衰老。皮肤细胞从底层出生，衰老于真皮并死亡在表皮并成为保护屏障，正常周期为4周。患有皮肤病的可能会加速该过程至5天，导致表皮的屏障并不完整。</p>\n<h3 id=\"表皮\"><a href=\"#表皮\" class=\"headerlink\" title=\"表皮\"></a>表皮</h3><p>由于皮肤表面存在着大量微生物群，所以保持皮肤的pH值是非常重要的，应当合理维持完好无损的酸性保护膜，人工清洁剂约5.5，另外对于皮下脂肪过厚的皮肤褶皱，唯一有效办法是减肥。可以用抗真菌软膏，另外带锌软膏可缓解皮肤炎症，带走多余水分。</p>\n<p><img src=\"/images/01_19_1.png\"></p>\n<p>生长纹无足轻重，关于肤色，是有黑色素影响的。研究表明，橙色皮肤最具吸引力，可多摄入胡萝卜素B达到。颠痕主要由基底膜带大面积受损，表皮过度损耗引起的。对于渗水伤口可用硅霜或贴上硅凝胶伤口贴。治疗疙瘩需要强效疗法如：激光疗法、热针、冷冻疗法以及X射线放射疗法。</p>\n<h3 id=\"真皮\"><a href=\"#真皮\" class=\"headerlink\" title=\"真皮\"></a>真皮</h3><p>真皮充满紧致的结缔组织，带来稳固性以及拉伸性，任何的日晒、日光浴、烟草、压力、睡眠不足、营养不良以及缺乏运动等会加速弹性纤维的流失。臀部皮肤就是自然老化的参考，面部等受光照影响较大是老化较快的皮肤。另外，皮肤在4度就开始出现冻疮，而冬天皮肤也能适应，所以只在晚上睡前使用保湿即可，白天冬天保湿使皮肤含水量升高，反而容易冻伤。</p>\n<p>真皮层拥有大量神经，使皮肤成为最大的神经器官，抚摸有调节中枢神经和社交等作用。同时含有腺体，会分泌激素气味等。</p>\n","site":{"data":{}},"length":680,"excerpt":"","more":"<h3 id=\"认识皮肤\"><a href=\"#认识皮肤\" class=\"headerlink\" title=\"认识皮肤\"></a>认识皮肤</h3><p>皮肤是人体最大的器官，展开达两平方米，是人体之于外界环境的保护膜，同时也是零距离感受外界的第一道关卡，所以每一寸都遍布了神经细胞。</p>\n<p>皮肤主要由三层构成：表皮，真皮以及皮下组合。其中表皮与真皮间的基底膜带决定了皮肤的弹性紧致，而且是在1岁形成不可逆的衰老，无法重生所以只能好好保护延缓其衰老。皮肤细胞从底层出生，衰老于真皮并死亡在表皮并成为保护屏障，正常周期为4周。患有皮肤病的可能会加速该过程至5天，导致表皮的屏障并不完整。</p>\n<h3 id=\"表皮\"><a href=\"#表皮\" class=\"headerlink\" title=\"表皮\"></a>表皮</h3><p>由于皮肤表面存在着大量微生物群，所以保持皮肤的pH值是非常重要的，应当合理维持完好无损的酸性保护膜，人工清洁剂约5.5，另外对于皮下脂肪过厚的皮肤褶皱，唯一有效办法是减肥。可以用抗真菌软膏，另外带锌软膏可缓解皮肤炎症，带走多余水分。</p>\n<p><img src=\"/images/01_19_1.png\"></p>\n<p>生长纹无足轻重，关于肤色，是有黑色素影响的。研究表明，橙色皮肤最具吸引力，可多摄入胡萝卜素B达到。颠痕主要由基底膜带大面积受损，表皮过度损耗引起的。对于渗水伤口可用硅霜或贴上硅凝胶伤口贴。治疗疙瘩需要强效疗法如：激光疗法、热针、冷冻疗法以及X射线放射疗法。</p>\n<h3 id=\"真皮\"><a href=\"#真皮\" class=\"headerlink\" title=\"真皮\"></a>真皮</h3><p>真皮充满紧致的结缔组织，带来稳固性以及拉伸性，任何的日晒、日光浴、烟草、压力、睡眠不足、营养不良以及缺乏运动等会加速弹性纤维的流失。臀部皮肤就是自然老化的参考，面部等受光照影响较大是老化较快的皮肤。另外，皮肤在4度就开始出现冻疮，而冬天皮肤也能适应，所以只在晚上睡前使用保湿即可，白天冬天保湿使皮肤含水量升高，反而容易冻伤。</p>\n<p>真皮层拥有大量神经，使皮肤成为最大的神经器官，抚摸有调节中枢神经和社交等作用。同时含有腺体，会分泌激素气味等。</p>\n"},{"title":"《浪潮之巅》第4版：读书笔记","date":"2021-11-26T09:39:52.000Z","_content":"\n\n### 一部工业革命后的近代科技发展史\n\n第一次阅读这本书大概是在大学的时期，当时应该还是第一第二版的样子。可惜当时认知有限或者是兴趣使然，确实是没有坚持读下来。作为一本信息科技人的导论书籍，吴军老师主要是从**创始人及公司基因，资本加速以及调整创新**等多个维度阐释每一个时代的技术浪潮。也让我重新认识硅谷，重新认识所有信息产业耳熟能详的近代技术及工业制品。有点后悔当初年少没有认认真真开启好这一本导论，以致于没有一个非常完备的大局观去规划个人职业生涯以及技术路线。弯弯曲曲之下，也就不难预见自己人生所能触及的高度了。\n\n### 重新认识知名或者耳闻的科技公司发展\n读完整篇最大的收获一方面是吴军老师分析浪潮与技术史的方法论与发展观，另外就是让我重新其认识那些早有耳闻的科技大公司以及了解他们所处时代的科技浪潮与技术产品。按照章节来列举的话：\n- chap 1 北美最大的通讯服务商AT&T及其贝尔实验室，对应国内就是国家垄断的电信移动联通三巨头。信息社会中，通讯业至关重要，从通讯硬件供应商以及软件算法的比如思科，华为；到对接用户的服务供应商，只要能分享整个通讯产业链的某一部分就存在巨大的利润。而且通讯的技术和协议也在不断更迭，从有线->无线->光纤->WIFI6，从2G到5G等等。\n- chap 2 最早真正研制出计算机的IBM以及其从卖服务器PC到后来成为最大的服务提供商。说实话，IBM的名字在大学时期是如雷贯耳但我却从来不知道他是做什么的。而且至今，我对这家公司的印象和认知可以说都是比较模糊的，但我知道他的TO B服务应该很强。\n- chap 3 “八叛徒”引出了硅谷不断开拓创新的精神，从一个核心技术到多个子公司分门立派相互竞争促进，大大加快了IC电路的发展，让我们真正迎来经久不衰的半导体时代。这个有点像一套绝世武功，虽然细节粗糙，但核心理论和精神质变于现有的功法。于是所学的弟子们都自立门派，却又各负盛名。最大的点是芯片技术乍看只是两个核心专利的技术，却影响千千万万，甚至于卡住了我们科技强国的脖子。再次，技术之间的差异如同人之间的差异。**对于社会，最有价值的工作可能是20%的人所完成的；对于个人，最有价值的工作可能是20%的时间和精力里做出来的。**那么，如何提升这一个比例呢？比如对于自己，如何让自己的时间和精力专注在最有价值和意义的事情上。如何让自己成为那20%最有价值的人，价值与流量是共通的。为着最大的社会群体服务，为着最广阔的行业作贡献。更细粒的维度划分就是从**用户群体以及用户时间，从社会进步及人类进步**去思考。（我承认，有点发散了，就当与自己对话了～）\n- chap 4 详尽介绍苹果公司的起落，尤记10年前，乔布斯是无数IT从业者最重要的偶像物，如今又有新的浪潮涌起，比如马斯克。相信粉老乔的，都会读那本经典的自传，就不难认识到苹果了。一直以来，苹果在致力创新智能硬件与大多数人生活上的交互方式。从最早的UI系统，到后来的IPOD，IPHONE等。虽然不像安卓那样开源，但苹果的工程师依然非常的顶。极大的推进产品的质量以及竞争力，他们对产品的整合能力也非常出众，致力于把每一款推向市场的产品做到**极致完美**。以至于非常长的时间里，直到今天，我认为苹果公司推出的是市面上比较完美的智能设备，当然价格也很丰满。苹果的利润率是业界闻名的，除了产业链整合以及大品牌效应能从渠道方压缩成本，更重要的是在长时期里核心技术不断研发和积累的成果。\n- chap 5 引出第一个方法论，信息产业的三大定律：1.**摩尔定律**，集成电路的集成度每18个月翻一翻。因此半导体智能产品的性能也翻番，说明一个高速发展的IT行业是呈现指数增长 2.**win-tel定律**，基于摩尔定律，硬件进步了，软件也会相应占用更多的资源，以此发挥硬件的能力，倒逼硬件行业完成摩尔增长 3.**反摩尔定律**，对于处在摩尔定律行业的公司，如果不进步达到指数，则在退步。如果只维持去年的水平，18月后就会下降剩一半。\n- chap 6 Intel的芯片，全球通用且难有敌手。因为PC端的芯片研发成本摆在那儿，1985对32bit的80386研发投入就超过3亿美元。而且从芯片制程特殊性而言，集成度更高性能和功耗都提升，体积下降。大部分消费者难以退回旧一代的芯片，所以赢者通吃，落后者剩菜残羹。今时今日，除了MAC电脑，绝大部分的PC都采用intel芯片，而且服务器端也有见长。但是浪潮之中PC市场相对饱和，移动端崛起了10多年，更多的芯片战场转移到嵌入式去了。往后的就是终端芯片为主的变革，比如ISP，算法芯，AI芯等。\n- chap 7 关于微软以及windows。真正意义第一个垄断性的超级公司就是微软了，因为其卖软件的特性，利润率极高。在PC时代无人匹敌，依赖windows系统，其绑定的PC软件也得到天然的优势。而后移动互联网浪潮来临，微软虽然没有攀上浪尖，却也从游戏方面入手取得不俗的成绩。由此奠定了大公司希望涉猎互联网的全领域利润，比如搜索，社交，移动支付，手机等等。但始终只留下其最擅长的产品。拥有再多第二第三列的产品并不足以让一家企业成为真正帝国性一样富有影响力的机构。另一方面也告诫我们，需要专注，成为单一方向最拔萃的人。\n- chap 8 Oracle，一家以数据库闻名的企业。大概是大二还是大三的时候，首次听到这家公司的名字，但依然不得其意。大概跟IBM类似较多开展企业级相关的服务和技术支持。\n- chap 9 思科通信巨头，主营交换机路由器等互联网基础设施。早期是互联网用于大学公司等，主要方便学术与办公交流。由于各个子网的网络协议不一，思科早期推出多协议路由终端成为子网间互联的关键。同样互联网的浪潮帮助思科乘风破浪。另外当时红杉资本热衷投资给年轻的穷人，因为越是贫穷越有成功的欲望和拼搏精神。西方的思科，东方的华为。华为起步只比思科晚4年，同样掌握当时世界最前沿的通信技术，通过大批雇用IBM顾问从而实现早期国际化的管理水平。至今华为找到手机移动的增长点，焕发最强民企的生命力。2020年统计，华为的科研投入遥遥领先于第二名的腾讯一倍有余，狼性文化下也涌现超级年薪的PHD。\n- chap 10 YAHOO互联网入口，世界第一个黄页。除了整理了当时杂乱的互联网资信，吴军老师认为YAHOO制定了互联网行业重要的规则：开放，免费，基于流量的盈利模式。我认为这与当今的开源思想很有共同点，区别在于开源目前变现能力还不够。为此，我特意知乎了开源目前的盈利模式，主要有以下七个：1.多种产品线，开源版推广，专业版收费； 2.提供技术文档，培训以及二次开发作为收入（不是长久之计）； 3.应用服务托管，相当于云部署； 4.软硬一体化，开放软件，销售硬件 5.开源作为附属品 6.提升品牌和服务（大公司） 7.市场等其他 回到雅虎，当时手工密集式整理互联网信息，使之成为大部分人连接互联网的入口，加之互联网的快速发展使其价值和流量不断提升，也找到广告盈利的模式。当然资信发达引入的问题是对搜索引擎的迫切需求，以至于后来GOOGLE的崛起。当时浪潮之大，以至于当时只要有流量就有钱和投资，大量tricks如何提升网站流量的热度，狂热之下，互联网泡沫来临。网站大洗牌，小公司以及虚胖的大公司都一泻千里，被浪潮拍打在沙滩上。度过寒冬的以及寒冬后的企业，迎来了新的社会资源和人才，缺少老旧对手也能快速崛起。\n- chap 11 惠普，一家如今印象只有打印机和PC产品的企业。殊不知一直以来是硅谷神话的代表，也是最早进驻斯坦福工业园的企业，开启了新时代校企合作的高效模式，高校培养顶尖人才，企业吸收并转化成遍布全球的产品。上世纪的惠普主营三大板块包括科学仪器，医疗器材以及计算机和外设，而后经营不合理导致只拆分剩计算机以及外设。\n- chap 12 没落贵族-摩托罗拉，最早做通讯设备的公司，包括军用民用无线电，大哥大到2G手机。然而固有利润高的市场抑制了内部4G的推广，可见连内部都产生抑制新技术和新产品的现象，资本市场的竞争是十分激烈的，尽管存在反垄断法，但公司一旦占据行业的龙头位置，后来者就再难以从同样的赛道超越，除非是科技或者产品以质级的飞跃。\n\n","source":"_posts/reading/浪潮之巅.md","raw":"---\ntitle: 《浪潮之巅》第4版：读书笔记\ndate: 2021-11-26 17:39:52\ncategories:\n- 读书笔记\ntags:\n- 心得\n- 读书笔记\n---\n\n\n### 一部工业革命后的近代科技发展史\n\n第一次阅读这本书大概是在大学的时期，当时应该还是第一第二版的样子。可惜当时认知有限或者是兴趣使然，确实是没有坚持读下来。作为一本信息科技人的导论书籍，吴军老师主要是从**创始人及公司基因，资本加速以及调整创新**等多个维度阐释每一个时代的技术浪潮。也让我重新认识硅谷，重新认识所有信息产业耳熟能详的近代技术及工业制品。有点后悔当初年少没有认认真真开启好这一本导论，以致于没有一个非常完备的大局观去规划个人职业生涯以及技术路线。弯弯曲曲之下，也就不难预见自己人生所能触及的高度了。\n\n### 重新认识知名或者耳闻的科技公司发展\n读完整篇最大的收获一方面是吴军老师分析浪潮与技术史的方法论与发展观，另外就是让我重新其认识那些早有耳闻的科技大公司以及了解他们所处时代的科技浪潮与技术产品。按照章节来列举的话：\n- chap 1 北美最大的通讯服务商AT&T及其贝尔实验室，对应国内就是国家垄断的电信移动联通三巨头。信息社会中，通讯业至关重要，从通讯硬件供应商以及软件算法的比如思科，华为；到对接用户的服务供应商，只要能分享整个通讯产业链的某一部分就存在巨大的利润。而且通讯的技术和协议也在不断更迭，从有线->无线->光纤->WIFI6，从2G到5G等等。\n- chap 2 最早真正研制出计算机的IBM以及其从卖服务器PC到后来成为最大的服务提供商。说实话，IBM的名字在大学时期是如雷贯耳但我却从来不知道他是做什么的。而且至今，我对这家公司的印象和认知可以说都是比较模糊的，但我知道他的TO B服务应该很强。\n- chap 3 “八叛徒”引出了硅谷不断开拓创新的精神，从一个核心技术到多个子公司分门立派相互竞争促进，大大加快了IC电路的发展，让我们真正迎来经久不衰的半导体时代。这个有点像一套绝世武功，虽然细节粗糙，但核心理论和精神质变于现有的功法。于是所学的弟子们都自立门派，却又各负盛名。最大的点是芯片技术乍看只是两个核心专利的技术，却影响千千万万，甚至于卡住了我们科技强国的脖子。再次，技术之间的差异如同人之间的差异。**对于社会，最有价值的工作可能是20%的人所完成的；对于个人，最有价值的工作可能是20%的时间和精力里做出来的。**那么，如何提升这一个比例呢？比如对于自己，如何让自己的时间和精力专注在最有价值和意义的事情上。如何让自己成为那20%最有价值的人，价值与流量是共通的。为着最大的社会群体服务，为着最广阔的行业作贡献。更细粒的维度划分就是从**用户群体以及用户时间，从社会进步及人类进步**去思考。（我承认，有点发散了，就当与自己对话了～）\n- chap 4 详尽介绍苹果公司的起落，尤记10年前，乔布斯是无数IT从业者最重要的偶像物，如今又有新的浪潮涌起，比如马斯克。相信粉老乔的，都会读那本经典的自传，就不难认识到苹果了。一直以来，苹果在致力创新智能硬件与大多数人生活上的交互方式。从最早的UI系统，到后来的IPOD，IPHONE等。虽然不像安卓那样开源，但苹果的工程师依然非常的顶。极大的推进产品的质量以及竞争力，他们对产品的整合能力也非常出众，致力于把每一款推向市场的产品做到**极致完美**。以至于非常长的时间里，直到今天，我认为苹果公司推出的是市面上比较完美的智能设备，当然价格也很丰满。苹果的利润率是业界闻名的，除了产业链整合以及大品牌效应能从渠道方压缩成本，更重要的是在长时期里核心技术不断研发和积累的成果。\n- chap 5 引出第一个方法论，信息产业的三大定律：1.**摩尔定律**，集成电路的集成度每18个月翻一翻。因此半导体智能产品的性能也翻番，说明一个高速发展的IT行业是呈现指数增长 2.**win-tel定律**，基于摩尔定律，硬件进步了，软件也会相应占用更多的资源，以此发挥硬件的能力，倒逼硬件行业完成摩尔增长 3.**反摩尔定律**，对于处在摩尔定律行业的公司，如果不进步达到指数，则在退步。如果只维持去年的水平，18月后就会下降剩一半。\n- chap 6 Intel的芯片，全球通用且难有敌手。因为PC端的芯片研发成本摆在那儿，1985对32bit的80386研发投入就超过3亿美元。而且从芯片制程特殊性而言，集成度更高性能和功耗都提升，体积下降。大部分消费者难以退回旧一代的芯片，所以赢者通吃，落后者剩菜残羹。今时今日，除了MAC电脑，绝大部分的PC都采用intel芯片，而且服务器端也有见长。但是浪潮之中PC市场相对饱和，移动端崛起了10多年，更多的芯片战场转移到嵌入式去了。往后的就是终端芯片为主的变革，比如ISP，算法芯，AI芯等。\n- chap 7 关于微软以及windows。真正意义第一个垄断性的超级公司就是微软了，因为其卖软件的特性，利润率极高。在PC时代无人匹敌，依赖windows系统，其绑定的PC软件也得到天然的优势。而后移动互联网浪潮来临，微软虽然没有攀上浪尖，却也从游戏方面入手取得不俗的成绩。由此奠定了大公司希望涉猎互联网的全领域利润，比如搜索，社交，移动支付，手机等等。但始终只留下其最擅长的产品。拥有再多第二第三列的产品并不足以让一家企业成为真正帝国性一样富有影响力的机构。另一方面也告诫我们，需要专注，成为单一方向最拔萃的人。\n- chap 8 Oracle，一家以数据库闻名的企业。大概是大二还是大三的时候，首次听到这家公司的名字，但依然不得其意。大概跟IBM类似较多开展企业级相关的服务和技术支持。\n- chap 9 思科通信巨头，主营交换机路由器等互联网基础设施。早期是互联网用于大学公司等，主要方便学术与办公交流。由于各个子网的网络协议不一，思科早期推出多协议路由终端成为子网间互联的关键。同样互联网的浪潮帮助思科乘风破浪。另外当时红杉资本热衷投资给年轻的穷人，因为越是贫穷越有成功的欲望和拼搏精神。西方的思科，东方的华为。华为起步只比思科晚4年，同样掌握当时世界最前沿的通信技术，通过大批雇用IBM顾问从而实现早期国际化的管理水平。至今华为找到手机移动的增长点，焕发最强民企的生命力。2020年统计，华为的科研投入遥遥领先于第二名的腾讯一倍有余，狼性文化下也涌现超级年薪的PHD。\n- chap 10 YAHOO互联网入口，世界第一个黄页。除了整理了当时杂乱的互联网资信，吴军老师认为YAHOO制定了互联网行业重要的规则：开放，免费，基于流量的盈利模式。我认为这与当今的开源思想很有共同点，区别在于开源目前变现能力还不够。为此，我特意知乎了开源目前的盈利模式，主要有以下七个：1.多种产品线，开源版推广，专业版收费； 2.提供技术文档，培训以及二次开发作为收入（不是长久之计）； 3.应用服务托管，相当于云部署； 4.软硬一体化，开放软件，销售硬件 5.开源作为附属品 6.提升品牌和服务（大公司） 7.市场等其他 回到雅虎，当时手工密集式整理互联网信息，使之成为大部分人连接互联网的入口，加之互联网的快速发展使其价值和流量不断提升，也找到广告盈利的模式。当然资信发达引入的问题是对搜索引擎的迫切需求，以至于后来GOOGLE的崛起。当时浪潮之大，以至于当时只要有流量就有钱和投资，大量tricks如何提升网站流量的热度，狂热之下，互联网泡沫来临。网站大洗牌，小公司以及虚胖的大公司都一泻千里，被浪潮拍打在沙滩上。度过寒冬的以及寒冬后的企业，迎来了新的社会资源和人才，缺少老旧对手也能快速崛起。\n- chap 11 惠普，一家如今印象只有打印机和PC产品的企业。殊不知一直以来是硅谷神话的代表，也是最早进驻斯坦福工业园的企业，开启了新时代校企合作的高效模式，高校培养顶尖人才，企业吸收并转化成遍布全球的产品。上世纪的惠普主营三大板块包括科学仪器，医疗器材以及计算机和外设，而后经营不合理导致只拆分剩计算机以及外设。\n- chap 12 没落贵族-摩托罗拉，最早做通讯设备的公司，包括军用民用无线电，大哥大到2G手机。然而固有利润高的市场抑制了内部4G的推广，可见连内部都产生抑制新技术和新产品的现象，资本市场的竞争是十分激烈的，尽管存在反垄断法，但公司一旦占据行业的龙头位置，后来者就再难以从同样的赛道超越，除非是科技或者产品以质级的飞跃。\n\n","slug":"reading/浪潮之巅","published":1,"updated":"2022-02-25T02:53:35.806Z","_id":"cl00tgavc001e28zd7rdk5r99","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一部工业革命后的近代科技发展史\"><a href=\"#一部工业革命后的近代科技发展史\" class=\"headerlink\" title=\"一部工业革命后的近代科技发展史\"></a>一部工业革命后的近代科技发展史</h3><p>第一次阅读这本书大概是在大学的时期，当时应该还是第一第二版的样子。可惜当时认知有限或者是兴趣使然，确实是没有坚持读下来。作为一本信息科技人的导论书籍，吴军老师主要是从<strong>创始人及公司基因，资本加速以及调整创新</strong>等多个维度阐释每一个时代的技术浪潮。也让我重新认识硅谷，重新认识所有信息产业耳熟能详的近代技术及工业制品。有点后悔当初年少没有认认真真开启好这一本导论，以致于没有一个非常完备的大局观去规划个人职业生涯以及技术路线。弯弯曲曲之下，也就不难预见自己人生所能触及的高度了。</p>\n<h3 id=\"重新认识知名或者耳闻的科技公司发展\"><a href=\"#重新认识知名或者耳闻的科技公司发展\" class=\"headerlink\" title=\"重新认识知名或者耳闻的科技公司发展\"></a>重新认识知名或者耳闻的科技公司发展</h3><p>读完整篇最大的收获一方面是吴军老师分析浪潮与技术史的方法论与发展观，另外就是让我重新其认识那些早有耳闻的科技大公司以及了解他们所处时代的科技浪潮与技术产品。按照章节来列举的话：</p>\n<ul>\n<li>chap 1 北美最大的通讯服务商AT&amp;T及其贝尔实验室，对应国内就是国家垄断的电信移动联通三巨头。信息社会中，通讯业至关重要，从通讯硬件供应商以及软件算法的比如思科，华为；到对接用户的服务供应商，只要能分享整个通讯产业链的某一部分就存在巨大的利润。而且通讯的技术和协议也在不断更迭，从有线-&gt;无线-&gt;光纤-&gt;WIFI6，从2G到5G等等。</li>\n<li>chap 2 最早真正研制出计算机的IBM以及其从卖服务器PC到后来成为最大的服务提供商。说实话，IBM的名字在大学时期是如雷贯耳但我却从来不知道他是做什么的。而且至今，我对这家公司的印象和认知可以说都是比较模糊的，但我知道他的TO B服务应该很强。</li>\n<li>chap 3 “八叛徒”引出了硅谷不断开拓创新的精神，从一个核心技术到多个子公司分门立派相互竞争促进，大大加快了IC电路的发展，让我们真正迎来经久不衰的半导体时代。这个有点像一套绝世武功，虽然细节粗糙，但核心理论和精神质变于现有的功法。于是所学的弟子们都自立门派，却又各负盛名。最大的点是芯片技术乍看只是两个核心专利的技术，却影响千千万万，甚至于卡住了我们科技强国的脖子。再次，技术之间的差异如同人之间的差异。<strong>对于社会，最有价值的工作可能是20%的人所完成的；对于个人，最有价值的工作可能是20%的时间和精力里做出来的。</strong>那么，如何提升这一个比例呢？比如对于自己，如何让自己的时间和精力专注在最有价值和意义的事情上。如何让自己成为那20%最有价值的人，价值与流量是共通的。为着最大的社会群体服务，为着最广阔的行业作贡献。更细粒的维度划分就是从<strong>用户群体以及用户时间，从社会进步及人类进步</strong>去思考。（我承认，有点发散了，就当与自己对话了～）</li>\n<li>chap 4 详尽介绍苹果公司的起落，尤记10年前，乔布斯是无数IT从业者最重要的偶像物，如今又有新的浪潮涌起，比如马斯克。相信粉老乔的，都会读那本经典的自传，就不难认识到苹果了。一直以来，苹果在致力创新智能硬件与大多数人生活上的交互方式。从最早的UI系统，到后来的IPOD，IPHONE等。虽然不像安卓那样开源，但苹果的工程师依然非常的顶。极大的推进产品的质量以及竞争力，他们对产品的整合能力也非常出众，致力于把每一款推向市场的产品做到<strong>极致完美</strong>。以至于非常长的时间里，直到今天，我认为苹果公司推出的是市面上比较完美的智能设备，当然价格也很丰满。苹果的利润率是业界闻名的，除了产业链整合以及大品牌效应能从渠道方压缩成本，更重要的是在长时期里核心技术不断研发和积累的成果。</li>\n<li>chap 5 引出第一个方法论，信息产业的三大定律：1.<strong>摩尔定律</strong>，集成电路的集成度每18个月翻一翻。因此半导体智能产品的性能也翻番，说明一个高速发展的IT行业是呈现指数增长 2.<strong>win-tel定律</strong>，基于摩尔定律，硬件进步了，软件也会相应占用更多的资源，以此发挥硬件的能力，倒逼硬件行业完成摩尔增长 3.<strong>反摩尔定律</strong>，对于处在摩尔定律行业的公司，如果不进步达到指数，则在退步。如果只维持去年的水平，18月后就会下降剩一半。</li>\n<li>chap 6 Intel的芯片，全球通用且难有敌手。因为PC端的芯片研发成本摆在那儿，1985对32bit的80386研发投入就超过3亿美元。而且从芯片制程特殊性而言，集成度更高性能和功耗都提升，体积下降。大部分消费者难以退回旧一代的芯片，所以赢者通吃，落后者剩菜残羹。今时今日，除了MAC电脑，绝大部分的PC都采用intel芯片，而且服务器端也有见长。但是浪潮之中PC市场相对饱和，移动端崛起了10多年，更多的芯片战场转移到嵌入式去了。往后的就是终端芯片为主的变革，比如ISP，算法芯，AI芯等。</li>\n<li>chap 7 关于微软以及windows。真正意义第一个垄断性的超级公司就是微软了，因为其卖软件的特性，利润率极高。在PC时代无人匹敌，依赖windows系统，其绑定的PC软件也得到天然的优势。而后移动互联网浪潮来临，微软虽然没有攀上浪尖，却也从游戏方面入手取得不俗的成绩。由此奠定了大公司希望涉猎互联网的全领域利润，比如搜索，社交，移动支付，手机等等。但始终只留下其最擅长的产品。拥有再多第二第三列的产品并不足以让一家企业成为真正帝国性一样富有影响力的机构。另一方面也告诫我们，需要专注，成为单一方向最拔萃的人。</li>\n<li>chap 8 Oracle，一家以数据库闻名的企业。大概是大二还是大三的时候，首次听到这家公司的名字，但依然不得其意。大概跟IBM类似较多开展企业级相关的服务和技术支持。</li>\n<li>chap 9 思科通信巨头，主营交换机路由器等互联网基础设施。早期是互联网用于大学公司等，主要方便学术与办公交流。由于各个子网的网络协议不一，思科早期推出多协议路由终端成为子网间互联的关键。同样互联网的浪潮帮助思科乘风破浪。另外当时红杉资本热衷投资给年轻的穷人，因为越是贫穷越有成功的欲望和拼搏精神。西方的思科，东方的华为。华为起步只比思科晚4年，同样掌握当时世界最前沿的通信技术，通过大批雇用IBM顾问从而实现早期国际化的管理水平。至今华为找到手机移动的增长点，焕发最强民企的生命力。2020年统计，华为的科研投入遥遥领先于第二名的腾讯一倍有余，狼性文化下也涌现超级年薪的PHD。</li>\n<li>chap 10 YAHOO互联网入口，世界第一个黄页。除了整理了当时杂乱的互联网资信，吴军老师认为YAHOO制定了互联网行业重要的规则：开放，免费，基于流量的盈利模式。我认为这与当今的开源思想很有共同点，区别在于开源目前变现能力还不够。为此，我特意知乎了开源目前的盈利模式，主要有以下七个：1.多种产品线，开源版推广，专业版收费； 2.提供技术文档，培训以及二次开发作为收入（不是长久之计）； 3.应用服务托管，相当于云部署； 4.软硬一体化，开放软件，销售硬件 5.开源作为附属品 6.提升品牌和服务（大公司） 7.市场等其他 回到雅虎，当时手工密集式整理互联网信息，使之成为大部分人连接互联网的入口，加之互联网的快速发展使其价值和流量不断提升，也找到广告盈利的模式。当然资信发达引入的问题是对搜索引擎的迫切需求，以至于后来GOOGLE的崛起。当时浪潮之大，以至于当时只要有流量就有钱和投资，大量tricks如何提升网站流量的热度，狂热之下，互联网泡沫来临。网站大洗牌，小公司以及虚胖的大公司都一泻千里，被浪潮拍打在沙滩上。度过寒冬的以及寒冬后的企业，迎来了新的社会资源和人才，缺少老旧对手也能快速崛起。</li>\n<li>chap 11 惠普，一家如今印象只有打印机和PC产品的企业。殊不知一直以来是硅谷神话的代表，也是最早进驻斯坦福工业园的企业，开启了新时代校企合作的高效模式，高校培养顶尖人才，企业吸收并转化成遍布全球的产品。上世纪的惠普主营三大板块包括科学仪器，医疗器材以及计算机和外设，而后经营不合理导致只拆分剩计算机以及外设。</li>\n<li>chap 12 没落贵族-摩托罗拉，最早做通讯设备的公司，包括军用民用无线电，大哥大到2G手机。然而固有利润高的市场抑制了内部4G的推广，可见连内部都产生抑制新技术和新产品的现象，资本市场的竞争是十分激烈的，尽管存在反垄断法，但公司一旦占据行业的龙头位置，后来者就再难以从同样的赛道超越，除非是科技或者产品以质级的飞跃。</li>\n</ul>\n","site":{"data":{}},"length":3291,"excerpt":"","more":"<h3 id=\"一部工业革命后的近代科技发展史\"><a href=\"#一部工业革命后的近代科技发展史\" class=\"headerlink\" title=\"一部工业革命后的近代科技发展史\"></a>一部工业革命后的近代科技发展史</h3><p>第一次阅读这本书大概是在大学的时期，当时应该还是第一第二版的样子。可惜当时认知有限或者是兴趣使然，确实是没有坚持读下来。作为一本信息科技人的导论书籍，吴军老师主要是从<strong>创始人及公司基因，资本加速以及调整创新</strong>等多个维度阐释每一个时代的技术浪潮。也让我重新认识硅谷，重新认识所有信息产业耳熟能详的近代技术及工业制品。有点后悔当初年少没有认认真真开启好这一本导论，以致于没有一个非常完备的大局观去规划个人职业生涯以及技术路线。弯弯曲曲之下，也就不难预见自己人生所能触及的高度了。</p>\n<h3 id=\"重新认识知名或者耳闻的科技公司发展\"><a href=\"#重新认识知名或者耳闻的科技公司发展\" class=\"headerlink\" title=\"重新认识知名或者耳闻的科技公司发展\"></a>重新认识知名或者耳闻的科技公司发展</h3><p>读完整篇最大的收获一方面是吴军老师分析浪潮与技术史的方法论与发展观，另外就是让我重新其认识那些早有耳闻的科技大公司以及了解他们所处时代的科技浪潮与技术产品。按照章节来列举的话：</p>\n<ul>\n<li>chap 1 北美最大的通讯服务商AT&amp;T及其贝尔实验室，对应国内就是国家垄断的电信移动联通三巨头。信息社会中，通讯业至关重要，从通讯硬件供应商以及软件算法的比如思科，华为；到对接用户的服务供应商，只要能分享整个通讯产业链的某一部分就存在巨大的利润。而且通讯的技术和协议也在不断更迭，从有线-&gt;无线-&gt;光纤-&gt;WIFI6，从2G到5G等等。</li>\n<li>chap 2 最早真正研制出计算机的IBM以及其从卖服务器PC到后来成为最大的服务提供商。说实话，IBM的名字在大学时期是如雷贯耳但我却从来不知道他是做什么的。而且至今，我对这家公司的印象和认知可以说都是比较模糊的，但我知道他的TO B服务应该很强。</li>\n<li>chap 3 “八叛徒”引出了硅谷不断开拓创新的精神，从一个核心技术到多个子公司分门立派相互竞争促进，大大加快了IC电路的发展，让我们真正迎来经久不衰的半导体时代。这个有点像一套绝世武功，虽然细节粗糙，但核心理论和精神质变于现有的功法。于是所学的弟子们都自立门派，却又各负盛名。最大的点是芯片技术乍看只是两个核心专利的技术，却影响千千万万，甚至于卡住了我们科技强国的脖子。再次，技术之间的差异如同人之间的差异。<strong>对于社会，最有价值的工作可能是20%的人所完成的；对于个人，最有价值的工作可能是20%的时间和精力里做出来的。</strong>那么，如何提升这一个比例呢？比如对于自己，如何让自己的时间和精力专注在最有价值和意义的事情上。如何让自己成为那20%最有价值的人，价值与流量是共通的。为着最大的社会群体服务，为着最广阔的行业作贡献。更细粒的维度划分就是从<strong>用户群体以及用户时间，从社会进步及人类进步</strong>去思考。（我承认，有点发散了，就当与自己对话了～）</li>\n<li>chap 4 详尽介绍苹果公司的起落，尤记10年前，乔布斯是无数IT从业者最重要的偶像物，如今又有新的浪潮涌起，比如马斯克。相信粉老乔的，都会读那本经典的自传，就不难认识到苹果了。一直以来，苹果在致力创新智能硬件与大多数人生活上的交互方式。从最早的UI系统，到后来的IPOD，IPHONE等。虽然不像安卓那样开源，但苹果的工程师依然非常的顶。极大的推进产品的质量以及竞争力，他们对产品的整合能力也非常出众，致力于把每一款推向市场的产品做到<strong>极致完美</strong>。以至于非常长的时间里，直到今天，我认为苹果公司推出的是市面上比较完美的智能设备，当然价格也很丰满。苹果的利润率是业界闻名的，除了产业链整合以及大品牌效应能从渠道方压缩成本，更重要的是在长时期里核心技术不断研发和积累的成果。</li>\n<li>chap 5 引出第一个方法论，信息产业的三大定律：1.<strong>摩尔定律</strong>，集成电路的集成度每18个月翻一翻。因此半导体智能产品的性能也翻番，说明一个高速发展的IT行业是呈现指数增长 2.<strong>win-tel定律</strong>，基于摩尔定律，硬件进步了，软件也会相应占用更多的资源，以此发挥硬件的能力，倒逼硬件行业完成摩尔增长 3.<strong>反摩尔定律</strong>，对于处在摩尔定律行业的公司，如果不进步达到指数，则在退步。如果只维持去年的水平，18月后就会下降剩一半。</li>\n<li>chap 6 Intel的芯片，全球通用且难有敌手。因为PC端的芯片研发成本摆在那儿，1985对32bit的80386研发投入就超过3亿美元。而且从芯片制程特殊性而言，集成度更高性能和功耗都提升，体积下降。大部分消费者难以退回旧一代的芯片，所以赢者通吃，落后者剩菜残羹。今时今日，除了MAC电脑，绝大部分的PC都采用intel芯片，而且服务器端也有见长。但是浪潮之中PC市场相对饱和，移动端崛起了10多年，更多的芯片战场转移到嵌入式去了。往后的就是终端芯片为主的变革，比如ISP，算法芯，AI芯等。</li>\n<li>chap 7 关于微软以及windows。真正意义第一个垄断性的超级公司就是微软了，因为其卖软件的特性，利润率极高。在PC时代无人匹敌，依赖windows系统，其绑定的PC软件也得到天然的优势。而后移动互联网浪潮来临，微软虽然没有攀上浪尖，却也从游戏方面入手取得不俗的成绩。由此奠定了大公司希望涉猎互联网的全领域利润，比如搜索，社交，移动支付，手机等等。但始终只留下其最擅长的产品。拥有再多第二第三列的产品并不足以让一家企业成为真正帝国性一样富有影响力的机构。另一方面也告诫我们，需要专注，成为单一方向最拔萃的人。</li>\n<li>chap 8 Oracle，一家以数据库闻名的企业。大概是大二还是大三的时候，首次听到这家公司的名字，但依然不得其意。大概跟IBM类似较多开展企业级相关的服务和技术支持。</li>\n<li>chap 9 思科通信巨头，主营交换机路由器等互联网基础设施。早期是互联网用于大学公司等，主要方便学术与办公交流。由于各个子网的网络协议不一，思科早期推出多协议路由终端成为子网间互联的关键。同样互联网的浪潮帮助思科乘风破浪。另外当时红杉资本热衷投资给年轻的穷人，因为越是贫穷越有成功的欲望和拼搏精神。西方的思科，东方的华为。华为起步只比思科晚4年，同样掌握当时世界最前沿的通信技术，通过大批雇用IBM顾问从而实现早期国际化的管理水平。至今华为找到手机移动的增长点，焕发最强民企的生命力。2020年统计，华为的科研投入遥遥领先于第二名的腾讯一倍有余，狼性文化下也涌现超级年薪的PHD。</li>\n<li>chap 10 YAHOO互联网入口，世界第一个黄页。除了整理了当时杂乱的互联网资信，吴军老师认为YAHOO制定了互联网行业重要的规则：开放，免费，基于流量的盈利模式。我认为这与当今的开源思想很有共同点，区别在于开源目前变现能力还不够。为此，我特意知乎了开源目前的盈利模式，主要有以下七个：1.多种产品线，开源版推广，专业版收费； 2.提供技术文档，培训以及二次开发作为收入（不是长久之计）； 3.应用服务托管，相当于云部署； 4.软硬一体化，开放软件，销售硬件 5.开源作为附属品 6.提升品牌和服务（大公司） 7.市场等其他 回到雅虎，当时手工密集式整理互联网信息，使之成为大部分人连接互联网的入口，加之互联网的快速发展使其价值和流量不断提升，也找到广告盈利的模式。当然资信发达引入的问题是对搜索引擎的迫切需求，以至于后来GOOGLE的崛起。当时浪潮之大，以至于当时只要有流量就有钱和投资，大量tricks如何提升网站流量的热度，狂热之下，互联网泡沫来临。网站大洗牌，小公司以及虚胖的大公司都一泻千里，被浪潮拍打在沙滩上。度过寒冬的以及寒冬后的企业，迎来了新的社会资源和人才，缺少老旧对手也能快速崛起。</li>\n<li>chap 11 惠普，一家如今印象只有打印机和PC产品的企业。殊不知一直以来是硅谷神话的代表，也是最早进驻斯坦福工业园的企业，开启了新时代校企合作的高效模式，高校培养顶尖人才，企业吸收并转化成遍布全球的产品。上世纪的惠普主营三大板块包括科学仪器，医疗器材以及计算机和外设，而后经营不合理导致只拆分剩计算机以及外设。</li>\n<li>chap 12 没落贵族-摩托罗拉，最早做通讯设备的公司，包括军用民用无线电，大哥大到2G手机。然而固有利润高的市场抑制了内部4G的推广，可见连内部都产生抑制新技术和新产品的现象，资本市场的竞争是十分激烈的，尽管存在反垄断法，但公司一旦占据行业的龙头位置，后来者就再难以从同样的赛道超越，除非是科技或者产品以质级的飞跃。</li>\n</ul>\n"},{"title":"六年前的自己","date":"2021-12-22T07:17:53.000Z","_content":"\n[https://csrjtan.github.io/](https://csrjtan.github.io/)\n回看六年前的自己，摘录一些当时有意义的文段\n\n### 23岁的生日\n\n重读六年前的自己，用文字记录对这个世界的感受和认知，那时候的自己充满了希望，虽然能力配不上欲望而渐渐失落，但依然希望找到那种年轻的感觉。\n\n### \n当年的愿望：\n- 工作上：提高编程和学术能力\n- 生活上：爱家人，爱生活，爱伴侣\n- 日常上：坚持读，坚持写，坚持学，坚持感受，坚持表达\n\n```\n《成长的天空》 \n我沉浸在自己的世界里\n写着无关是非的歌谣\n点蓝的笔触\n划过了年轻的天空\n一只飞鸟带走我的青春\n还我，岁月沉淀的帽子\n轻声说道\n年轻总不是永远的借口\n```\n\n### 回看中秋自省的自己\n经过5年起起落落，心态转变得很明显甚至于有点得过且过的样子，现在自己比年轻的自己多了一点能力和资源，却失去了做大梦的勇气和毅力。希望自己能依然不断找到人生的兴奋点，勇往直前地去追寻探索，从今天开始，真正的为自己而活，不在乎别人的眼光，不在乎可能会失去的安逸。\n\n### 家人信息简要\n爸：1961.7.8，牛，会计。爱好军事政治经济唱歌。性格硬朗好面子。优点：精神好，能干，勤勉\n妈：1961.11.12，牛，仓管（退休）。爱好家庭家人养生。优点：节俭，爱戴我们，慈祥\n哥：1987.8.9，兔，前端全栈，爱好广泛潮流酷玩。优点：工程能力强，迁就随和\n为：1992.08.13，猴，算法攻城狮。爱好：声乐，运动，游戏。优点：耐受力，随和\n\n### 选书策略\n出版社->作者->版次->印次->印数\n\n### 追逐幸福的要素\n- 找到喜欢的工作，有收入又受到社会尊重\n- 减少上下班耗费的时间，有充足的社交时间\n- 对国家和社会有政治热情，有参与度\n\n``` 笔记本的一首诗\n不论曾经的彼此多么幼稚，多么可笑\n终有一天我们都变得成熟；\n也终有一天，我们都会老去；\n可是，却没有人可以永远不长大，\n却没有人可以永远年轻，\n成熟，有时候会让人心痛、很无奈。\n那个时候才会懂得：\n爱情本不是件该执着的事情。\n```","source":"_posts/rizhi/六年前的自己.md","raw":"---\ntitle: 六年前的自己\ndate: 2021-12-22 15:17:53\ntags: 博客迁移\ncategories:\n- 日常\n---\n\n[https://csrjtan.github.io/](https://csrjtan.github.io/)\n回看六年前的自己，摘录一些当时有意义的文段\n\n### 23岁的生日\n\n重读六年前的自己，用文字记录对这个世界的感受和认知，那时候的自己充满了希望，虽然能力配不上欲望而渐渐失落，但依然希望找到那种年轻的感觉。\n\n### \n当年的愿望：\n- 工作上：提高编程和学术能力\n- 生活上：爱家人，爱生活，爱伴侣\n- 日常上：坚持读，坚持写，坚持学，坚持感受，坚持表达\n\n```\n《成长的天空》 \n我沉浸在自己的世界里\n写着无关是非的歌谣\n点蓝的笔触\n划过了年轻的天空\n一只飞鸟带走我的青春\n还我，岁月沉淀的帽子\n轻声说道\n年轻总不是永远的借口\n```\n\n### 回看中秋自省的自己\n经过5年起起落落，心态转变得很明显甚至于有点得过且过的样子，现在自己比年轻的自己多了一点能力和资源，却失去了做大梦的勇气和毅力。希望自己能依然不断找到人生的兴奋点，勇往直前地去追寻探索，从今天开始，真正的为自己而活，不在乎别人的眼光，不在乎可能会失去的安逸。\n\n### 家人信息简要\n爸：1961.7.8，牛，会计。爱好军事政治经济唱歌。性格硬朗好面子。优点：精神好，能干，勤勉\n妈：1961.11.12，牛，仓管（退休）。爱好家庭家人养生。优点：节俭，爱戴我们，慈祥\n哥：1987.8.9，兔，前端全栈，爱好广泛潮流酷玩。优点：工程能力强，迁就随和\n为：1992.08.13，猴，算法攻城狮。爱好：声乐，运动，游戏。优点：耐受力，随和\n\n### 选书策略\n出版社->作者->版次->印次->印数\n\n### 追逐幸福的要素\n- 找到喜欢的工作，有收入又受到社会尊重\n- 减少上下班耗费的时间，有充足的社交时间\n- 对国家和社会有政治热情，有参与度\n\n``` 笔记本的一首诗\n不论曾经的彼此多么幼稚，多么可笑\n终有一天我们都变得成熟；\n也终有一天，我们都会老去；\n可是，却没有人可以永远不长大，\n却没有人可以永远年轻，\n成熟，有时候会让人心痛、很无奈。\n那个时候才会懂得：\n爱情本不是件该执着的事情。\n```","slug":"rizhi/六年前的自己","published":1,"updated":"2022-01-05T06:25:14.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavd001h28zdeey68058","content":"<p><a href=\"https://csrjtan.github.io/\">https://csrjtan.github.io/</a><br>回看六年前的自己，摘录一些当时有意义的文段</p>\n<h3 id=\"23岁的生日\"><a href=\"#23岁的生日\" class=\"headerlink\" title=\"23岁的生日\"></a>23岁的生日</h3><p>重读六年前的自己，用文字记录对这个世界的感受和认知，那时候的自己充满了希望，虽然能力配不上欲望而渐渐失落，但依然希望找到那种年轻的感觉。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>当年的愿望：</p>\n<ul>\n<li>工作上：提高编程和学术能力</li>\n<li>生活上：爱家人，爱生活，爱伴侣</li>\n<li>日常上：坚持读，坚持写，坚持学，坚持感受，坚持表达</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">《成长的天空》 </span><br><span class=\"line\">我沉浸在自己的世界里</span><br><span class=\"line\">写着无关是非的歌谣</span><br><span class=\"line\">点蓝的笔触</span><br><span class=\"line\">划过了年轻的天空</span><br><span class=\"line\">一只飞鸟带走我的青春</span><br><span class=\"line\">还我，岁月沉淀的帽子</span><br><span class=\"line\">轻声说道</span><br><span class=\"line\">年轻总不是永远的借口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回看中秋自省的自己\"><a href=\"#回看中秋自省的自己\" class=\"headerlink\" title=\"回看中秋自省的自己\"></a>回看中秋自省的自己</h3><p>经过5年起起落落，心态转变得很明显甚至于有点得过且过的样子，现在自己比年轻的自己多了一点能力和资源，却失去了做大梦的勇气和毅力。希望自己能依然不断找到人生的兴奋点，勇往直前地去追寻探索，从今天开始，真正的为自己而活，不在乎别人的眼光，不在乎可能会失去的安逸。</p>\n<h3 id=\"家人信息简要\"><a href=\"#家人信息简要\" class=\"headerlink\" title=\"家人信息简要\"></a>家人信息简要</h3><p>爸：1961.7.8，牛，会计。爱好军事政治经济唱歌。性格硬朗好面子。优点：精神好，能干，勤勉<br>妈：1961.11.12，牛，仓管（退休）。爱好家庭家人养生。优点：节俭，爱戴我们，慈祥<br>哥：1987.8.9，兔，前端全栈，爱好广泛潮流酷玩。优点：工程能力强，迁就随和<br>为：1992.08.13，猴，算法攻城狮。爱好：声乐，运动，游戏。优点：耐受力，随和</p>\n<h3 id=\"选书策略\"><a href=\"#选书策略\" class=\"headerlink\" title=\"选书策略\"></a>选书策略</h3><p>出版社-&gt;作者-&gt;版次-&gt;印次-&gt;印数</p>\n<h3 id=\"追逐幸福的要素\"><a href=\"#追逐幸福的要素\" class=\"headerlink\" title=\"追逐幸福的要素\"></a>追逐幸福的要素</h3><ul>\n<li>找到喜欢的工作，有收入又受到社会尊重</li>\n<li>减少上下班耗费的时间，有充足的社交时间</li>\n<li>对国家和社会有政治热情，有参与度</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不论曾经的彼此多么幼稚，多么可笑</span><br><span class=\"line\">终有一天我们都变得成熟；</span><br><span class=\"line\">也终有一天，我们都会老去；</span><br><span class=\"line\">可是，却没有人可以永远不长大，</span><br><span class=\"line\">却没有人可以永远年轻，</span><br><span class=\"line\">成熟，有时候会让人心痛、很无奈。</span><br><span class=\"line\">那个时候才会懂得：</span><br><span class=\"line\">爱情本不是件该执着的事情。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":787,"excerpt":"","more":"<p><a href=\"https://csrjtan.github.io/\">https://csrjtan.github.io/</a><br>回看六年前的自己，摘录一些当时有意义的文段</p>\n<h3 id=\"23岁的生日\"><a href=\"#23岁的生日\" class=\"headerlink\" title=\"23岁的生日\"></a>23岁的生日</h3><p>重读六年前的自己，用文字记录对这个世界的感受和认知，那时候的自己充满了希望，虽然能力配不上欲望而渐渐失落，但依然希望找到那种年轻的感觉。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>当年的愿望：</p>\n<ul>\n<li>工作上：提高编程和学术能力</li>\n<li>生活上：爱家人，爱生活，爱伴侣</li>\n<li>日常上：坚持读，坚持写，坚持学，坚持感受，坚持表达</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">《成长的天空》 </span><br><span class=\"line\">我沉浸在自己的世界里</span><br><span class=\"line\">写着无关是非的歌谣</span><br><span class=\"line\">点蓝的笔触</span><br><span class=\"line\">划过了年轻的天空</span><br><span class=\"line\">一只飞鸟带走我的青春</span><br><span class=\"line\">还我，岁月沉淀的帽子</span><br><span class=\"line\">轻声说道</span><br><span class=\"line\">年轻总不是永远的借口</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回看中秋自省的自己\"><a href=\"#回看中秋自省的自己\" class=\"headerlink\" title=\"回看中秋自省的自己\"></a>回看中秋自省的自己</h3><p>经过5年起起落落，心态转变得很明显甚至于有点得过且过的样子，现在自己比年轻的自己多了一点能力和资源，却失去了做大梦的勇气和毅力。希望自己能依然不断找到人生的兴奋点，勇往直前地去追寻探索，从今天开始，真正的为自己而活，不在乎别人的眼光，不在乎可能会失去的安逸。</p>\n<h3 id=\"家人信息简要\"><a href=\"#家人信息简要\" class=\"headerlink\" title=\"家人信息简要\"></a>家人信息简要</h3><p>爸：1961.7.8，牛，会计。爱好军事政治经济唱歌。性格硬朗好面子。优点：精神好，能干，勤勉<br>妈：1961.11.12，牛，仓管（退休）。爱好家庭家人养生。优点：节俭，爱戴我们，慈祥<br>哥：1987.8.9，兔，前端全栈，爱好广泛潮流酷玩。优点：工程能力强，迁就随和<br>为：1992.08.13，猴，算法攻城狮。爱好：声乐，运动，游戏。优点：耐受力，随和</p>\n<h3 id=\"选书策略\"><a href=\"#选书策略\" class=\"headerlink\" title=\"选书策略\"></a>选书策略</h3><p>出版社-&gt;作者-&gt;版次-&gt;印次-&gt;印数</p>\n<h3 id=\"追逐幸福的要素\"><a href=\"#追逐幸福的要素\" class=\"headerlink\" title=\"追逐幸福的要素\"></a>追逐幸福的要素</h3><ul>\n<li>找到喜欢的工作，有收入又受到社会尊重</li>\n<li>减少上下班耗费的时间，有充足的社交时间</li>\n<li>对国家和社会有政治热情，有参与度</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不论曾经的彼此多么幼稚，多么可笑</span><br><span class=\"line\">终有一天我们都变得成熟；</span><br><span class=\"line\">也终有一天，我们都会老去；</span><br><span class=\"line\">可是，却没有人可以永远不长大，</span><br><span class=\"line\">却没有人可以永远年轻，</span><br><span class=\"line\">成熟，有时候会让人心痛、很无奈。</span><br><span class=\"line\">那个时候才会懂得：</span><br><span class=\"line\">爱情本不是件该执着的事情。</span><br></pre></td></tr></table></figure>"},{"title":"2021_年终总结","mathjax":true,"date":"2021-12-31T06:19:34.000Z","_content":"回顾今年的自己，提出个人思见和应该执行改进的点。\n\n### 工作上 \n年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于opencv的图表绘制上，另外一个是基于opencv的户型图分割项目。由于数据来源没有统一化，基于图像的户型分割较大的不稳定因素；关于图表绘制核心的功能就是解决文本碰撞的问题；期间还用网页自动化点击脚本完成了一个疫情一日一表的自动填表功能，节省了每日必做的无用行为。之前看到python基于桌面图像识别可以自动匹配鼠标行为，这是原来项目的高级方法。作为一个程序员，生活中如果出现较多的重复度大的行为与操作时，就应该开始考虑自动化脚本或者程序去自动执行。\n\n跳出在顺德的工作后，由于皮肤问题变本加厉，有很长的一段时间我是在家休养，每天除了睡得非常多以外，大部分时间都在宅家度过，让老父母亲着实担心不浅。这个坏毛病是在香港最后几年养成的，当时的这个研究生和本科的一些坏习惯让我最终渐渐失去了对自我的自律以及对自我的期待，对自我的希望。我当时像泄了气的气球，一泻千里，由此深深的陷入人生以来的低谷。也许是我的叛逆期晚到了，从那一刻我才开始体会到一点点的自由，自我开始向这个世界抗争拉扯。大学以前，一直认为只要读书好就可报答家人，这种被动的内驱力面对真正的困难和社会的残酷竞争时是多么的无力。\n\n害怕失败，害怕白眼，害怕接受自己的无能，于是我有点像堕落的高材生，开始逃避，开始偷懒。一些不良的嗜好也让我的人格不再高尚，比如毫无意义重复的游戏世界,比如深陷情绪的孤独，[](，比如唾手可得的黄色快乐，)还好从没接触直达灵魂的药品了。值得庆幸的是，我自小深深的记住了外婆反复强调的千万不能碰毒品。这句话是外婆对孙辈们的苦口婆心，也是最低最低的要求了。经历的这一切，我深知自己自制力的脆弱，应减少对不良事物的好奇与冒险，希望我这一辈子都能与成瘾性隔绝，否则我很容易预见到自己再一次的堕落。\n\n这一切就发生在今年上，直到年中我也发现自己不能再给自己找借口了，在香港的时候无人约束，我可以随意的挥霍光阴。在家里宅的话，亲戚朋友尤其家里人很是担心，特别是我生命中最重要的两个女人：母亲和媳妇。于是到了年中，虽然皮肤病依然没有康复，但我已经厌倦了作为一个毫无价值的人存在于世。心底里，我渴望世界听到我的声音，因我存在而改变，而不是一直作为一个边缘人物存在着。但很多时候我还是会给自我设限，会介怀于我虚度的光阴，介怀于我曾经的失败，介怀于我那并不闪闪发光的履历。但无论如何，我收拾行囊，重新出发了，以一个更谦卑的姿态。\n\n在boss上，我海投以及面笔了好些公司，最终我依然没有自信的奔赴大公司，我选择了一家智能硬件作为自我调整的起点。6月15日我再次翻开人生的新篇章，来到了深圳塘朗，追逐体面的生活，希望用自己的文字，代码以及思想发光发亮。至此，在HOLA已然半年，早期为算法组开展论文研讨学习，后续是全程跟进云台项目的算法实现：包括SLAM，三维重建以及点云墙面分割的核心模块。目前为止虽然基本的核心功能已然完成，但仍然有很多内容需要补齐学习，为后续真正的工程化作知识储备。另外如CTO所说，HOLA这个平台是否适合我继续发展个人的职业规划以及技术路径。工作这半年，大部分时间是孤身负重前行的，业务最相似的还是算法组的兄弟朋友们：研发一哥，世攀；玩乐达人，炯彬；斯文大汉，啸天；苦比打工人，东勇；除此还有系统大佬jazzy以及CTO聪哥。基本上，公司内部对三维这块是一片空白的，所以产生了硬币的两端：无人监管我的工作，无人能准确评价我的工作；无人关注我的工作，无人协同我的工作。未来的一年希望能加快项目的落地应用，产生实际的价值。\n\n\n#### 2022上半年的工作指标\n- 薪资至少上调20%\n- SLAM 14讲的book & homework\n- PCL的系统学习\n\n### 学习上\n关于今年的学习，从上文就可知确实进步较慢，但要相信人生是个不断经历的过程，如同重看五年前的自己一样，当时虽然稚嫩但充满阳光和希望；如今的自己，虽有初老心态，但尚未暮年，重新出发，为时未晚。\n\n已读书单：《浪潮之巅》，《为我的身体养阳气》，《C++ Primer》\n\n在读书单：《SLAM 14讲》，《三十岁，一切刚刚开始》\n\n学习方向&主题： C++， SLAM， 三维重建， std标准库， STL模板， 算法导论， LEETCODE\n\n重新开始经营我的github,以及我的个人博客，记录生活的点点滴滴，一部一脚印。三十年以来的输入足够我输出一些东西了，积极认真地输出自己的观点，去和这个可爱的世界碰撞摩擦吧！马上要三十岁了，走在这个重要的节点上，希望自己成为有担当，值得信任，靠谱的人。更希望自己打破自我设限的枷锁，去勇敢探索生活，探索生命，去冒险，去舞蹈，去歌唱，这是每个人唯一一次的人生阿，已然安然度过了30年了，没有什么再让你值得畏惧了，那就放手去做吧。\n\n### 生活上\n首先是运动和减肥！！！\n\n关于生活，最大的关键字可能是安逸，但影响最大的词应该是疾病。无论精神上还是身体上，长时间缺乏对生活的激情与热情容易致抑。更进一步引起睡眠紊乱，身体亚健康的各种慢性病也冒出来，比如湿疹，这两年简直痛苦不堪，夜不能寐。战胜严重的皮肤慢性病，需要持之以恒的耐心，需要强颜欢笑的乐观，需要时刻注意控制行为。多少次深夜里，我甚至愿意用各种誓言，只为换来自己的身体健康。年轻时拥有的一切是如此轻而易举而又在后来失去时觉得弥足珍贵。\n\n困扰我工作生活生命已经两年的湿疹，在近期终于在积极阳光的生活中得到一丝丝的控制，明年我并不奢望和贪心康复，只希望面积能缩小至不影响作息，毕竟良好的作息和生活习惯是每一天元气能量的源泉。\n\n另一方面，说到生活，最应该被提起的就是家人与朋友。关于朋友，虽然有丝许的进步，得到现在算法组同事的互动来往，但可能是自身技术不够牛逼或者是不苟言笑，或者是不够真挚待人。虽然入职半年，但真正有互动能见面言笑的人可能两个手也数得完，希望新的一年也继续勇敢表达自我，真挚对待别人。然后就是最重要的家人，来到深圳后，在顺德待的时间大幅减少，一个月能有两次回家看看就不错了。另外和珊珊结婚后尚未育儿，随着年岁渐长，年近30的我们迫切需要生儿育女了，而这一点更是双方家长最迫切的事情了，希望明年能有新的突破。说实话，没有完美的工作，只有称心如意的工作，在HOLA的工作让我慢慢走出自己人生的低谷，work-life balance的双休与无加班节奏也很好的平衡我身体上遇到的种种问题。虽然作为程序员毫无忠诚度可言，但我从心底感激和感恩HOLA，让我重新支棱起了自己，不再是瘫倒地上的烂泥，明年愿自己慢慢成为高飞天际的雄鹰。\n","source":"_posts/rizhi/2021-年终总结.md","raw":"---\ntitle: 2021_年终总结\ncategories:\n  - 年终总结\nmathjax: true\ndate: 2021-12-31 14:19:34\ntags:\n---\n回顾今年的自己，提出个人思见和应该执行改进的点。\n\n### 工作上 \n年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于opencv的图表绘制上，另外一个是基于opencv的户型图分割项目。由于数据来源没有统一化，基于图像的户型分割较大的不稳定因素；关于图表绘制核心的功能就是解决文本碰撞的问题；期间还用网页自动化点击脚本完成了一个疫情一日一表的自动填表功能，节省了每日必做的无用行为。之前看到python基于桌面图像识别可以自动匹配鼠标行为，这是原来项目的高级方法。作为一个程序员，生活中如果出现较多的重复度大的行为与操作时，就应该开始考虑自动化脚本或者程序去自动执行。\n\n跳出在顺德的工作后，由于皮肤问题变本加厉，有很长的一段时间我是在家休养，每天除了睡得非常多以外，大部分时间都在宅家度过，让老父母亲着实担心不浅。这个坏毛病是在香港最后几年养成的，当时的这个研究生和本科的一些坏习惯让我最终渐渐失去了对自我的自律以及对自我的期待，对自我的希望。我当时像泄了气的气球，一泻千里，由此深深的陷入人生以来的低谷。也许是我的叛逆期晚到了，从那一刻我才开始体会到一点点的自由，自我开始向这个世界抗争拉扯。大学以前，一直认为只要读书好就可报答家人，这种被动的内驱力面对真正的困难和社会的残酷竞争时是多么的无力。\n\n害怕失败，害怕白眼，害怕接受自己的无能，于是我有点像堕落的高材生，开始逃避，开始偷懒。一些不良的嗜好也让我的人格不再高尚，比如毫无意义重复的游戏世界,比如深陷情绪的孤独，[](，比如唾手可得的黄色快乐，)还好从没接触直达灵魂的药品了。值得庆幸的是，我自小深深的记住了外婆反复强调的千万不能碰毒品。这句话是外婆对孙辈们的苦口婆心，也是最低最低的要求了。经历的这一切，我深知自己自制力的脆弱，应减少对不良事物的好奇与冒险，希望我这一辈子都能与成瘾性隔绝，否则我很容易预见到自己再一次的堕落。\n\n这一切就发生在今年上，直到年中我也发现自己不能再给自己找借口了，在香港的时候无人约束，我可以随意的挥霍光阴。在家里宅的话，亲戚朋友尤其家里人很是担心，特别是我生命中最重要的两个女人：母亲和媳妇。于是到了年中，虽然皮肤病依然没有康复，但我已经厌倦了作为一个毫无价值的人存在于世。心底里，我渴望世界听到我的声音，因我存在而改变，而不是一直作为一个边缘人物存在着。但很多时候我还是会给自我设限，会介怀于我虚度的光阴，介怀于我曾经的失败，介怀于我那并不闪闪发光的履历。但无论如何，我收拾行囊，重新出发了，以一个更谦卑的姿态。\n\n在boss上，我海投以及面笔了好些公司，最终我依然没有自信的奔赴大公司，我选择了一家智能硬件作为自我调整的起点。6月15日我再次翻开人生的新篇章，来到了深圳塘朗，追逐体面的生活，希望用自己的文字，代码以及思想发光发亮。至此，在HOLA已然半年，早期为算法组开展论文研讨学习，后续是全程跟进云台项目的算法实现：包括SLAM，三维重建以及点云墙面分割的核心模块。目前为止虽然基本的核心功能已然完成，但仍然有很多内容需要补齐学习，为后续真正的工程化作知识储备。另外如CTO所说，HOLA这个平台是否适合我继续发展个人的职业规划以及技术路径。工作这半年，大部分时间是孤身负重前行的，业务最相似的还是算法组的兄弟朋友们：研发一哥，世攀；玩乐达人，炯彬；斯文大汉，啸天；苦比打工人，东勇；除此还有系统大佬jazzy以及CTO聪哥。基本上，公司内部对三维这块是一片空白的，所以产生了硬币的两端：无人监管我的工作，无人能准确评价我的工作；无人关注我的工作，无人协同我的工作。未来的一年希望能加快项目的落地应用，产生实际的价值。\n\n\n#### 2022上半年的工作指标\n- 薪资至少上调20%\n- SLAM 14讲的book & homework\n- PCL的系统学习\n\n### 学习上\n关于今年的学习，从上文就可知确实进步较慢，但要相信人生是个不断经历的过程，如同重看五年前的自己一样，当时虽然稚嫩但充满阳光和希望；如今的自己，虽有初老心态，但尚未暮年，重新出发，为时未晚。\n\n已读书单：《浪潮之巅》，《为我的身体养阳气》，《C++ Primer》\n\n在读书单：《SLAM 14讲》，《三十岁，一切刚刚开始》\n\n学习方向&主题： C++， SLAM， 三维重建， std标准库， STL模板， 算法导论， LEETCODE\n\n重新开始经营我的github,以及我的个人博客，记录生活的点点滴滴，一部一脚印。三十年以来的输入足够我输出一些东西了，积极认真地输出自己的观点，去和这个可爱的世界碰撞摩擦吧！马上要三十岁了，走在这个重要的节点上，希望自己成为有担当，值得信任，靠谱的人。更希望自己打破自我设限的枷锁，去勇敢探索生活，探索生命，去冒险，去舞蹈，去歌唱，这是每个人唯一一次的人生阿，已然安然度过了30年了，没有什么再让你值得畏惧了，那就放手去做吧。\n\n### 生活上\n首先是运动和减肥！！！\n\n关于生活，最大的关键字可能是安逸，但影响最大的词应该是疾病。无论精神上还是身体上，长时间缺乏对生活的激情与热情容易致抑。更进一步引起睡眠紊乱，身体亚健康的各种慢性病也冒出来，比如湿疹，这两年简直痛苦不堪，夜不能寐。战胜严重的皮肤慢性病，需要持之以恒的耐心，需要强颜欢笑的乐观，需要时刻注意控制行为。多少次深夜里，我甚至愿意用各种誓言，只为换来自己的身体健康。年轻时拥有的一切是如此轻而易举而又在后来失去时觉得弥足珍贵。\n\n困扰我工作生活生命已经两年的湿疹，在近期终于在积极阳光的生活中得到一丝丝的控制，明年我并不奢望和贪心康复，只希望面积能缩小至不影响作息，毕竟良好的作息和生活习惯是每一天元气能量的源泉。\n\n另一方面，说到生活，最应该被提起的就是家人与朋友。关于朋友，虽然有丝许的进步，得到现在算法组同事的互动来往，但可能是自身技术不够牛逼或者是不苟言笑，或者是不够真挚待人。虽然入职半年，但真正有互动能见面言笑的人可能两个手也数得完，希望新的一年也继续勇敢表达自我，真挚对待别人。然后就是最重要的家人，来到深圳后，在顺德待的时间大幅减少，一个月能有两次回家看看就不错了。另外和珊珊结婚后尚未育儿，随着年岁渐长，年近30的我们迫切需要生儿育女了，而这一点更是双方家长最迫切的事情了，希望明年能有新的突破。说实话，没有完美的工作，只有称心如意的工作，在HOLA的工作让我慢慢走出自己人生的低谷，work-life balance的双休与无加班节奏也很好的平衡我身体上遇到的种种问题。虽然作为程序员毫无忠诚度可言，但我从心底感激和感恩HOLA，让我重新支棱起了自己，不再是瘫倒地上的烂泥，明年愿自己慢慢成为高飞天际的雄鹰。\n","slug":"rizhi/2021-年终总结","published":1,"updated":"2022-01-05T06:25:14.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgave001l28zd2plla0rj","content":"<p>回顾今年的自己，提出个人思见和应该执行改进的点。</p>\n<h3 id=\"工作上\"><a href=\"#工作上\" class=\"headerlink\" title=\"工作上\"></a>工作上</h3><p>年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于opencv的图表绘制上，另外一个是基于opencv的户型图分割项目。由于数据来源没有统一化，基于图像的户型分割较大的不稳定因素；关于图表绘制核心的功能就是解决文本碰撞的问题；期间还用网页自动化点击脚本完成了一个疫情一日一表的自动填表功能，节省了每日必做的无用行为。之前看到python基于桌面图像识别可以自动匹配鼠标行为，这是原来项目的高级方法。作为一个程序员，生活中如果出现较多的重复度大的行为与操作时，就应该开始考虑自动化脚本或者程序去自动执行。</p>\n<p>跳出在顺德的工作后，由于皮肤问题变本加厉，有很长的一段时间我是在家休养，每天除了睡得非常多以外，大部分时间都在宅家度过，让老父母亲着实担心不浅。这个坏毛病是在香港最后几年养成的，当时的这个研究生和本科的一些坏习惯让我最终渐渐失去了对自我的自律以及对自我的期待，对自我的希望。我当时像泄了气的气球，一泻千里，由此深深的陷入人生以来的低谷。也许是我的叛逆期晚到了，从那一刻我才开始体会到一点点的自由，自我开始向这个世界抗争拉扯。大学以前，一直认为只要读书好就可报答家人，这种被动的内驱力面对真正的困难和社会的残酷竞争时是多么的无力。</p>\n<p>害怕失败，害怕白眼，害怕接受自己的无能，于是我有点像堕落的高材生，开始逃避，开始偷懒。一些不良的嗜好也让我的人格不再高尚，比如毫无意义重复的游戏世界,比如深陷情绪的孤独，<a href=\"%EF%BC%8C%E6%AF%94%E5%A6%82%E5%94%BE%E6%89%8B%E5%8F%AF%E5%BE%97%E7%9A%84%E9%BB%84%E8%89%B2%E5%BF%AB%E4%B9%90%EF%BC%8C\"></a>还好从没接触直达灵魂的药品了。值得庆幸的是，我自小深深的记住了外婆反复强调的千万不能碰毒品。这句话是外婆对孙辈们的苦口婆心，也是最低最低的要求了。经历的这一切，我深知自己自制力的脆弱，应减少对不良事物的好奇与冒险，希望我这一辈子都能与成瘾性隔绝，否则我很容易预见到自己再一次的堕落。</p>\n<p>这一切就发生在今年上，直到年中我也发现自己不能再给自己找借口了，在香港的时候无人约束，我可以随意的挥霍光阴。在家里宅的话，亲戚朋友尤其家里人很是担心，特别是我生命中最重要的两个女人：母亲和媳妇。于是到了年中，虽然皮肤病依然没有康复，但我已经厌倦了作为一个毫无价值的人存在于世。心底里，我渴望世界听到我的声音，因我存在而改变，而不是一直作为一个边缘人物存在着。但很多时候我还是会给自我设限，会介怀于我虚度的光阴，介怀于我曾经的失败，介怀于我那并不闪闪发光的履历。但无论如何，我收拾行囊，重新出发了，以一个更谦卑的姿态。</p>\n<p>在boss上，我海投以及面笔了好些公司，最终我依然没有自信的奔赴大公司，我选择了一家智能硬件作为自我调整的起点。6月15日我再次翻开人生的新篇章，来到了深圳塘朗，追逐体面的生活，希望用自己的文字，代码以及思想发光发亮。至此，在HOLA已然半年，早期为算法组开展论文研讨学习，后续是全程跟进云台项目的算法实现：包括SLAM，三维重建以及点云墙面分割的核心模块。目前为止虽然基本的核心功能已然完成，但仍然有很多内容需要补齐学习，为后续真正的工程化作知识储备。另外如CTO所说，HOLA这个平台是否适合我继续发展个人的职业规划以及技术路径。工作这半年，大部分时间是孤身负重前行的，业务最相似的还是算法组的兄弟朋友们：研发一哥，世攀；玩乐达人，炯彬；斯文大汉，啸天；苦比打工人，东勇；除此还有系统大佬jazzy以及CTO聪哥。基本上，公司内部对三维这块是一片空白的，所以产生了硬币的两端：无人监管我的工作，无人能准确评价我的工作；无人关注我的工作，无人协同我的工作。未来的一年希望能加快项目的落地应用，产生实际的价值。</p>\n<h4 id=\"2022上半年的工作指标\"><a href=\"#2022上半年的工作指标\" class=\"headerlink\" title=\"2022上半年的工作指标\"></a>2022上半年的工作指标</h4><ul>\n<li>薪资至少上调20%</li>\n<li>SLAM 14讲的book &amp; homework</li>\n<li>PCL的系统学习</li>\n</ul>\n<h3 id=\"学习上\"><a href=\"#学习上\" class=\"headerlink\" title=\"学习上\"></a>学习上</h3><p>关于今年的学习，从上文就可知确实进步较慢，但要相信人生是个不断经历的过程，如同重看五年前的自己一样，当时虽然稚嫩但充满阳光和希望；如今的自己，虽有初老心态，但尚未暮年，重新出发，为时未晚。</p>\n<p>已读书单：《浪潮之巅》，《为我的身体养阳气》，《C++ Primer》</p>\n<p>在读书单：《SLAM 14讲》，《三十岁，一切刚刚开始》</p>\n<p>学习方向&amp;主题： C++， SLAM， 三维重建， std标准库， STL模板， 算法导论， LEETCODE</p>\n<p>重新开始经营我的github,以及我的个人博客，记录生活的点点滴滴，一部一脚印。三十年以来的输入足够我输出一些东西了，积极认真地输出自己的观点，去和这个可爱的世界碰撞摩擦吧！马上要三十岁了，走在这个重要的节点上，希望自己成为有担当，值得信任，靠谱的人。更希望自己打破自我设限的枷锁，去勇敢探索生活，探索生命，去冒险，去舞蹈，去歌唱，这是每个人唯一一次的人生阿，已然安然度过了30年了，没有什么再让你值得畏惧了，那就放手去做吧。</p>\n<h3 id=\"生活上\"><a href=\"#生活上\" class=\"headerlink\" title=\"生活上\"></a>生活上</h3><p>首先是运动和减肥！！！</p>\n<p>关于生活，最大的关键字可能是安逸，但影响最大的词应该是疾病。无论精神上还是身体上，长时间缺乏对生活的激情与热情容易致抑。更进一步引起睡眠紊乱，身体亚健康的各种慢性病也冒出来，比如湿疹，这两年简直痛苦不堪，夜不能寐。战胜严重的皮肤慢性病，需要持之以恒的耐心，需要强颜欢笑的乐观，需要时刻注意控制行为。多少次深夜里，我甚至愿意用各种誓言，只为换来自己的身体健康。年轻时拥有的一切是如此轻而易举而又在后来失去时觉得弥足珍贵。</p>\n<p>困扰我工作生活生命已经两年的湿疹，在近期终于在积极阳光的生活中得到一丝丝的控制，明年我并不奢望和贪心康复，只希望面积能缩小至不影响作息，毕竟良好的作息和生活习惯是每一天元气能量的源泉。</p>\n<p>另一方面，说到生活，最应该被提起的就是家人与朋友。关于朋友，虽然有丝许的进步，得到现在算法组同事的互动来往，但可能是自身技术不够牛逼或者是不苟言笑，或者是不够真挚待人。虽然入职半年，但真正有互动能见面言笑的人可能两个手也数得完，希望新的一年也继续勇敢表达自我，真挚对待别人。然后就是最重要的家人，来到深圳后，在顺德待的时间大幅减少，一个月能有两次回家看看就不错了。另外和珊珊结婚后尚未育儿，随着年岁渐长，年近30的我们迫切需要生儿育女了，而这一点更是双方家长最迫切的事情了，希望明年能有新的突破。说实话，没有完美的工作，只有称心如意的工作，在HOLA的工作让我慢慢走出自己人生的低谷，work-life balance的双休与无加班节奏也很好的平衡我身体上遇到的种种问题。虽然作为程序员毫无忠诚度可言，但我从心底感激和感恩HOLA，让我重新支棱起了自己，不再是瘫倒地上的烂泥，明年愿自己慢慢成为高飞天际的雄鹰。</p>\n","site":{"data":{}},"length":2681,"excerpt":"","more":"<p>回顾今年的自己，提出个人思见和应该执行改进的点。</p>\n<h3 id=\"工作上\"><a href=\"#工作上\" class=\"headerlink\" title=\"工作上\"></a>工作上</h3><p>年初从测量机器人这个项目跳出来，主要是派发的需求集中在基于opencv的图表绘制上，另外一个是基于opencv的户型图分割项目。由于数据来源没有统一化，基于图像的户型分割较大的不稳定因素；关于图表绘制核心的功能就是解决文本碰撞的问题；期间还用网页自动化点击脚本完成了一个疫情一日一表的自动填表功能，节省了每日必做的无用行为。之前看到python基于桌面图像识别可以自动匹配鼠标行为，这是原来项目的高级方法。作为一个程序员，生活中如果出现较多的重复度大的行为与操作时，就应该开始考虑自动化脚本或者程序去自动执行。</p>\n<p>跳出在顺德的工作后，由于皮肤问题变本加厉，有很长的一段时间我是在家休养，每天除了睡得非常多以外，大部分时间都在宅家度过，让老父母亲着实担心不浅。这个坏毛病是在香港最后几年养成的，当时的这个研究生和本科的一些坏习惯让我最终渐渐失去了对自我的自律以及对自我的期待，对自我的希望。我当时像泄了气的气球，一泻千里，由此深深的陷入人生以来的低谷。也许是我的叛逆期晚到了，从那一刻我才开始体会到一点点的自由，自我开始向这个世界抗争拉扯。大学以前，一直认为只要读书好就可报答家人，这种被动的内驱力面对真正的困难和社会的残酷竞争时是多么的无力。</p>\n<p>害怕失败，害怕白眼，害怕接受自己的无能，于是我有点像堕落的高材生，开始逃避，开始偷懒。一些不良的嗜好也让我的人格不再高尚，比如毫无意义重复的游戏世界,比如深陷情绪的孤独，<a href=\"%EF%BC%8C%E6%AF%94%E5%A6%82%E5%94%BE%E6%89%8B%E5%8F%AF%E5%BE%97%E7%9A%84%E9%BB%84%E8%89%B2%E5%BF%AB%E4%B9%90%EF%BC%8C\"></a>还好从没接触直达灵魂的药品了。值得庆幸的是，我自小深深的记住了外婆反复强调的千万不能碰毒品。这句话是外婆对孙辈们的苦口婆心，也是最低最低的要求了。经历的这一切，我深知自己自制力的脆弱，应减少对不良事物的好奇与冒险，希望我这一辈子都能与成瘾性隔绝，否则我很容易预见到自己再一次的堕落。</p>\n<p>这一切就发生在今年上，直到年中我也发现自己不能再给自己找借口了，在香港的时候无人约束，我可以随意的挥霍光阴。在家里宅的话，亲戚朋友尤其家里人很是担心，特别是我生命中最重要的两个女人：母亲和媳妇。于是到了年中，虽然皮肤病依然没有康复，但我已经厌倦了作为一个毫无价值的人存在于世。心底里，我渴望世界听到我的声音，因我存在而改变，而不是一直作为一个边缘人物存在着。但很多时候我还是会给自我设限，会介怀于我虚度的光阴，介怀于我曾经的失败，介怀于我那并不闪闪发光的履历。但无论如何，我收拾行囊，重新出发了，以一个更谦卑的姿态。</p>\n<p>在boss上，我海投以及面笔了好些公司，最终我依然没有自信的奔赴大公司，我选择了一家智能硬件作为自我调整的起点。6月15日我再次翻开人生的新篇章，来到了深圳塘朗，追逐体面的生活，希望用自己的文字，代码以及思想发光发亮。至此，在HOLA已然半年，早期为算法组开展论文研讨学习，后续是全程跟进云台项目的算法实现：包括SLAM，三维重建以及点云墙面分割的核心模块。目前为止虽然基本的核心功能已然完成，但仍然有很多内容需要补齐学习，为后续真正的工程化作知识储备。另外如CTO所说，HOLA这个平台是否适合我继续发展个人的职业规划以及技术路径。工作这半年，大部分时间是孤身负重前行的，业务最相似的还是算法组的兄弟朋友们：研发一哥，世攀；玩乐达人，炯彬；斯文大汉，啸天；苦比打工人，东勇；除此还有系统大佬jazzy以及CTO聪哥。基本上，公司内部对三维这块是一片空白的，所以产生了硬币的两端：无人监管我的工作，无人能准确评价我的工作；无人关注我的工作，无人协同我的工作。未来的一年希望能加快项目的落地应用，产生实际的价值。</p>\n<h4 id=\"2022上半年的工作指标\"><a href=\"#2022上半年的工作指标\" class=\"headerlink\" title=\"2022上半年的工作指标\"></a>2022上半年的工作指标</h4><ul>\n<li>薪资至少上调20%</li>\n<li>SLAM 14讲的book &amp; homework</li>\n<li>PCL的系统学习</li>\n</ul>\n<h3 id=\"学习上\"><a href=\"#学习上\" class=\"headerlink\" title=\"学习上\"></a>学习上</h3><p>关于今年的学习，从上文就可知确实进步较慢，但要相信人生是个不断经历的过程，如同重看五年前的自己一样，当时虽然稚嫩但充满阳光和希望；如今的自己，虽有初老心态，但尚未暮年，重新出发，为时未晚。</p>\n<p>已读书单：《浪潮之巅》，《为我的身体养阳气》，《C++ Primer》</p>\n<p>在读书单：《SLAM 14讲》，《三十岁，一切刚刚开始》</p>\n<p>学习方向&amp;主题： C++， SLAM， 三维重建， std标准库， STL模板， 算法导论， LEETCODE</p>\n<p>重新开始经营我的github,以及我的个人博客，记录生活的点点滴滴，一部一脚印。三十年以来的输入足够我输出一些东西了，积极认真地输出自己的观点，去和这个可爱的世界碰撞摩擦吧！马上要三十岁了，走在这个重要的节点上，希望自己成为有担当，值得信任，靠谱的人。更希望自己打破自我设限的枷锁，去勇敢探索生活，探索生命，去冒险，去舞蹈，去歌唱，这是每个人唯一一次的人生阿，已然安然度过了30年了，没有什么再让你值得畏惧了，那就放手去做吧。</p>\n<h3 id=\"生活上\"><a href=\"#生活上\" class=\"headerlink\" title=\"生活上\"></a>生活上</h3><p>首先是运动和减肥！！！</p>\n<p>关于生活，最大的关键字可能是安逸，但影响最大的词应该是疾病。无论精神上还是身体上，长时间缺乏对生活的激情与热情容易致抑。更进一步引起睡眠紊乱，身体亚健康的各种慢性病也冒出来，比如湿疹，这两年简直痛苦不堪，夜不能寐。战胜严重的皮肤慢性病，需要持之以恒的耐心，需要强颜欢笑的乐观，需要时刻注意控制行为。多少次深夜里，我甚至愿意用各种誓言，只为换来自己的身体健康。年轻时拥有的一切是如此轻而易举而又在后来失去时觉得弥足珍贵。</p>\n<p>困扰我工作生活生命已经两年的湿疹，在近期终于在积极阳光的生活中得到一丝丝的控制，明年我并不奢望和贪心康复，只希望面积能缩小至不影响作息，毕竟良好的作息和生活习惯是每一天元气能量的源泉。</p>\n<p>另一方面，说到生活，最应该被提起的就是家人与朋友。关于朋友，虽然有丝许的进步，得到现在算法组同事的互动来往，但可能是自身技术不够牛逼或者是不苟言笑，或者是不够真挚待人。虽然入职半年，但真正有互动能见面言笑的人可能两个手也数得完，希望新的一年也继续勇敢表达自我，真挚对待别人。然后就是最重要的家人，来到深圳后，在顺德待的时间大幅减少，一个月能有两次回家看看就不错了。另外和珊珊结婚后尚未育儿，随着年岁渐长，年近30的我们迫切需要生儿育女了，而这一点更是双方家长最迫切的事情了，希望明年能有新的突破。说实话，没有完美的工作，只有称心如意的工作，在HOLA的工作让我慢慢走出自己人生的低谷，work-life balance的双休与无加班节奏也很好的平衡我身体上遇到的种种问题。虽然作为程序员毫无忠诚度可言，但我从心底感激和感恩HOLA，让我重新支棱起了自己，不再是瘫倒地上的烂泥，明年愿自己慢慢成为高飞天际的雄鹰。</p>\n"},{"title":"软技能","mathjax":true,"date":"2022-02-21T06:31:30.000Z","_content":"\n主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。\n\n### 职业篇\n`你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然丧失。职业发展的驱动力一定是来自个体本身。记住：工作属于公司的，而职业生涯却属于你自己的。\n-- 厄尔.南丁格尔`\n\n#### 自我驱动\n\n拥有商业心态：时刻将自己的软件开发事业当作一桩生意来对待，不要被愚弄了。当你为了谋生一头扎进代码世界时，其实你和中世纪小镇开铁匠铺的铁匠没有什么差别。不要让特定的岗位或者角色固化了你和你的整个职业生涯。转变心态，从卖身契的仆人转变为拥有自己生意的商人，从仰人鼻息的弱势地位转换成自我治理和自我引导的主动地位。\n\n要做到：\n- 专注于你正在提供怎样的服务，以及如何营销这项服务；\n- 想方设法提升你的服务；\n- 思考你可以专注为哪一特定类型的客户或行业提供特定的服务；\n- 集中精力成为专家，专门为某一特定类型的客户提供专业的整体服务；（只有真正专注于一类客户，才能找到非常好的工作）\n再者，如何更好地宣传你的服务，更好地找到你的客户。\n\n#### 沟通能力\n建议阅读《人性的弱点》--Dale Camegie\n\n每个人都希望自己重要，永远不要批评，学会换位思考，思考他人而言什么才最重要。将注意力转移到他们身上，用他们的角度思考问题，什么让他们索然无味，什么让他们聚精会神。你的建议出发点理由可能是“让软件更稳定”或者“让软件按时交付”。\n\n当你学会了如何以令人愉悦的方式与他人互动和交往时，自己的生活也越来越愉快，通过习得这些技能，积累了让自己获益终生的财富，这样的价值无法用金钱衡量。\n\n还要学会逃离“毒瘤”，争吵时试着果断站在对手一边，结果可能会大吃一惊。\n\n#### 关于面试\n高级的入职流程：\n从期待加入的公司里找到联系人->与联系人建立紧密关系->获得个人推荐->面试\n\n正式面试：自信的展示自己的能力，展示工作需要做的内容\n\n从雇主的角度，招聘员工是一项投资，需要花费时间和金钱，当然希望看到良好的投资回报率。\n明确知道自己要做什么以及怎样去做，需要集中精力证明自己是无需督促也能发自做好事情的员工。\n确保自己技术能力，一直阅读技术书籍和博客，花时间提升自己的技能。\n为了获得面试经验，也要去面试，多多练习。\n\n采取行动：\n- 即使无需努力找工作，也要整理一份清单，列出想去的公司以及你认识的这些公司的人。\n- 如果公司一个人都不认识，那么制定计划至少去认识其中的一位员工并与之建立联系。\n- 在所在领域找出至少一个本地用户组，参与聚会，把自己介绍给尽可能多的人。\n\n关于职业的选择：雇员、独立咨询师（外包服务）、创业者，从雇员稳定开始，结识各类型的朋友并向他们了解如何走上以及走好他们的路。\n\n关于求职：缩小工作机会池，提高被录取的机会；如何选择专业：\n- 现在或以前工作的公司里，有哪些主要痛点？你能成为一名专门解决这些痛点的专家吗？\n- 有没有一种特定的工作无人能做，或者缺乏经验丰富的人？成为这个领域的专家，你会获得大量业务。\n- 在各种会议上和用户组中哪些话题最常出现？\n- 哪类问题你回复得最多，无论是针对同事还是Stack Overflow这样的网站上？\n尽可能地具体，使得在细分市场上更抢手。\n\n采取行动：\n- 列出想到所有软件开发的专业领域，从广义范畴逐一细分，看看你能细化到多具体\n- 当前的专业领域是什么？如果没有，希望选择专攻哪个领域\n- 主流的招聘网站看看自己的专业领域市场行情如何，确定专业化道路让自己受益还是限制了自己的选择\n\n关于公司\n| 公司规模 | 优点 | 缺点 |\n| 小 | 承担多种责任，工作影响力大 | 没法安静写代码，稳定性差 |\n| 中 | 稳定，加班少 | 变化慢，难涉及前沿技术 |\n| 大 | 完备的流程和规范，培训以及大型有影响力的项目 | 官僚主义，只负责代码库的小部分，难受关注 |\n\n#### 晋升之路\n在更多金钱还是更多责任的选择上，长远看，正确选择几乎是更多责任。\n\n如何让自己承担更多责任：\n- 不受重视的项目，你能负责它吗\n- 你能帮助团队里的新人快速成长吗\n- 你能负责文档制作流程，并保证及时更新文档吗\n- 哪项工作没有人愿意做，你愿意承担并将其简化或者自动化吗\n\n如何让自己引人注目:\n- 每天记录自己的活动日志-把日志以周报的形式发送给经理\n- 提供演讲或培训-选择一个对团队有用的话题\n- 发表意见-只要在会议上就这么做，或者只要你能得到的机会就这么做\n- 保证“曝光度”-定期与老板会面，确保你经常被注意到\n\n#### 如何成为专业人士\n`The War of Art: 成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。`\n\n认真规划自己的：已经做了什么、计划做什么、有哪些障碍\n\n培养正确的习惯，推荐阅读《习惯的力量》\n\n#### 关于赢得自由：为自己工作\n辞掉之前需要一个切实可行的计划，强烈推荐用业余时间启动想创建的业务，等从该业务中产生足以维持生计的收入时，你再转为全职。迫于现实现金流的问题，制订一个计划：什么时候就得认怂做回雇员。以后总可以东山再起，只要没有巨额信用卡债务，没有房屋抵押，没有从亲朋好友借钱而影响到自己的未来。\n\n为自己工作的意义：1.会比为别人工作时更努力 2.你会更热爱在做的事情，但不要指望持续很久，时间的流逝会使热情变得捉摸不定甚至消逝殆尽 3.突如的工作量使得不止工作8小时\n推荐书目《So Good They Can't Ignore You》\n\n\n如何行动\n1.减每月开支并累积资金:确保生存\n2.保障常规工作之余每周投入15小时做自己的事情，并坚持执行半年以上，确保收入\n3.提前计算好确切日期，早在一年前做好准备\n\n\n#### 关于创业\n了解孵化器或者加速器，注入小额资金换取公司小量股份，通常只持续数月并快速成长。\n采取行动：\n- 研究以下一两家心仪的创业公司历史，注意它们是如何开始以及获得融资的\n- 创立时是单创始人还是多创始人\n- 创始人还成功创立过其他公司吗\n- 什么时候开始获得融资的，获得了多少\n- 这些公司启动时是否加入加速器计划\n\n#### 关于远程办公\n接受新的工作模式以及迎接新挑战\n- 时间管理上：建立缜密规律的时间管理，提前计划安排，迎接变化\n- 自我激励上：建议阅读《驱动力》-Daniel Pink,用习惯驱动自己，排除干扰\n- 孤独感：周而复始孤独一个人肯定会产生负面影响，走出去，寻找社交生活：参与本地的软件开发者小组聚会，到咖啡馆或者书店工作，规律性到健身房或者运动\n开始关注允许远程工作的公司，或者完全分布式工作的团队\n\n#### 关于成功\n“假装自己能成功”，进行自我心理暗示：\n- 你仿佛已经具备了成功完成任务的技能和天分\n- 你仿佛已经成为自己想成为的那类人\n- 仿佛战斗已经结束，而你大获全胜，因为你深知如果自己坚持不懈，胜利就在眼前\n- 你仿佛已经对即将踏上的未知道路驾轻就熟\n\n这是有意识地让自己身处逆境，迫使自己学会拼搏。正是在生活中有这样的心态，带领自己勇敢走向未知领域，坚信挑战与机会并存。如果想学会“假装自己能成功”，你就必须拥有破釜沉舟的勇气。\n\n采取行动：\n- 诚实地评估一下自己。面对困境，你的心态如何？当遭遇新问题或者不熟悉的问题时，你会怎样做？回想以下，上一次面对困难或者不熟悉的形势时，你是怎么做的？\n- 你该怎样树立一种自信而不自负的心态？自信与自负之间的区别是什么？为了强化“假装自己能成功”的能力，你现在应该做什么？\n- 小练习：有目的地将自己置于困境，演练以下自己既定的应对策略。\n- Fake it till you make it\n\n#### 关于技术\n很多情况下，解决问题并不只有一个好的或者是最好的方法。同理，最好的编程语言、框架、操作系统甚至是文本编辑器都不会只有一种，你可找到最适合自己的技术和编程语言以及工具。\n\n采取行动：\n- 列出你钟爱的所有技术，或者你觉得更胜一筹的技术\n- 针对表的每一项，想想它为什么吸引你，你做了哪些比较确定它确实“更胜一筹”？你真的使用过它们的竞争对手吗？\n- 挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公讨论为什么他们喜欢，更进一步，你试着去使用\n\n\n### 自我营销\n\n营销追求“实现价值在先，要求回报在后”，你的营销越好，你的才华才能表现得越发淋漓尽致，自我营销的正确方式是为他人提供价值。\n\n自我营销无非就是学习如何控制好要传达的信息，塑造好自己的形象，扩展信息传达的人群。当开始营销自己的时候，你就是在积极地管理自己的职业生涯，有目的地选择好如何塑造自己，以及将塑造好的自己主动推送给那些对你感兴趣的人。\n\n采取行动：\n- 如果你还没有博客，开通一个吧。想想看，你会专注在哪些主题上？\n- 给你的新博客至少想出20篇文章\n- 现在做一个时间表，列出开通博客的具体时间以及内容编排\n\n#### 打造引人注目的品牌\n品牌的四要素：要传递的信息、品牌一致性、品牌的视觉符号、品牌的曝光率\n\n信息是目的性，传达承载的情感诉求;一致性、视觉符号以及曝光容易增强影响力；\n\n步骤：\n- 明确传达的品牌信息\n- 挑选细分市场\n- 创建品牌口号\n- 创建电梯内销售概要：电梯时间介绍完自我\n- 创建视觉符号\n\n#### 博客的重要性\n一方面面试评估技术技能非常困难，博客包含丰富的相关信息，代码示例以及深入分析；另一方面流量足够大可以用于推销自己产品的平台；带来一定的业界声望，提高你的沟通能力以及组织自己的思想转化成能力。提高内容的质量，尽量尝试编写高质量的博客文章。\n\n提高访问量：尝试建设性的评论，并附上个人链接。增加方便分享的功能。\n\n### 为他人增加价值\n`不要努力成为一个成功的人，而要努力成为一个有价值的人   --阿尔伯特.爱因斯坦`\n\n#### 给人们想要的东西\n通过现象看本质，找到方法来提供自己的价值。唯一的标准是通过你的方法，可以有效解决真实的问题。\n\n采取行动\n- 什么样的内容会让你觉得最有价值？有没有哪个特别的博客会让你每周都去阅读，或者哪个博客的内容如此有价值让你欲罢不能，以至于一点都不想落下\n- 你可以提供给自己的受众或者你的细分市场最大价值是什么？你认为什么样的内容对于你的受众群体而言最有价值的？\n- 善于运用社交媒体：如何界定价值：你认为有用或有趣的。\n\n通过社交媒体分享的内容\n- 博客文章：转帖一些博客文章或者自己的博客\n- 新闻报道：转载一些有趣的文章，尽量与自己的细分领域有关，或者与软件开发相关\n- 励志名言：名人名言，特别是鼓舞人心、非常流行的名言警句\n- 技巧、小窍门：任何你所了解的特殊技巧或者知识，别人会很欣赏\n- 幽默故事：发一点幽默故事挺不错的，但是一定要确保好笑，另外千万别冒犯别人\n- 吸引人的问题：这是一个很棒的吸引你的听众并和他们互动的方法\n- 自己的一些推广方式活动：别太多，并且跟其他内容混合在一起\n正如产品和服务90%免费一样，分享的内容也要90%有价值的\n\n#### 保持活跃度\n社交媒体一大挑战需保持活跃度，如若没有持之以恒，很容易丢掉大量粉丝。选择一到两个心仪的平台，不同社交具有不同的功能划分。\n\n\n\n\n\n\n\n\n","source":"_posts/reading/软技能.md","raw":"---\ntitle: 软技能\ncategories:\n  - 读书笔记\nmathjax: true\ndate: 2022-02-21 14:31:30\ntags: 读书笔记\n---\n\n主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。\n\n### 职业篇\n`你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然丧失。职业发展的驱动力一定是来自个体本身。记住：工作属于公司的，而职业生涯却属于你自己的。\n-- 厄尔.南丁格尔`\n\n#### 自我驱动\n\n拥有商业心态：时刻将自己的软件开发事业当作一桩生意来对待，不要被愚弄了。当你为了谋生一头扎进代码世界时，其实你和中世纪小镇开铁匠铺的铁匠没有什么差别。不要让特定的岗位或者角色固化了你和你的整个职业生涯。转变心态，从卖身契的仆人转变为拥有自己生意的商人，从仰人鼻息的弱势地位转换成自我治理和自我引导的主动地位。\n\n要做到：\n- 专注于你正在提供怎样的服务，以及如何营销这项服务；\n- 想方设法提升你的服务；\n- 思考你可以专注为哪一特定类型的客户或行业提供特定的服务；\n- 集中精力成为专家，专门为某一特定类型的客户提供专业的整体服务；（只有真正专注于一类客户，才能找到非常好的工作）\n再者，如何更好地宣传你的服务，更好地找到你的客户。\n\n#### 沟通能力\n建议阅读《人性的弱点》--Dale Camegie\n\n每个人都希望自己重要，永远不要批评，学会换位思考，思考他人而言什么才最重要。将注意力转移到他们身上，用他们的角度思考问题，什么让他们索然无味，什么让他们聚精会神。你的建议出发点理由可能是“让软件更稳定”或者“让软件按时交付”。\n\n当你学会了如何以令人愉悦的方式与他人互动和交往时，自己的生活也越来越愉快，通过习得这些技能，积累了让自己获益终生的财富，这样的价值无法用金钱衡量。\n\n还要学会逃离“毒瘤”，争吵时试着果断站在对手一边，结果可能会大吃一惊。\n\n#### 关于面试\n高级的入职流程：\n从期待加入的公司里找到联系人->与联系人建立紧密关系->获得个人推荐->面试\n\n正式面试：自信的展示自己的能力，展示工作需要做的内容\n\n从雇主的角度，招聘员工是一项投资，需要花费时间和金钱，当然希望看到良好的投资回报率。\n明确知道自己要做什么以及怎样去做，需要集中精力证明自己是无需督促也能发自做好事情的员工。\n确保自己技术能力，一直阅读技术书籍和博客，花时间提升自己的技能。\n为了获得面试经验，也要去面试，多多练习。\n\n采取行动：\n- 即使无需努力找工作，也要整理一份清单，列出想去的公司以及你认识的这些公司的人。\n- 如果公司一个人都不认识，那么制定计划至少去认识其中的一位员工并与之建立联系。\n- 在所在领域找出至少一个本地用户组，参与聚会，把自己介绍给尽可能多的人。\n\n关于职业的选择：雇员、独立咨询师（外包服务）、创业者，从雇员稳定开始，结识各类型的朋友并向他们了解如何走上以及走好他们的路。\n\n关于求职：缩小工作机会池，提高被录取的机会；如何选择专业：\n- 现在或以前工作的公司里，有哪些主要痛点？你能成为一名专门解决这些痛点的专家吗？\n- 有没有一种特定的工作无人能做，或者缺乏经验丰富的人？成为这个领域的专家，你会获得大量业务。\n- 在各种会议上和用户组中哪些话题最常出现？\n- 哪类问题你回复得最多，无论是针对同事还是Stack Overflow这样的网站上？\n尽可能地具体，使得在细分市场上更抢手。\n\n采取行动：\n- 列出想到所有软件开发的专业领域，从广义范畴逐一细分，看看你能细化到多具体\n- 当前的专业领域是什么？如果没有，希望选择专攻哪个领域\n- 主流的招聘网站看看自己的专业领域市场行情如何，确定专业化道路让自己受益还是限制了自己的选择\n\n关于公司\n| 公司规模 | 优点 | 缺点 |\n| 小 | 承担多种责任，工作影响力大 | 没法安静写代码，稳定性差 |\n| 中 | 稳定，加班少 | 变化慢，难涉及前沿技术 |\n| 大 | 完备的流程和规范，培训以及大型有影响力的项目 | 官僚主义，只负责代码库的小部分，难受关注 |\n\n#### 晋升之路\n在更多金钱还是更多责任的选择上，长远看，正确选择几乎是更多责任。\n\n如何让自己承担更多责任：\n- 不受重视的项目，你能负责它吗\n- 你能帮助团队里的新人快速成长吗\n- 你能负责文档制作流程，并保证及时更新文档吗\n- 哪项工作没有人愿意做，你愿意承担并将其简化或者自动化吗\n\n如何让自己引人注目:\n- 每天记录自己的活动日志-把日志以周报的形式发送给经理\n- 提供演讲或培训-选择一个对团队有用的话题\n- 发表意见-只要在会议上就这么做，或者只要你能得到的机会就这么做\n- 保证“曝光度”-定期与老板会面，确保你经常被注意到\n\n#### 如何成为专业人士\n`The War of Art: 成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。`\n\n认真规划自己的：已经做了什么、计划做什么、有哪些障碍\n\n培养正确的习惯，推荐阅读《习惯的力量》\n\n#### 关于赢得自由：为自己工作\n辞掉之前需要一个切实可行的计划，强烈推荐用业余时间启动想创建的业务，等从该业务中产生足以维持生计的收入时，你再转为全职。迫于现实现金流的问题，制订一个计划：什么时候就得认怂做回雇员。以后总可以东山再起，只要没有巨额信用卡债务，没有房屋抵押，没有从亲朋好友借钱而影响到自己的未来。\n\n为自己工作的意义：1.会比为别人工作时更努力 2.你会更热爱在做的事情，但不要指望持续很久，时间的流逝会使热情变得捉摸不定甚至消逝殆尽 3.突如的工作量使得不止工作8小时\n推荐书目《So Good They Can't Ignore You》\n\n\n如何行动\n1.减每月开支并累积资金:确保生存\n2.保障常规工作之余每周投入15小时做自己的事情，并坚持执行半年以上，确保收入\n3.提前计算好确切日期，早在一年前做好准备\n\n\n#### 关于创业\n了解孵化器或者加速器，注入小额资金换取公司小量股份，通常只持续数月并快速成长。\n采取行动：\n- 研究以下一两家心仪的创业公司历史，注意它们是如何开始以及获得融资的\n- 创立时是单创始人还是多创始人\n- 创始人还成功创立过其他公司吗\n- 什么时候开始获得融资的，获得了多少\n- 这些公司启动时是否加入加速器计划\n\n#### 关于远程办公\n接受新的工作模式以及迎接新挑战\n- 时间管理上：建立缜密规律的时间管理，提前计划安排，迎接变化\n- 自我激励上：建议阅读《驱动力》-Daniel Pink,用习惯驱动自己，排除干扰\n- 孤独感：周而复始孤独一个人肯定会产生负面影响，走出去，寻找社交生活：参与本地的软件开发者小组聚会，到咖啡馆或者书店工作，规律性到健身房或者运动\n开始关注允许远程工作的公司，或者完全分布式工作的团队\n\n#### 关于成功\n“假装自己能成功”，进行自我心理暗示：\n- 你仿佛已经具备了成功完成任务的技能和天分\n- 你仿佛已经成为自己想成为的那类人\n- 仿佛战斗已经结束，而你大获全胜，因为你深知如果自己坚持不懈，胜利就在眼前\n- 你仿佛已经对即将踏上的未知道路驾轻就熟\n\n这是有意识地让自己身处逆境，迫使自己学会拼搏。正是在生活中有这样的心态，带领自己勇敢走向未知领域，坚信挑战与机会并存。如果想学会“假装自己能成功”，你就必须拥有破釜沉舟的勇气。\n\n采取行动：\n- 诚实地评估一下自己。面对困境，你的心态如何？当遭遇新问题或者不熟悉的问题时，你会怎样做？回想以下，上一次面对困难或者不熟悉的形势时，你是怎么做的？\n- 你该怎样树立一种自信而不自负的心态？自信与自负之间的区别是什么？为了强化“假装自己能成功”的能力，你现在应该做什么？\n- 小练习：有目的地将自己置于困境，演练以下自己既定的应对策略。\n- Fake it till you make it\n\n#### 关于技术\n很多情况下，解决问题并不只有一个好的或者是最好的方法。同理，最好的编程语言、框架、操作系统甚至是文本编辑器都不会只有一种，你可找到最适合自己的技术和编程语言以及工具。\n\n采取行动：\n- 列出你钟爱的所有技术，或者你觉得更胜一筹的技术\n- 针对表的每一项，想想它为什么吸引你，你做了哪些比较确定它确实“更胜一筹”？你真的使用过它们的竞争对手吗？\n- 挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公讨论为什么他们喜欢，更进一步，你试着去使用\n\n\n### 自我营销\n\n营销追求“实现价值在先，要求回报在后”，你的营销越好，你的才华才能表现得越发淋漓尽致，自我营销的正确方式是为他人提供价值。\n\n自我营销无非就是学习如何控制好要传达的信息，塑造好自己的形象，扩展信息传达的人群。当开始营销自己的时候，你就是在积极地管理自己的职业生涯，有目的地选择好如何塑造自己，以及将塑造好的自己主动推送给那些对你感兴趣的人。\n\n采取行动：\n- 如果你还没有博客，开通一个吧。想想看，你会专注在哪些主题上？\n- 给你的新博客至少想出20篇文章\n- 现在做一个时间表，列出开通博客的具体时间以及内容编排\n\n#### 打造引人注目的品牌\n品牌的四要素：要传递的信息、品牌一致性、品牌的视觉符号、品牌的曝光率\n\n信息是目的性，传达承载的情感诉求;一致性、视觉符号以及曝光容易增强影响力；\n\n步骤：\n- 明确传达的品牌信息\n- 挑选细分市场\n- 创建品牌口号\n- 创建电梯内销售概要：电梯时间介绍完自我\n- 创建视觉符号\n\n#### 博客的重要性\n一方面面试评估技术技能非常困难，博客包含丰富的相关信息，代码示例以及深入分析；另一方面流量足够大可以用于推销自己产品的平台；带来一定的业界声望，提高你的沟通能力以及组织自己的思想转化成能力。提高内容的质量，尽量尝试编写高质量的博客文章。\n\n提高访问量：尝试建设性的评论，并附上个人链接。增加方便分享的功能。\n\n### 为他人增加价值\n`不要努力成为一个成功的人，而要努力成为一个有价值的人   --阿尔伯特.爱因斯坦`\n\n#### 给人们想要的东西\n通过现象看本质，找到方法来提供自己的价值。唯一的标准是通过你的方法，可以有效解决真实的问题。\n\n采取行动\n- 什么样的内容会让你觉得最有价值？有没有哪个特别的博客会让你每周都去阅读，或者哪个博客的内容如此有价值让你欲罢不能，以至于一点都不想落下\n- 你可以提供给自己的受众或者你的细分市场最大价值是什么？你认为什么样的内容对于你的受众群体而言最有价值的？\n- 善于运用社交媒体：如何界定价值：你认为有用或有趣的。\n\n通过社交媒体分享的内容\n- 博客文章：转帖一些博客文章或者自己的博客\n- 新闻报道：转载一些有趣的文章，尽量与自己的细分领域有关，或者与软件开发相关\n- 励志名言：名人名言，特别是鼓舞人心、非常流行的名言警句\n- 技巧、小窍门：任何你所了解的特殊技巧或者知识，别人会很欣赏\n- 幽默故事：发一点幽默故事挺不错的，但是一定要确保好笑，另外千万别冒犯别人\n- 吸引人的问题：这是一个很棒的吸引你的听众并和他们互动的方法\n- 自己的一些推广方式活动：别太多，并且跟其他内容混合在一起\n正如产品和服务90%免费一样，分享的内容也要90%有价值的\n\n#### 保持活跃度\n社交媒体一大挑战需保持活跃度，如若没有持之以恒，很容易丢掉大量粉丝。选择一到两个心仪的平台，不同社交具有不同的功能划分。\n\n\n\n\n\n\n\n\n","slug":"reading/软技能","published":1,"updated":"2022-02-25T06:31:50.426Z","_id":"cl00tgavf001n28zd4fak5ktz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。</p>\n<h3 id=\"职业篇\"><a href=\"#职业篇\" class=\"headerlink\" title=\"职业篇\"></a>职业篇</h3><p><code>你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然丧失。职业发展的驱动力一定是来自个体本身。记住：工作属于公司的，而职业生涯却属于你自己的。 -- 厄尔.南丁格尔</code></p>\n<h4 id=\"自我驱动\"><a href=\"#自我驱动\" class=\"headerlink\" title=\"自我驱动\"></a>自我驱动</h4><p>拥有商业心态：时刻将自己的软件开发事业当作一桩生意来对待，不要被愚弄了。当你为了谋生一头扎进代码世界时，其实你和中世纪小镇开铁匠铺的铁匠没有什么差别。不要让特定的岗位或者角色固化了你和你的整个职业生涯。转变心态，从卖身契的仆人转变为拥有自己生意的商人，从仰人鼻息的弱势地位转换成自我治理和自我引导的主动地位。</p>\n<p>要做到：</p>\n<ul>\n<li>专注于你正在提供怎样的服务，以及如何营销这项服务；</li>\n<li>想方设法提升你的服务；</li>\n<li>思考你可以专注为哪一特定类型的客户或行业提供特定的服务；</li>\n<li>集中精力成为专家，专门为某一特定类型的客户提供专业的整体服务；（只有真正专注于一类客户，才能找到非常好的工作）<br>再者，如何更好地宣传你的服务，更好地找到你的客户。</li>\n</ul>\n<h4 id=\"沟通能力\"><a href=\"#沟通能力\" class=\"headerlink\" title=\"沟通能力\"></a>沟通能力</h4><p>建议阅读《人性的弱点》–Dale Camegie</p>\n<p>每个人都希望自己重要，永远不要批评，学会换位思考，思考他人而言什么才最重要。将注意力转移到他们身上，用他们的角度思考问题，什么让他们索然无味，什么让他们聚精会神。你的建议出发点理由可能是“让软件更稳定”或者“让软件按时交付”。</p>\n<p>当你学会了如何以令人愉悦的方式与他人互动和交往时，自己的生活也越来越愉快，通过习得这些技能，积累了让自己获益终生的财富，这样的价值无法用金钱衡量。</p>\n<p>还要学会逃离“毒瘤”，争吵时试着果断站在对手一边，结果可能会大吃一惊。</p>\n<h4 id=\"关于面试\"><a href=\"#关于面试\" class=\"headerlink\" title=\"关于面试\"></a>关于面试</h4><p>高级的入职流程：<br>从期待加入的公司里找到联系人-&gt;与联系人建立紧密关系-&gt;获得个人推荐-&gt;面试</p>\n<p>正式面试：自信的展示自己的能力，展示工作需要做的内容</p>\n<p>从雇主的角度，招聘员工是一项投资，需要花费时间和金钱，当然希望看到良好的投资回报率。<br>明确知道自己要做什么以及怎样去做，需要集中精力证明自己是无需督促也能发自做好事情的员工。<br>确保自己技术能力，一直阅读技术书籍和博客，花时间提升自己的技能。<br>为了获得面试经验，也要去面试，多多练习。</p>\n<p>采取行动：</p>\n<ul>\n<li>即使无需努力找工作，也要整理一份清单，列出想去的公司以及你认识的这些公司的人。</li>\n<li>如果公司一个人都不认识，那么制定计划至少去认识其中的一位员工并与之建立联系。</li>\n<li>在所在领域找出至少一个本地用户组，参与聚会，把自己介绍给尽可能多的人。</li>\n</ul>\n<p>关于职业的选择：雇员、独立咨询师（外包服务）、创业者，从雇员稳定开始，结识各类型的朋友并向他们了解如何走上以及走好他们的路。</p>\n<p>关于求职：缩小工作机会池，提高被录取的机会；如何选择专业：</p>\n<ul>\n<li>现在或以前工作的公司里，有哪些主要痛点？你能成为一名专门解决这些痛点的专家吗？</li>\n<li>有没有一种特定的工作无人能做，或者缺乏经验丰富的人？成为这个领域的专家，你会获得大量业务。</li>\n<li>在各种会议上和用户组中哪些话题最常出现？</li>\n<li>哪类问题你回复得最多，无论是针对同事还是Stack Overflow这样的网站上？<br>尽可能地具体，使得在细分市场上更抢手。</li>\n</ul>\n<p>采取行动：</p>\n<ul>\n<li>列出想到所有软件开发的专业领域，从广义范畴逐一细分，看看你能细化到多具体</li>\n<li>当前的专业领域是什么？如果没有，希望选择专攻哪个领域</li>\n<li>主流的招聘网站看看自己的专业领域市场行情如何，确定专业化道路让自己受益还是限制了自己的选择</li>\n</ul>\n<p>关于公司<br>| 公司规模 | 优点 | 缺点 |<br>| 小 | 承担多种责任，工作影响力大 | 没法安静写代码，稳定性差 |<br>| 中 | 稳定，加班少 | 变化慢，难涉及前沿技术 |<br>| 大 | 完备的流程和规范，培训以及大型有影响力的项目 | 官僚主义，只负责代码库的小部分，难受关注 |</p>\n<h4 id=\"晋升之路\"><a href=\"#晋升之路\" class=\"headerlink\" title=\"晋升之路\"></a>晋升之路</h4><p>在更多金钱还是更多责任的选择上，长远看，正确选择几乎是更多责任。</p>\n<p>如何让自己承担更多责任：</p>\n<ul>\n<li>不受重视的项目，你能负责它吗</li>\n<li>你能帮助团队里的新人快速成长吗</li>\n<li>你能负责文档制作流程，并保证及时更新文档吗</li>\n<li>哪项工作没有人愿意做，你愿意承担并将其简化或者自动化吗</li>\n</ul>\n<p>如何让自己引人注目:</p>\n<ul>\n<li>每天记录自己的活动日志-把日志以周报的形式发送给经理</li>\n<li>提供演讲或培训-选择一个对团队有用的话题</li>\n<li>发表意见-只要在会议上就这么做，或者只要你能得到的机会就这么做</li>\n<li>保证“曝光度”-定期与老板会面，确保你经常被注意到</li>\n</ul>\n<h4 id=\"如何成为专业人士\"><a href=\"#如何成为专业人士\" class=\"headerlink\" title=\"如何成为专业人士\"></a>如何成为专业人士</h4><p><code>The War of Art: 成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</code></p>\n<p>认真规划自己的：已经做了什么、计划做什么、有哪些障碍</p>\n<p>培养正确的习惯，推荐阅读《习惯的力量》</p>\n<h4 id=\"关于赢得自由：为自己工作\"><a href=\"#关于赢得自由：为自己工作\" class=\"headerlink\" title=\"关于赢得自由：为自己工作\"></a>关于赢得自由：为自己工作</h4><p>辞掉之前需要一个切实可行的计划，强烈推荐用业余时间启动想创建的业务，等从该业务中产生足以维持生计的收入时，你再转为全职。迫于现实现金流的问题，制订一个计划：什么时候就得认怂做回雇员。以后总可以东山再起，只要没有巨额信用卡债务，没有房屋抵押，没有从亲朋好友借钱而影响到自己的未来。</p>\n<p>为自己工作的意义：1.会比为别人工作时更努力 2.你会更热爱在做的事情，但不要指望持续很久，时间的流逝会使热情变得捉摸不定甚至消逝殆尽 3.突如的工作量使得不止工作8小时<br>推荐书目《So Good They Can’t Ignore You》</p>\n<p>如何行动<br>1.减每月开支并累积资金:确保生存<br>2.保障常规工作之余每周投入15小时做自己的事情，并坚持执行半年以上，确保收入<br>3.提前计算好确切日期，早在一年前做好准备</p>\n<h4 id=\"关于创业\"><a href=\"#关于创业\" class=\"headerlink\" title=\"关于创业\"></a>关于创业</h4><p>了解孵化器或者加速器，注入小额资金换取公司小量股份，通常只持续数月并快速成长。<br>采取行动：</p>\n<ul>\n<li>研究以下一两家心仪的创业公司历史，注意它们是如何开始以及获得融资的</li>\n<li>创立时是单创始人还是多创始人</li>\n<li>创始人还成功创立过其他公司吗</li>\n<li>什么时候开始获得融资的，获得了多少</li>\n<li>这些公司启动时是否加入加速器计划</li>\n</ul>\n<h4 id=\"关于远程办公\"><a href=\"#关于远程办公\" class=\"headerlink\" title=\"关于远程办公\"></a>关于远程办公</h4><p>接受新的工作模式以及迎接新挑战</p>\n<ul>\n<li>时间管理上：建立缜密规律的时间管理，提前计划安排，迎接变化</li>\n<li>自我激励上：建议阅读《驱动力》-Daniel Pink,用习惯驱动自己，排除干扰</li>\n<li>孤独感：周而复始孤独一个人肯定会产生负面影响，走出去，寻找社交生活：参与本地的软件开发者小组聚会，到咖啡馆或者书店工作，规律性到健身房或者运动<br>开始关注允许远程工作的公司，或者完全分布式工作的团队</li>\n</ul>\n<h4 id=\"关于成功\"><a href=\"#关于成功\" class=\"headerlink\" title=\"关于成功\"></a>关于成功</h4><p>“假装自己能成功”，进行自我心理暗示：</p>\n<ul>\n<li>你仿佛已经具备了成功完成任务的技能和天分</li>\n<li>你仿佛已经成为自己想成为的那类人</li>\n<li>仿佛战斗已经结束，而你大获全胜，因为你深知如果自己坚持不懈，胜利就在眼前</li>\n<li>你仿佛已经对即将踏上的未知道路驾轻就熟</li>\n</ul>\n<p>这是有意识地让自己身处逆境，迫使自己学会拼搏。正是在生活中有这样的心态，带领自己勇敢走向未知领域，坚信挑战与机会并存。如果想学会“假装自己能成功”，你就必须拥有破釜沉舟的勇气。</p>\n<p>采取行动：</p>\n<ul>\n<li>诚实地评估一下自己。面对困境，你的心态如何？当遭遇新问题或者不熟悉的问题时，你会怎样做？回想以下，上一次面对困难或者不熟悉的形势时，你是怎么做的？</li>\n<li>你该怎样树立一种自信而不自负的心态？自信与自负之间的区别是什么？为了强化“假装自己能成功”的能力，你现在应该做什么？</li>\n<li>小练习：有目的地将自己置于困境，演练以下自己既定的应对策略。</li>\n<li>Fake it till you make it</li>\n</ul>\n<h4 id=\"关于技术\"><a href=\"#关于技术\" class=\"headerlink\" title=\"关于技术\"></a>关于技术</h4><p>很多情况下，解决问题并不只有一个好的或者是最好的方法。同理，最好的编程语言、框架、操作系统甚至是文本编辑器都不会只有一种，你可找到最适合自己的技术和编程语言以及工具。</p>\n<p>采取行动：</p>\n<ul>\n<li>列出你钟爱的所有技术，或者你觉得更胜一筹的技术</li>\n<li>针对表的每一项，想想它为什么吸引你，你做了哪些比较确定它确实“更胜一筹”？你真的使用过它们的竞争对手吗？</li>\n<li>挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公讨论为什么他们喜欢，更进一步，你试着去使用</li>\n</ul>\n<h3 id=\"自我营销\"><a href=\"#自我营销\" class=\"headerlink\" title=\"自我营销\"></a>自我营销</h3><p>营销追求“实现价值在先，要求回报在后”，你的营销越好，你的才华才能表现得越发淋漓尽致，自我营销的正确方式是为他人提供价值。</p>\n<p>自我营销无非就是学习如何控制好要传达的信息，塑造好自己的形象，扩展信息传达的人群。当开始营销自己的时候，你就是在积极地管理自己的职业生涯，有目的地选择好如何塑造自己，以及将塑造好的自己主动推送给那些对你感兴趣的人。</p>\n<p>采取行动：</p>\n<ul>\n<li>如果你还没有博客，开通一个吧。想想看，你会专注在哪些主题上？</li>\n<li>给你的新博客至少想出20篇文章</li>\n<li>现在做一个时间表，列出开通博客的具体时间以及内容编排</li>\n</ul>\n<h4 id=\"打造引人注目的品牌\"><a href=\"#打造引人注目的品牌\" class=\"headerlink\" title=\"打造引人注目的品牌\"></a>打造引人注目的品牌</h4><p>品牌的四要素：要传递的信息、品牌一致性、品牌的视觉符号、品牌的曝光率</p>\n<p>信息是目的性，传达承载的情感诉求;一致性、视觉符号以及曝光容易增强影响力；</p>\n<p>步骤：</p>\n<ul>\n<li>明确传达的品牌信息</li>\n<li>挑选细分市场</li>\n<li>创建品牌口号</li>\n<li>创建电梯内销售概要：电梯时间介绍完自我</li>\n<li>创建视觉符号</li>\n</ul>\n<h4 id=\"博客的重要性\"><a href=\"#博客的重要性\" class=\"headerlink\" title=\"博客的重要性\"></a>博客的重要性</h4><p>一方面面试评估技术技能非常困难，博客包含丰富的相关信息，代码示例以及深入分析；另一方面流量足够大可以用于推销自己产品的平台；带来一定的业界声望，提高你的沟通能力以及组织自己的思想转化成能力。提高内容的质量，尽量尝试编写高质量的博客文章。</p>\n<p>提高访问量：尝试建设性的评论，并附上个人链接。增加方便分享的功能。</p>\n<h3 id=\"为他人增加价值\"><a href=\"#为他人增加价值\" class=\"headerlink\" title=\"为他人增加价值\"></a>为他人增加价值</h3><p><code>不要努力成为一个成功的人，而要努力成为一个有价值的人   --阿尔伯特.爱因斯坦</code></p>\n<h4 id=\"给人们想要的东西\"><a href=\"#给人们想要的东西\" class=\"headerlink\" title=\"给人们想要的东西\"></a>给人们想要的东西</h4><p>通过现象看本质，找到方法来提供自己的价值。唯一的标准是通过你的方法，可以有效解决真实的问题。</p>\n<p>采取行动</p>\n<ul>\n<li>什么样的内容会让你觉得最有价值？有没有哪个特别的博客会让你每周都去阅读，或者哪个博客的内容如此有价值让你欲罢不能，以至于一点都不想落下</li>\n<li>你可以提供给自己的受众或者你的细分市场最大价值是什么？你认为什么样的内容对于你的受众群体而言最有价值的？</li>\n<li>善于运用社交媒体：如何界定价值：你认为有用或有趣的。</li>\n</ul>\n<p>通过社交媒体分享的内容</p>\n<ul>\n<li>博客文章：转帖一些博客文章或者自己的博客</li>\n<li>新闻报道：转载一些有趣的文章，尽量与自己的细分领域有关，或者与软件开发相关</li>\n<li>励志名言：名人名言，特别是鼓舞人心、非常流行的名言警句</li>\n<li>技巧、小窍门：任何你所了解的特殊技巧或者知识，别人会很欣赏</li>\n<li>幽默故事：发一点幽默故事挺不错的，但是一定要确保好笑，另外千万别冒犯别人</li>\n<li>吸引人的问题：这是一个很棒的吸引你的听众并和他们互动的方法</li>\n<li>自己的一些推广方式活动：别太多，并且跟其他内容混合在一起<br>正如产品和服务90%免费一样，分享的内容也要90%有价值的</li>\n</ul>\n<h4 id=\"保持活跃度\"><a href=\"#保持活跃度\" class=\"headerlink\" title=\"保持活跃度\"></a>保持活跃度</h4><p>社交媒体一大挑战需保持活跃度，如若没有持之以恒，很容易丢掉大量粉丝。选择一到两个心仪的平台，不同社交具有不同的功能划分。</p>\n","site":{"data":{}},"length":4283,"excerpt":"","more":"<p>主要内容部分：职业生涯、自我营销、自我学习、生产力、理财、健康、精神。</p>\n<h3 id=\"职业篇\"><a href=\"#职业篇\" class=\"headerlink\" title=\"职业篇\"></a>职业篇</h3><p><code>你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然丧失。职业发展的驱动力一定是来自个体本身。记住：工作属于公司的，而职业生涯却属于你自己的。 -- 厄尔.南丁格尔</code></p>\n<h4 id=\"自我驱动\"><a href=\"#自我驱动\" class=\"headerlink\" title=\"自我驱动\"></a>自我驱动</h4><p>拥有商业心态：时刻将自己的软件开发事业当作一桩生意来对待，不要被愚弄了。当你为了谋生一头扎进代码世界时，其实你和中世纪小镇开铁匠铺的铁匠没有什么差别。不要让特定的岗位或者角色固化了你和你的整个职业生涯。转变心态，从卖身契的仆人转变为拥有自己生意的商人，从仰人鼻息的弱势地位转换成自我治理和自我引导的主动地位。</p>\n<p>要做到：</p>\n<ul>\n<li>专注于你正在提供怎样的服务，以及如何营销这项服务；</li>\n<li>想方设法提升你的服务；</li>\n<li>思考你可以专注为哪一特定类型的客户或行业提供特定的服务；</li>\n<li>集中精力成为专家，专门为某一特定类型的客户提供专业的整体服务；（只有真正专注于一类客户，才能找到非常好的工作）<br>再者，如何更好地宣传你的服务，更好地找到你的客户。</li>\n</ul>\n<h4 id=\"沟通能力\"><a href=\"#沟通能力\" class=\"headerlink\" title=\"沟通能力\"></a>沟通能力</h4><p>建议阅读《人性的弱点》–Dale Camegie</p>\n<p>每个人都希望自己重要，永远不要批评，学会换位思考，思考他人而言什么才最重要。将注意力转移到他们身上，用他们的角度思考问题，什么让他们索然无味，什么让他们聚精会神。你的建议出发点理由可能是“让软件更稳定”或者“让软件按时交付”。</p>\n<p>当你学会了如何以令人愉悦的方式与他人互动和交往时，自己的生活也越来越愉快，通过习得这些技能，积累了让自己获益终生的财富，这样的价值无法用金钱衡量。</p>\n<p>还要学会逃离“毒瘤”，争吵时试着果断站在对手一边，结果可能会大吃一惊。</p>\n<h4 id=\"关于面试\"><a href=\"#关于面试\" class=\"headerlink\" title=\"关于面试\"></a>关于面试</h4><p>高级的入职流程：<br>从期待加入的公司里找到联系人-&gt;与联系人建立紧密关系-&gt;获得个人推荐-&gt;面试</p>\n<p>正式面试：自信的展示自己的能力，展示工作需要做的内容</p>\n<p>从雇主的角度，招聘员工是一项投资，需要花费时间和金钱，当然希望看到良好的投资回报率。<br>明确知道自己要做什么以及怎样去做，需要集中精力证明自己是无需督促也能发自做好事情的员工。<br>确保自己技术能力，一直阅读技术书籍和博客，花时间提升自己的技能。<br>为了获得面试经验，也要去面试，多多练习。</p>\n<p>采取行动：</p>\n<ul>\n<li>即使无需努力找工作，也要整理一份清单，列出想去的公司以及你认识的这些公司的人。</li>\n<li>如果公司一个人都不认识，那么制定计划至少去认识其中的一位员工并与之建立联系。</li>\n<li>在所在领域找出至少一个本地用户组，参与聚会，把自己介绍给尽可能多的人。</li>\n</ul>\n<p>关于职业的选择：雇员、独立咨询师（外包服务）、创业者，从雇员稳定开始，结识各类型的朋友并向他们了解如何走上以及走好他们的路。</p>\n<p>关于求职：缩小工作机会池，提高被录取的机会；如何选择专业：</p>\n<ul>\n<li>现在或以前工作的公司里，有哪些主要痛点？你能成为一名专门解决这些痛点的专家吗？</li>\n<li>有没有一种特定的工作无人能做，或者缺乏经验丰富的人？成为这个领域的专家，你会获得大量业务。</li>\n<li>在各种会议上和用户组中哪些话题最常出现？</li>\n<li>哪类问题你回复得最多，无论是针对同事还是Stack Overflow这样的网站上？<br>尽可能地具体，使得在细分市场上更抢手。</li>\n</ul>\n<p>采取行动：</p>\n<ul>\n<li>列出想到所有软件开发的专业领域，从广义范畴逐一细分，看看你能细化到多具体</li>\n<li>当前的专业领域是什么？如果没有，希望选择专攻哪个领域</li>\n<li>主流的招聘网站看看自己的专业领域市场行情如何，确定专业化道路让自己受益还是限制了自己的选择</li>\n</ul>\n<p>关于公司<br>| 公司规模 | 优点 | 缺点 |<br>| 小 | 承担多种责任，工作影响力大 | 没法安静写代码，稳定性差 |<br>| 中 | 稳定，加班少 | 变化慢，难涉及前沿技术 |<br>| 大 | 完备的流程和规范，培训以及大型有影响力的项目 | 官僚主义，只负责代码库的小部分，难受关注 |</p>\n<h4 id=\"晋升之路\"><a href=\"#晋升之路\" class=\"headerlink\" title=\"晋升之路\"></a>晋升之路</h4><p>在更多金钱还是更多责任的选择上，长远看，正确选择几乎是更多责任。</p>\n<p>如何让自己承担更多责任：</p>\n<ul>\n<li>不受重视的项目，你能负责它吗</li>\n<li>你能帮助团队里的新人快速成长吗</li>\n<li>你能负责文档制作流程，并保证及时更新文档吗</li>\n<li>哪项工作没有人愿意做，你愿意承担并将其简化或者自动化吗</li>\n</ul>\n<p>如何让自己引人注目:</p>\n<ul>\n<li>每天记录自己的活动日志-把日志以周报的形式发送给经理</li>\n<li>提供演讲或培训-选择一个对团队有用的话题</li>\n<li>发表意见-只要在会议上就这么做，或者只要你能得到的机会就这么做</li>\n<li>保证“曝光度”-定期与老板会面，确保你经常被注意到</li>\n</ul>\n<h4 id=\"如何成为专业人士\"><a href=\"#如何成为专业人士\" class=\"headerlink\" title=\"如何成为专业人士\"></a>如何成为专业人士</h4><p><code>The War of Art: 成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</code></p>\n<p>认真规划自己的：已经做了什么、计划做什么、有哪些障碍</p>\n<p>培养正确的习惯，推荐阅读《习惯的力量》</p>\n<h4 id=\"关于赢得自由：为自己工作\"><a href=\"#关于赢得自由：为自己工作\" class=\"headerlink\" title=\"关于赢得自由：为自己工作\"></a>关于赢得自由：为自己工作</h4><p>辞掉之前需要一个切实可行的计划，强烈推荐用业余时间启动想创建的业务，等从该业务中产生足以维持生计的收入时，你再转为全职。迫于现实现金流的问题，制订一个计划：什么时候就得认怂做回雇员。以后总可以东山再起，只要没有巨额信用卡债务，没有房屋抵押，没有从亲朋好友借钱而影响到自己的未来。</p>\n<p>为自己工作的意义：1.会比为别人工作时更努力 2.你会更热爱在做的事情，但不要指望持续很久，时间的流逝会使热情变得捉摸不定甚至消逝殆尽 3.突如的工作量使得不止工作8小时<br>推荐书目《So Good They Can’t Ignore You》</p>\n<p>如何行动<br>1.减每月开支并累积资金:确保生存<br>2.保障常规工作之余每周投入15小时做自己的事情，并坚持执行半年以上，确保收入<br>3.提前计算好确切日期，早在一年前做好准备</p>\n<h4 id=\"关于创业\"><a href=\"#关于创业\" class=\"headerlink\" title=\"关于创业\"></a>关于创业</h4><p>了解孵化器或者加速器，注入小额资金换取公司小量股份，通常只持续数月并快速成长。<br>采取行动：</p>\n<ul>\n<li>研究以下一两家心仪的创业公司历史，注意它们是如何开始以及获得融资的</li>\n<li>创立时是单创始人还是多创始人</li>\n<li>创始人还成功创立过其他公司吗</li>\n<li>什么时候开始获得融资的，获得了多少</li>\n<li>这些公司启动时是否加入加速器计划</li>\n</ul>\n<h4 id=\"关于远程办公\"><a href=\"#关于远程办公\" class=\"headerlink\" title=\"关于远程办公\"></a>关于远程办公</h4><p>接受新的工作模式以及迎接新挑战</p>\n<ul>\n<li>时间管理上：建立缜密规律的时间管理，提前计划安排，迎接变化</li>\n<li>自我激励上：建议阅读《驱动力》-Daniel Pink,用习惯驱动自己，排除干扰</li>\n<li>孤独感：周而复始孤独一个人肯定会产生负面影响，走出去，寻找社交生活：参与本地的软件开发者小组聚会，到咖啡馆或者书店工作，规律性到健身房或者运动<br>开始关注允许远程工作的公司，或者完全分布式工作的团队</li>\n</ul>\n<h4 id=\"关于成功\"><a href=\"#关于成功\" class=\"headerlink\" title=\"关于成功\"></a>关于成功</h4><p>“假装自己能成功”，进行自我心理暗示：</p>\n<ul>\n<li>你仿佛已经具备了成功完成任务的技能和天分</li>\n<li>你仿佛已经成为自己想成为的那类人</li>\n<li>仿佛战斗已经结束，而你大获全胜，因为你深知如果自己坚持不懈，胜利就在眼前</li>\n<li>你仿佛已经对即将踏上的未知道路驾轻就熟</li>\n</ul>\n<p>这是有意识地让自己身处逆境，迫使自己学会拼搏。正是在生活中有这样的心态，带领自己勇敢走向未知领域，坚信挑战与机会并存。如果想学会“假装自己能成功”，你就必须拥有破釜沉舟的勇气。</p>\n<p>采取行动：</p>\n<ul>\n<li>诚实地评估一下自己。面对困境，你的心态如何？当遭遇新问题或者不熟悉的问题时，你会怎样做？回想以下，上一次面对困难或者不熟悉的形势时，你是怎么做的？</li>\n<li>你该怎样树立一种自信而不自负的心态？自信与自负之间的区别是什么？为了强化“假装自己能成功”的能力，你现在应该做什么？</li>\n<li>小练习：有目的地将自己置于困境，演练以下自己既定的应对策略。</li>\n<li>Fake it till you make it</li>\n</ul>\n<h4 id=\"关于技术\"><a href=\"#关于技术\" class=\"headerlink\" title=\"关于技术\"></a>关于技术</h4><p>很多情况下，解决问题并不只有一个好的或者是最好的方法。同理，最好的编程语言、框架、操作系统甚至是文本编辑器都不会只有一种，你可找到最适合自己的技术和编程语言以及工具。</p>\n<p>采取行动：</p>\n<ul>\n<li>列出你钟爱的所有技术，或者你觉得更胜一筹的技术</li>\n<li>针对表的每一项，想想它为什么吸引你，你做了哪些比较确定它确实“更胜一筹”？你真的使用过它们的竞争对手吗？</li>\n<li>挑选一门你厌恶的技术，找几个喜欢它的人，开诚布公讨论为什么他们喜欢，更进一步，你试着去使用</li>\n</ul>\n<h3 id=\"自我营销\"><a href=\"#自我营销\" class=\"headerlink\" title=\"自我营销\"></a>自我营销</h3><p>营销追求“实现价值在先，要求回报在后”，你的营销越好，你的才华才能表现得越发淋漓尽致，自我营销的正确方式是为他人提供价值。</p>\n<p>自我营销无非就是学习如何控制好要传达的信息，塑造好自己的形象，扩展信息传达的人群。当开始营销自己的时候，你就是在积极地管理自己的职业生涯，有目的地选择好如何塑造自己，以及将塑造好的自己主动推送给那些对你感兴趣的人。</p>\n<p>采取行动：</p>\n<ul>\n<li>如果你还没有博客，开通一个吧。想想看，你会专注在哪些主题上？</li>\n<li>给你的新博客至少想出20篇文章</li>\n<li>现在做一个时间表，列出开通博客的具体时间以及内容编排</li>\n</ul>\n<h4 id=\"打造引人注目的品牌\"><a href=\"#打造引人注目的品牌\" class=\"headerlink\" title=\"打造引人注目的品牌\"></a>打造引人注目的品牌</h4><p>品牌的四要素：要传递的信息、品牌一致性、品牌的视觉符号、品牌的曝光率</p>\n<p>信息是目的性，传达承载的情感诉求;一致性、视觉符号以及曝光容易增强影响力；</p>\n<p>步骤：</p>\n<ul>\n<li>明确传达的品牌信息</li>\n<li>挑选细分市场</li>\n<li>创建品牌口号</li>\n<li>创建电梯内销售概要：电梯时间介绍完自我</li>\n<li>创建视觉符号</li>\n</ul>\n<h4 id=\"博客的重要性\"><a href=\"#博客的重要性\" class=\"headerlink\" title=\"博客的重要性\"></a>博客的重要性</h4><p>一方面面试评估技术技能非常困难，博客包含丰富的相关信息，代码示例以及深入分析；另一方面流量足够大可以用于推销自己产品的平台；带来一定的业界声望，提高你的沟通能力以及组织自己的思想转化成能力。提高内容的质量，尽量尝试编写高质量的博客文章。</p>\n<p>提高访问量：尝试建设性的评论，并附上个人链接。增加方便分享的功能。</p>\n<h3 id=\"为他人增加价值\"><a href=\"#为他人增加价值\" class=\"headerlink\" title=\"为他人增加价值\"></a>为他人增加价值</h3><p><code>不要努力成为一个成功的人，而要努力成为一个有价值的人   --阿尔伯特.爱因斯坦</code></p>\n<h4 id=\"给人们想要的东西\"><a href=\"#给人们想要的东西\" class=\"headerlink\" title=\"给人们想要的东西\"></a>给人们想要的东西</h4><p>通过现象看本质，找到方法来提供自己的价值。唯一的标准是通过你的方法，可以有效解决真实的问题。</p>\n<p>采取行动</p>\n<ul>\n<li>什么样的内容会让你觉得最有价值？有没有哪个特别的博客会让你每周都去阅读，或者哪个博客的内容如此有价值让你欲罢不能，以至于一点都不想落下</li>\n<li>你可以提供给自己的受众或者你的细分市场最大价值是什么？你认为什么样的内容对于你的受众群体而言最有价值的？</li>\n<li>善于运用社交媒体：如何界定价值：你认为有用或有趣的。</li>\n</ul>\n<p>通过社交媒体分享的内容</p>\n<ul>\n<li>博客文章：转帖一些博客文章或者自己的博客</li>\n<li>新闻报道：转载一些有趣的文章，尽量与自己的细分领域有关，或者与软件开发相关</li>\n<li>励志名言：名人名言，特别是鼓舞人心、非常流行的名言警句</li>\n<li>技巧、小窍门：任何你所了解的特殊技巧或者知识，别人会很欣赏</li>\n<li>幽默故事：发一点幽默故事挺不错的，但是一定要确保好笑，另外千万别冒犯别人</li>\n<li>吸引人的问题：这是一个很棒的吸引你的听众并和他们互动的方法</li>\n<li>自己的一些推广方式活动：别太多，并且跟其他内容混合在一起<br>正如产品和服务90%免费一样，分享的内容也要90%有价值的</li>\n</ul>\n<h4 id=\"保持活跃度\"><a href=\"#保持活跃度\" class=\"headerlink\" title=\"保持活跃度\"></a>保持活跃度</h4><p>社交媒体一大挑战需保持活跃度，如若没有持之以恒，很容易丢掉大量粉丝。选择一到两个心仪的平台，不同社交具有不同的功能划分。</p>\n"},{"title":"经典话术","date":"2021-12-21T06:49:08.000Z","_content":"\n`格林先生说`\n\n1.yes and 法则\n通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”\n\n正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。\ne.g. ...确实会...,不过有时候...\n\n2.即兴表达框架-PREP\nPoint->Reason->Example->Point\n\n3.SCQ-A \n提出问题，寻求帮助。Situation->Conflict->Question->Answer\n常用于工作汇报，包括问题背景，问题原因，主要问题，如何解决。\n\n4.FFC 赞美法则\nFeel->Fact->Compare\n（Feel）我觉得今天你搭配很有气质\n（Fact）因为腰线能突出身形\n(Compare) 这是我今年见到的最潮的连衣裙\n\n5.引导选择\n模板：是...还是.../ 是否.../ 要不要...,好处是这样\n提问封闭，只需选择，无需开放式思考\n\n6.万能表达：观察+感受+需求+请求\n（观察）珊珊，你最近每晚都是凌晨才睡觉\n（感受）我觉得有干扰\n（需求）而且我希望你能身体健康，这样白天才精神\n（请求）所以希望明天开始，能不能11点准时关灯\n\n7.汇报FFA法则\nFact->Feeling->Action\n最近工作如何，我感觉主要是跟不上进度，接下来一周我会如何做。\n\n\n`蛋蛋碎嘴子`\n\n1.工作汇报老手\n新项目砸了=进行了积极的试错，吸收了宝贵的经验\n数据不好看=有较大的增长空间\n啥也没干=稳定发展\n接下来依旧打算啥也不干=保持现有成绩，稳定成果\n数据稍微好看一点=取得了较大增长\n\n2.一个人一直墨迹跟你说话不好意思打断，可以尝试：\n“好的”，“那确实不错”，“的确是这样”，“嗯你说的对”\n\n3.接到不想做的任务可以说\n“领导，我仔细看了一下这个需求，我这里可能存在XXX方面的短板”\n“想要推进这个事情的话，我可能需要XXX方面的支持”\n暗含“我可说清楚了，办砸了可不赖我”\n\n4.当想刺探秘密时，先说结论，然后观察对方的反应\n“我们公司下个月要发奖金你”\n\n5.汇报模板：\n【日常在做什么】+【做这件事的目的】+【做这件事有什么困难】+【怎么做得更好】\n\n6.当别人布置杂活，不想做就死死的抠细节\n“你说的这件事大概什么时候需要？”\n“这个时间点具体到几点？”\n“我是微信给你还是邮箱给你？”\n“那我需要先出一个计划，你帮我看看安排合不合适？”\n如此一来，极大增加之间的沟通成本，让对方崩溃而不想给你安排了。\n\n`清闲的九夏`\n\n1.别人求你办事，如果想要资源置换，就说：“这事儿不太好办阿”\n\n2.拒绝借钱：“你知道的，我最近XX，也没钱。”\n\n3.汇报话术：”这边，我们做了A，B两种方案，各有优势，希望给点意见，看选哪个做比较佳“\n\n4.经常使用分点叙述\n我是这么认为的，第一，X；第二，X；第三，X。\n\n5.请求帮忙时，先提出自己的办法\n”经过了解，遇到一些问题，我的解决办法是XX，大家看看还有没有更好的办法?\"\n不论多平庸都要提一个。\n\n6.请求帮忙“不好意思，可以插一下队吗？因为我真的很急”\n\n7.聊天想聊下去：揪住对方的关键词+延伸过往彼此交流过的信息\n\n“今天又加班，很烦”  \n“怎么又加班，又是上次那个领导吗”\n\n\n“我爱豆塌房子了”  \n“哪个，上回说的那个吗，我去”\n\n\n8.不想聊下去\n“今天又加班”  \n“怎么又加班，这算啥事”\n\n“我爱豆塌房子了” \n“又他”\n\n9.领导说“辛苦了” \n你：“从中学到很多，很有收获。”\n\n10.领导的节日问候（也可不发，上班的时候再热情问候即可）：\n尊称+感谢+互动+祝福\n\n11.说服别人，改变一个人的想法\n认同立场，替换观点。\n\n自嘲： 是阿...而且...\n\n\n\n","source":"_posts/rizhi/经典话术.md","raw":"---\ntitle: 经典话术\ndate: 2021-12-21 14:49:08\ntags: 知乎\ncategories:\n- 日常\n---\n\n`格林先生说`\n\n1.yes and 法则\n通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”\n\n正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。\ne.g. ...确实会...,不过有时候...\n\n2.即兴表达框架-PREP\nPoint->Reason->Example->Point\n\n3.SCQ-A \n提出问题，寻求帮助。Situation->Conflict->Question->Answer\n常用于工作汇报，包括问题背景，问题原因，主要问题，如何解决。\n\n4.FFC 赞美法则\nFeel->Fact->Compare\n（Feel）我觉得今天你搭配很有气质\n（Fact）因为腰线能突出身形\n(Compare) 这是我今年见到的最潮的连衣裙\n\n5.引导选择\n模板：是...还是.../ 是否.../ 要不要...,好处是这样\n提问封闭，只需选择，无需开放式思考\n\n6.万能表达：观察+感受+需求+请求\n（观察）珊珊，你最近每晚都是凌晨才睡觉\n（感受）我觉得有干扰\n（需求）而且我希望你能身体健康，这样白天才精神\n（请求）所以希望明天开始，能不能11点准时关灯\n\n7.汇报FFA法则\nFact->Feeling->Action\n最近工作如何，我感觉主要是跟不上进度，接下来一周我会如何做。\n\n\n`蛋蛋碎嘴子`\n\n1.工作汇报老手\n新项目砸了=进行了积极的试错，吸收了宝贵的经验\n数据不好看=有较大的增长空间\n啥也没干=稳定发展\n接下来依旧打算啥也不干=保持现有成绩，稳定成果\n数据稍微好看一点=取得了较大增长\n\n2.一个人一直墨迹跟你说话不好意思打断，可以尝试：\n“好的”，“那确实不错”，“的确是这样”，“嗯你说的对”\n\n3.接到不想做的任务可以说\n“领导，我仔细看了一下这个需求，我这里可能存在XXX方面的短板”\n“想要推进这个事情的话，我可能需要XXX方面的支持”\n暗含“我可说清楚了，办砸了可不赖我”\n\n4.当想刺探秘密时，先说结论，然后观察对方的反应\n“我们公司下个月要发奖金你”\n\n5.汇报模板：\n【日常在做什么】+【做这件事的目的】+【做这件事有什么困难】+【怎么做得更好】\n\n6.当别人布置杂活，不想做就死死的抠细节\n“你说的这件事大概什么时候需要？”\n“这个时间点具体到几点？”\n“我是微信给你还是邮箱给你？”\n“那我需要先出一个计划，你帮我看看安排合不合适？”\n如此一来，极大增加之间的沟通成本，让对方崩溃而不想给你安排了。\n\n`清闲的九夏`\n\n1.别人求你办事，如果想要资源置换，就说：“这事儿不太好办阿”\n\n2.拒绝借钱：“你知道的，我最近XX，也没钱。”\n\n3.汇报话术：”这边，我们做了A，B两种方案，各有优势，希望给点意见，看选哪个做比较佳“\n\n4.经常使用分点叙述\n我是这么认为的，第一，X；第二，X；第三，X。\n\n5.请求帮忙时，先提出自己的办法\n”经过了解，遇到一些问题，我的解决办法是XX，大家看看还有没有更好的办法?\"\n不论多平庸都要提一个。\n\n6.请求帮忙“不好意思，可以插一下队吗？因为我真的很急”\n\n7.聊天想聊下去：揪住对方的关键词+延伸过往彼此交流过的信息\n\n“今天又加班，很烦”  \n“怎么又加班，又是上次那个领导吗”\n\n\n“我爱豆塌房子了”  \n“哪个，上回说的那个吗，我去”\n\n\n8.不想聊下去\n“今天又加班”  \n“怎么又加班，这算啥事”\n\n“我爱豆塌房子了” \n“又他”\n\n9.领导说“辛苦了” \n你：“从中学到很多，很有收获。”\n\n10.领导的节日问候（也可不发，上班的时候再热情问候即可）：\n尊称+感谢+互动+祝福\n\n11.说服别人，改变一个人的想法\n认同立场，替换观点。\n\n自嘲： 是阿...而且...\n\n\n\n","slug":"rizhi/经典话术","published":1,"updated":"2022-01-05T06:25:14.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavg001r28zd9n1071xt","content":"<p><code>格林先生说</code></p>\n<p>1.yes and 法则<br>通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”</p>\n<p>正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。<br>e.g. …确实会…,不过有时候…</p>\n<p>2.即兴表达框架-PREP<br>Point-&gt;Reason-&gt;Example-&gt;Point</p>\n<p>3.SCQ-A<br>提出问题，寻求帮助。Situation-&gt;Conflict-&gt;Question-&gt;Answer<br>常用于工作汇报，包括问题背景，问题原因，主要问题，如何解决。</p>\n<p>4.FFC 赞美法则<br>Feel-&gt;Fact-&gt;Compare<br>（Feel）我觉得今天你搭配很有气质<br>（Fact）因为腰线能突出身形<br>(Compare) 这是我今年见到的最潮的连衣裙</p>\n<p>5.引导选择<br>模板：是…还是…/ 是否…/ 要不要…,好处是这样<br>提问封闭，只需选择，无需开放式思考</p>\n<p>6.万能表达：观察+感受+需求+请求<br>（观察）珊珊，你最近每晚都是凌晨才睡觉<br>（感受）我觉得有干扰<br>（需求）而且我希望你能身体健康，这样白天才精神<br>（请求）所以希望明天开始，能不能11点准时关灯</p>\n<p>7.汇报FFA法则<br>Fact-&gt;Feeling-&gt;Action<br>最近工作如何，我感觉主要是跟不上进度，接下来一周我会如何做。</p>\n<p><code>蛋蛋碎嘴子</code></p>\n<p>1.工作汇报老手<br>新项目砸了=进行了积极的试错，吸收了宝贵的经验<br>数据不好看=有较大的增长空间<br>啥也没干=稳定发展<br>接下来依旧打算啥也不干=保持现有成绩，稳定成果<br>数据稍微好看一点=取得了较大增长</p>\n<p>2.一个人一直墨迹跟你说话不好意思打断，可以尝试：<br>“好的”，“那确实不错”，“的确是这样”，“嗯你说的对”</p>\n<p>3.接到不想做的任务可以说<br>“领导，我仔细看了一下这个需求，我这里可能存在XXX方面的短板”<br>“想要推进这个事情的话，我可能需要XXX方面的支持”<br>暗含“我可说清楚了，办砸了可不赖我”</p>\n<p>4.当想刺探秘密时，先说结论，然后观察对方的反应<br>“我们公司下个月要发奖金你”</p>\n<p>5.汇报模板：<br>【日常在做什么】+【做这件事的目的】+【做这件事有什么困难】+【怎么做得更好】</p>\n<p>6.当别人布置杂活，不想做就死死的抠细节<br>“你说的这件事大概什么时候需要？”<br>“这个时间点具体到几点？”<br>“我是微信给你还是邮箱给你？”<br>“那我需要先出一个计划，你帮我看看安排合不合适？”<br>如此一来，极大增加之间的沟通成本，让对方崩溃而不想给你安排了。</p>\n<p><code>清闲的九夏</code></p>\n<p>1.别人求你办事，如果想要资源置换，就说：“这事儿不太好办阿”</p>\n<p>2.拒绝借钱：“你知道的，我最近XX，也没钱。”</p>\n<p>3.汇报话术：”这边，我们做了A，B两种方案，各有优势，希望给点意见，看选哪个做比较佳“</p>\n<p>4.经常使用分点叙述<br>我是这么认为的，第一，X；第二，X；第三，X。</p>\n<p>5.请求帮忙时，先提出自己的办法<br>”经过了解，遇到一些问题，我的解决办法是XX，大家看看还有没有更好的办法?”<br>不论多平庸都要提一个。</p>\n<p>6.请求帮忙“不好意思，可以插一下队吗？因为我真的很急”</p>\n<p>7.聊天想聊下去：揪住对方的关键词+延伸过往彼此交流过的信息</p>\n<p>“今天又加班，很烦”<br>“怎么又加班，又是上次那个领导吗”</p>\n<p>“我爱豆塌房子了”<br>“哪个，上回说的那个吗，我去”</p>\n<p>8.不想聊下去<br>“今天又加班”<br>“怎么又加班，这算啥事”</p>\n<p>“我爱豆塌房子了”<br>“又他”</p>\n<p>9.领导说“辛苦了”<br>你：“从中学到很多，很有收获。”</p>\n<p>10.领导的节日问候（也可不发，上班的时候再热情问候即可）：<br>尊称+感谢+互动+祝福</p>\n<p>11.说服别人，改变一个人的想法<br>认同立场，替换观点。</p>\n<p>自嘲： 是阿…而且…</p>\n","site":{"data":{}},"length":1450,"excerpt":"","more":"<p><code>格林先生说</code></p>\n<p>1.yes and 法则<br>通常交流容易别人提一个观点，我们不认同会yes,but. 这样别人容易产生“那就这样吧，你说什么就是什么吧”</p>\n<p>正常回复应该尽量接纳对方一部分的内容，然后才一点点引出冲突。<br>e.g. …确实会…,不过有时候…</p>\n<p>2.即兴表达框架-PREP<br>Point-&gt;Reason-&gt;Example-&gt;Point</p>\n<p>3.SCQ-A<br>提出问题，寻求帮助。Situation-&gt;Conflict-&gt;Question-&gt;Answer<br>常用于工作汇报，包括问题背景，问题原因，主要问题，如何解决。</p>\n<p>4.FFC 赞美法则<br>Feel-&gt;Fact-&gt;Compare<br>（Feel）我觉得今天你搭配很有气质<br>（Fact）因为腰线能突出身形<br>(Compare) 这是我今年见到的最潮的连衣裙</p>\n<p>5.引导选择<br>模板：是…还是…/ 是否…/ 要不要…,好处是这样<br>提问封闭，只需选择，无需开放式思考</p>\n<p>6.万能表达：观察+感受+需求+请求<br>（观察）珊珊，你最近每晚都是凌晨才睡觉<br>（感受）我觉得有干扰<br>（需求）而且我希望你能身体健康，这样白天才精神<br>（请求）所以希望明天开始，能不能11点准时关灯</p>\n<p>7.汇报FFA法则<br>Fact-&gt;Feeling-&gt;Action<br>最近工作如何，我感觉主要是跟不上进度，接下来一周我会如何做。</p>\n<p><code>蛋蛋碎嘴子</code></p>\n<p>1.工作汇报老手<br>新项目砸了=进行了积极的试错，吸收了宝贵的经验<br>数据不好看=有较大的增长空间<br>啥也没干=稳定发展<br>接下来依旧打算啥也不干=保持现有成绩，稳定成果<br>数据稍微好看一点=取得了较大增长</p>\n<p>2.一个人一直墨迹跟你说话不好意思打断，可以尝试：<br>“好的”，“那确实不错”，“的确是这样”，“嗯你说的对”</p>\n<p>3.接到不想做的任务可以说<br>“领导，我仔细看了一下这个需求，我这里可能存在XXX方面的短板”<br>“想要推进这个事情的话，我可能需要XXX方面的支持”<br>暗含“我可说清楚了，办砸了可不赖我”</p>\n<p>4.当想刺探秘密时，先说结论，然后观察对方的反应<br>“我们公司下个月要发奖金你”</p>\n<p>5.汇报模板：<br>【日常在做什么】+【做这件事的目的】+【做这件事有什么困难】+【怎么做得更好】</p>\n<p>6.当别人布置杂活，不想做就死死的抠细节<br>“你说的这件事大概什么时候需要？”<br>“这个时间点具体到几点？”<br>“我是微信给你还是邮箱给你？”<br>“那我需要先出一个计划，你帮我看看安排合不合适？”<br>如此一来，极大增加之间的沟通成本，让对方崩溃而不想给你安排了。</p>\n<p><code>清闲的九夏</code></p>\n<p>1.别人求你办事，如果想要资源置换，就说：“这事儿不太好办阿”</p>\n<p>2.拒绝借钱：“你知道的，我最近XX，也没钱。”</p>\n<p>3.汇报话术：”这边，我们做了A，B两种方案，各有优势，希望给点意见，看选哪个做比较佳“</p>\n<p>4.经常使用分点叙述<br>我是这么认为的，第一，X；第二，X；第三，X。</p>\n<p>5.请求帮忙时，先提出自己的办法<br>”经过了解，遇到一些问题，我的解决办法是XX，大家看看还有没有更好的办法?”<br>不论多平庸都要提一个。</p>\n<p>6.请求帮忙“不好意思，可以插一下队吗？因为我真的很急”</p>\n<p>7.聊天想聊下去：揪住对方的关键词+延伸过往彼此交流过的信息</p>\n<p>“今天又加班，很烦”<br>“怎么又加班，又是上次那个领导吗”</p>\n<p>“我爱豆塌房子了”<br>“哪个，上回说的那个吗，我去”</p>\n<p>8.不想聊下去<br>“今天又加班”<br>“怎么又加班，这算啥事”</p>\n<p>“我爱豆塌房子了”<br>“又他”</p>\n<p>9.领导说“辛苦了”<br>你：“从中学到很多，很有收获。”</p>\n<p>10.领导的节日问候（也可不发，上班的时候再热情问候即可）：<br>尊称+感谢+互动+祝福</p>\n<p>11.说服别人，改变一个人的想法<br>认同立场，替换观点。</p>\n<p>自嘲： 是阿…而且…</p>\n"},{"title":"努力方向之正解","date":"2021-12-21T03:09:26.000Z","_content":"`文章摘自微信公众号：十三先生手记`\n\n人们总是误以为”方向不对，努力白费“\n\n所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？\n看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？\n于是乎，在很长一段时间里，你在方向的选择上纠结，大量耗费了精力；久而久之，方向选择对你的意义就逐步降低；久而久之，你在没有了方向的努力中不断的迷茫，努力所收获到的就多半不如意；久而久之，你便自然逐步丧失了努力的动力。\n\n所以其中蕴含***真正的智慧***是什么呢？\n此刻，十三先生要你深深的明白：对于你真正想要成就的方向而言，基于外在目标而牵引你的行动方向就是你的迷障，基于你内心真正愿意去做的方向才是真正利于你达成整体目标的方向。若是你在每次做选择之际，你都按你内心真正未权衡的意愿立刻去着手行动，并在行动的过程中，实事求是的不断优化解决遇到的问题，而不是在事前先拿你预设的可能遇到的问题去和你的资源做权衡匹配，在来做方向选择的决定，假以时日，必定你会不断收获到你真正想要收获到的利益。\n\n### 个人感悟\n与其纠结于方向正确，不如尽快行动起来，尽快在行动中感受自我。那些未经反复驱动，内心自发想要完成的事情就是你人生的正确方向了。\n\n","source":"_posts/shisan/努力方向之正解.md","raw":"---\ntitle: 努力方向之正解\ndate: 2021-12-21 11:09:26\ntags: 十三手记\ncategories:\n- 十三手记\n---\n`文章摘自微信公众号：十三先生手记`\n\n人们总是误以为”方向不对，努力白费“\n\n所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？\n看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？\n于是乎，在很长一段时间里，你在方向的选择上纠结，大量耗费了精力；久而久之，方向选择对你的意义就逐步降低；久而久之，你在没有了方向的努力中不断的迷茫，努力所收获到的就多半不如意；久而久之，你便自然逐步丧失了努力的动力。\n\n所以其中蕴含***真正的智慧***是什么呢？\n此刻，十三先生要你深深的明白：对于你真正想要成就的方向而言，基于外在目标而牵引你的行动方向就是你的迷障，基于你内心真正愿意去做的方向才是真正利于你达成整体目标的方向。若是你在每次做选择之际，你都按你内心真正未权衡的意愿立刻去着手行动，并在行动的过程中，实事求是的不断优化解决遇到的问题，而不是在事前先拿你预设的可能遇到的问题去和你的资源做权衡匹配，在来做方向选择的决定，假以时日，必定你会不断收获到你真正想要收获到的利益。\n\n### 个人感悟\n与其纠结于方向正确，不如尽快行动起来，尽快在行动中感受自我。那些未经反复驱动，内心自发想要完成的事情就是你人生的正确方向了。\n\n","slug":"shisan/努力方向之正解","published":1,"updated":"2022-01-05T06:24:54.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavg001t28zd7wd07exd","content":"<p><code>文章摘自微信公众号：十三先生手记</code></p>\n<p>人们总是误以为”方向不对，努力白费“</p>\n<p>所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？<br>看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？<br>于是乎，在很长一段时间里，你在方向的选择上纠结，大量耗费了精力；久而久之，方向选择对你的意义就逐步降低；久而久之，你在没有了方向的努力中不断的迷茫，努力所收获到的就多半不如意；久而久之，你便自然逐步丧失了努力的动力。</p>\n<p>所以其中蕴含<em><strong>真正的智慧</strong></em>是什么呢？<br>此刻，十三先生要你深深的明白：对于你真正想要成就的方向而言，基于外在目标而牵引你的行动方向就是你的迷障，基于你内心真正愿意去做的方向才是真正利于你达成整体目标的方向。若是你在每次做选择之际，你都按你内心真正未权衡的意愿立刻去着手行动，并在行动的过程中，实事求是的不断优化解决遇到的问题，而不是在事前先拿你预设的可能遇到的问题去和你的资源做权衡匹配，在来做方向选择的决定，假以时日，必定你会不断收获到你真正想要收获到的利益。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>与其纠结于方向正确，不如尽快行动起来，尽快在行动中感受自我。那些未经反复驱动，内心自发想要完成的事情就是你人生的正确方向了。</p>\n","site":{"data":{}},"length":499,"excerpt":"","more":"<p><code>文章摘自微信公众号：十三先生手记</code></p>\n<p>人们总是误以为”方向不对，努力白费“</p>\n<p>所以到底什么方向是努力的正确方向，是对事情方向性的选择吗？<br>看起来是这样的，其实不然，在事情没有出现结果之前，谁能确定方向对不对？<br>于是乎，在很长一段时间里，你在方向的选择上纠结，大量耗费了精力；久而久之，方向选择对你的意义就逐步降低；久而久之，你在没有了方向的努力中不断的迷茫，努力所收获到的就多半不如意；久而久之，你便自然逐步丧失了努力的动力。</p>\n<p>所以其中蕴含<em><strong>真正的智慧</strong></em>是什么呢？<br>此刻，十三先生要你深深的明白：对于你真正想要成就的方向而言，基于外在目标而牵引你的行动方向就是你的迷障，基于你内心真正愿意去做的方向才是真正利于你达成整体目标的方向。若是你在每次做选择之际，你都按你内心真正未权衡的意愿立刻去着手行动，并在行动的过程中，实事求是的不断优化解决遇到的问题，而不是在事前先拿你预设的可能遇到的问题去和你的资源做权衡匹配，在来做方向选择的决定，假以时日，必定你会不断收获到你真正想要收获到的利益。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>与其纠结于方向正确，不如尽快行动起来，尽快在行动中感受自我。那些未经反复驱动，内心自发想要完成的事情就是你人生的正确方向了。</p>\n"},{"title":"奖惩精要","mathjax":true,"date":"2021-12-27T06:48:52.000Z","_content":"\n`摘自微信公众号十三手记`\n\n自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚至因为错用奖惩而受到惩罚。\n\n#### 首先，奖惩时为了更好的控制别人吗？  \n你以为是，但必定不是。若是为了更好的控制别人，为何那么多人用了奖惩手段并未真正收到真正控制别人的真正效果？  \n#### 那么，奖惩到底是为了什么？  \n那是为了促进对方强大的同时与其交心。  \n\n#### 何时奖惩？\n尽快，及时  \n\n#### 何处奖惩？ \n公开的要公开，私下的要私下，否则就是反效果。\n\n\n此刻，十三先生要你深深的明白：在你的人际关系管理中，若是你的奖惩只是你控制别人的手段，那你的手段最多只是临时效果，最终必定不能如你所愿，甚至受到反效果；若是你的奖惩是在用心反馈你对别人行为有效性的重视，是为了及时给予对方诚意的肯定或是改进提醒，那你就是在用奖惩的办法促进对方强大的同时与其交心，假以时日，你必定能收获到奖惩给你的人际关系处理的真实力量和价值。\n\n","source":"_posts/shisan/奖惩精要.md","raw":"---\ntitle: 奖惩精要\nmathjax: true\ndate: 2021-12-27 14:48:52\ntags: 十三手记\ncategories:\n- 十三手记\n---\n\n`摘自微信公众号十三手记`\n\n自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚至因为错用奖惩而受到惩罚。\n\n#### 首先，奖惩时为了更好的控制别人吗？  \n你以为是，但必定不是。若是为了更好的控制别人，为何那么多人用了奖惩手段并未真正收到真正控制别人的真正效果？  \n#### 那么，奖惩到底是为了什么？  \n那是为了促进对方强大的同时与其交心。  \n\n#### 何时奖惩？\n尽快，及时  \n\n#### 何处奖惩？ \n公开的要公开，私下的要私下，否则就是反效果。\n\n\n此刻，十三先生要你深深的明白：在你的人际关系管理中，若是你的奖惩只是你控制别人的手段，那你的手段最多只是临时效果，最终必定不能如你所愿，甚至受到反效果；若是你的奖惩是在用心反馈你对别人行为有效性的重视，是为了及时给予对方诚意的肯定或是改进提醒，那你就是在用奖惩的办法促进对方强大的同时与其交心，假以时日，你必定能收获到奖惩给你的人际关系处理的真实力量和价值。\n\n","slug":"shisan/奖惩精要","published":1,"updated":"2022-01-05T06:24:21.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavh001x28zd8vvl391u","content":"<p><code>摘自微信公众号十三手记</code></p>\n<p>自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚至因为错用奖惩而受到惩罚。</p>\n<h4 id=\"首先，奖惩时为了更好的控制别人吗？\"><a href=\"#首先，奖惩时为了更好的控制别人吗？\" class=\"headerlink\" title=\"首先，奖惩时为了更好的控制别人吗？\"></a>首先，奖惩时为了更好的控制别人吗？</h4><p>你以为是，但必定不是。若是为了更好的控制别人，为何那么多人用了奖惩手段并未真正收到真正控制别人的真正效果？  </p>\n<h4 id=\"那么，奖惩到底是为了什么？\"><a href=\"#那么，奖惩到底是为了什么？\" class=\"headerlink\" title=\"那么，奖惩到底是为了什么？\"></a>那么，奖惩到底是为了什么？</h4><p>那是为了促进对方强大的同时与其交心。  </p>\n<h4 id=\"何时奖惩？\"><a href=\"#何时奖惩？\" class=\"headerlink\" title=\"何时奖惩？\"></a>何时奖惩？</h4><p>尽快，及时  </p>\n<h4 id=\"何处奖惩？\"><a href=\"#何处奖惩？\" class=\"headerlink\" title=\"何处奖惩？\"></a>何处奖惩？</h4><p>公开的要公开，私下的要私下，否则就是反效果。</p>\n<p>此刻，十三先生要你深深的明白：在你的人际关系管理中，若是你的奖惩只是你控制别人的手段，那你的手段最多只是临时效果，最终必定不能如你所愿，甚至受到反效果；若是你的奖惩是在用心反馈你对别人行为有效性的重视，是为了及时给予对方诚意的肯定或是改进提醒，那你就是在用奖惩的办法促进对方强大的同时与其交心，假以时日，你必定能收获到奖惩给你的人际关系处理的真实力量和价值。</p>\n","site":{"data":{}},"length":446,"excerpt":"","more":"<p><code>摘自微信公众号十三手记</code></p>\n<p>自古以来，在团队、组织及家庭教育等人际关系管理中，奖惩都是当事人的必修课，凡能善用者，都能收获到相当的人生成就，可是真正能把奖惩落实到位乃至出神入化的人凤毛麟角，究其原因，其实都是没能真正明白奖惩的核心精髓，甚至因为错用奖惩而受到惩罚。</p>\n<h4 id=\"首先，奖惩时为了更好的控制别人吗？\"><a href=\"#首先，奖惩时为了更好的控制别人吗？\" class=\"headerlink\" title=\"首先，奖惩时为了更好的控制别人吗？\"></a>首先，奖惩时为了更好的控制别人吗？</h4><p>你以为是，但必定不是。若是为了更好的控制别人，为何那么多人用了奖惩手段并未真正收到真正控制别人的真正效果？  </p>\n<h4 id=\"那么，奖惩到底是为了什么？\"><a href=\"#那么，奖惩到底是为了什么？\" class=\"headerlink\" title=\"那么，奖惩到底是为了什么？\"></a>那么，奖惩到底是为了什么？</h4><p>那是为了促进对方强大的同时与其交心。  </p>\n<h4 id=\"何时奖惩？\"><a href=\"#何时奖惩？\" class=\"headerlink\" title=\"何时奖惩？\"></a>何时奖惩？</h4><p>尽快，及时  </p>\n<h4 id=\"何处奖惩？\"><a href=\"#何处奖惩？\" class=\"headerlink\" title=\"何处奖惩？\"></a>何处奖惩？</h4><p>公开的要公开，私下的要私下，否则就是反效果。</p>\n<p>此刻，十三先生要你深深的明白：在你的人际关系管理中，若是你的奖惩只是你控制别人的手段，那你的手段最多只是临时效果，最终必定不能如你所愿，甚至受到反效果；若是你的奖惩是在用心反馈你对别人行为有效性的重视，是为了及时给予对方诚意的肯定或是改进提醒，那你就是在用奖惩的办法促进对方强大的同时与其交心，假以时日，你必定能收获到奖惩给你的人际关系处理的真实力量和价值。</p>\n"},{"title":"恐惧之破","mathjax":true,"date":"2022-01-05T06:30:42.000Z","_content":"\n你有恐惧吗？  想必有的 \n你想解除恐惧吗？  必定想的 \n可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。\n\n### 那么恐惧从何而来？\n从曲解真相而来\n\n### 恐惧是什么？\n是你的人生大礼给你的提醒。\n\n### 此刻要你深深明白\n二元有相世界，恐惧来自于你对真相的无视或者曲解。如此，只要你无视或者曲解了真相，必定会形成相应的恐惧；如此，你内心恐惧的形成是为了提醒你搞清楚恐惧背后的真相；如此，若是你逃避真相，你必定会反复感受到恐惧；如此，当你心有恐惧，请直面你所恐惧的东西，并搞清楚其真相，当你一旦真正清楚真相，恐惧必定就会随之而消失；与此同时，必定你就能在搞清楚真相的过程中收获到你人生的大礼。\n\n","source":"_posts/shisan/恐惧之破.md","raw":"---\ntitle: 恐惧之破\ncategories:\n  - 十三手记\nmathjax: true\ndate: 2022-01-05 14:30:42\ntags: 十三手记\n---\n\n你有恐惧吗？  想必有的 \n你想解除恐惧吗？  必定想的 \n可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。\n\n### 那么恐惧从何而来？\n从曲解真相而来\n\n### 恐惧是什么？\n是你的人生大礼给你的提醒。\n\n### 此刻要你深深明白\n二元有相世界，恐惧来自于你对真相的无视或者曲解。如此，只要你无视或者曲解了真相，必定会形成相应的恐惧；如此，你内心恐惧的形成是为了提醒你搞清楚恐惧背后的真相；如此，若是你逃避真相，你必定会反复感受到恐惧；如此，当你心有恐惧，请直面你所恐惧的东西，并搞清楚其真相，当你一旦真正清楚真相，恐惧必定就会随之而消失；与此同时，必定你就能在搞清楚真相的过程中收获到你人生的大礼。\n\n","slug":"shisan/恐惧之破","published":1,"updated":"2022-01-05T06:37:05.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavi001z28zd7yg3al8a","content":"<p>你有恐惧吗？  想必有的<br>你想解除恐惧吗？  必定想的<br>可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。</p>\n<h3 id=\"那么恐惧从何而来？\"><a href=\"#那么恐惧从何而来？\" class=\"headerlink\" title=\"那么恐惧从何而来？\"></a>那么恐惧从何而来？</h3><p>从曲解真相而来</p>\n<h3 id=\"恐惧是什么？\"><a href=\"#恐惧是什么？\" class=\"headerlink\" title=\"恐惧是什么？\"></a>恐惧是什么？</h3><p>是你的人生大礼给你的提醒。</p>\n<h3 id=\"此刻要你深深明白\"><a href=\"#此刻要你深深明白\" class=\"headerlink\" title=\"此刻要你深深明白\"></a>此刻要你深深明白</h3><p>二元有相世界，恐惧来自于你对真相的无视或者曲解。如此，只要你无视或者曲解了真相，必定会形成相应的恐惧；如此，你内心恐惧的形成是为了提醒你搞清楚恐惧背后的真相；如此，若是你逃避真相，你必定会反复感受到恐惧；如此，当你心有恐惧，请直面你所恐惧的东西，并搞清楚其真相，当你一旦真正清楚真相，恐惧必定就会随之而消失；与此同时，必定你就能在搞清楚真相的过程中收获到你人生的大礼。</p>\n","site":{"data":{}},"length":284,"excerpt":"","more":"<p>你有恐惧吗？  想必有的<br>你想解除恐惧吗？  必定想的<br>可为什么你无法真正解除？  因为你不知道恐惧从何而来，更不知道什么是恐惧。</p>\n<h3 id=\"那么恐惧从何而来？\"><a href=\"#那么恐惧从何而来？\" class=\"headerlink\" title=\"那么恐惧从何而来？\"></a>那么恐惧从何而来？</h3><p>从曲解真相而来</p>\n<h3 id=\"恐惧是什么？\"><a href=\"#恐惧是什么？\" class=\"headerlink\" title=\"恐惧是什么？\"></a>恐惧是什么？</h3><p>是你的人生大礼给你的提醒。</p>\n<h3 id=\"此刻要你深深明白\"><a href=\"#此刻要你深深明白\" class=\"headerlink\" title=\"此刻要你深深明白\"></a>此刻要你深深明白</h3><p>二元有相世界，恐惧来自于你对真相的无视或者曲解。如此，只要你无视或者曲解了真相，必定会形成相应的恐惧；如此，你内心恐惧的形成是为了提醒你搞清楚恐惧背后的真相；如此，若是你逃避真相，你必定会反复感受到恐惧；如此，当你心有恐惧，请直面你所恐惧的东西，并搞清楚其真相，当你一旦真正清楚真相，恐惧必定就会随之而消失；与此同时，必定你就能在搞清楚真相的过程中收获到你人生的大礼。</p>\n"},{"title":"接纳麻烦","mathjax":true,"date":"2022-01-18T04:19:43.000Z","_content":"`摘自微信号十三手记`\n\n### 引言\n什么是麻烦？\n是那些你特别想忽略或粗糙嫌弃的事。\n\n麻烦是什么？\n是你逃避直面真实自己的托词。\n\n既然如此，还有真正的麻烦吗？\n没有，麻烦都是必要的，都是来成就你的礼物。\n\n类似的麻烦为何会反复出现？\n因为你一直没有透过直面解决这些麻烦去解除生命中的困惑。\n\n如此一来，不解决麻烦的结果是什么？\n你始终不能真正感受自己内心的智慧与力量。\n\n### 此刻你要明白\n在你的人生旅程中，你与别人的整体差距，就是你们解决麻烦的程度的差距，如此，当你遇到你以为的麻烦，请不要嫌弃和忽略，请你力所能及的去具体解决，尽量到位，因为在这些解决行为里，不仅有你值得提升的认知，也有你智慧与力量的创造，也有你生命活性的体验，更加你累积人生成就的大礼。\n\n### 个人感悟\n虽然我们需要惜时，但也要耐心解决问题，大大小小的问题都是提升自我的途径，尽管麻烦也要去接纳。如果重复度大的则可以考虑自动化去解决。\n","source":"_posts/shisan/接纳麻烦.md","raw":"---\ntitle: 接纳麻烦\ncategories:\n  - 十三手记\n\nmathjax: true\ndate: 2022-01-18 12:19:43\ntags: 十三手记\n---\n`摘自微信号十三手记`\n\n### 引言\n什么是麻烦？\n是那些你特别想忽略或粗糙嫌弃的事。\n\n麻烦是什么？\n是你逃避直面真实自己的托词。\n\n既然如此，还有真正的麻烦吗？\n没有，麻烦都是必要的，都是来成就你的礼物。\n\n类似的麻烦为何会反复出现？\n因为你一直没有透过直面解决这些麻烦去解除生命中的困惑。\n\n如此一来，不解决麻烦的结果是什么？\n你始终不能真正感受自己内心的智慧与力量。\n\n### 此刻你要明白\n在你的人生旅程中，你与别人的整体差距，就是你们解决麻烦的程度的差距，如此，当你遇到你以为的麻烦，请不要嫌弃和忽略，请你力所能及的去具体解决，尽量到位，因为在这些解决行为里，不仅有你值得提升的认知，也有你智慧与力量的创造，也有你生命活性的体验，更加你累积人生成就的大礼。\n\n### 个人感悟\n虽然我们需要惜时，但也要耐心解决问题，大大小小的问题都是提升自我的途径，尽管麻烦也要去接纳。如果重复度大的则可以考虑自动化去解决。\n","slug":"shisan/接纳麻烦","published":1,"updated":"2022-01-18T04:26:31.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavj002328zd2itf6z6h","content":"<p><code>摘自微信号十三手记</code></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>什么是麻烦？<br>是那些你特别想忽略或粗糙嫌弃的事。</p>\n<p>麻烦是什么？<br>是你逃避直面真实自己的托词。</p>\n<p>既然如此，还有真正的麻烦吗？<br>没有，麻烦都是必要的，都是来成就你的礼物。</p>\n<p>类似的麻烦为何会反复出现？<br>因为你一直没有透过直面解决这些麻烦去解除生命中的困惑。</p>\n<p>如此一来，不解决麻烦的结果是什么？<br>你始终不能真正感受自己内心的智慧与力量。</p>\n<h3 id=\"此刻你要明白\"><a href=\"#此刻你要明白\" class=\"headerlink\" title=\"此刻你要明白\"></a>此刻你要明白</h3><p>在你的人生旅程中，你与别人的整体差距，就是你们解决麻烦的程度的差距，如此，当你遇到你以为的麻烦，请不要嫌弃和忽略，请你力所能及的去具体解决，尽量到位，因为在这些解决行为里，不仅有你值得提升的认知，也有你智慧与力量的创造，也有你生命活性的体验，更加你累积人生成就的大礼。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>虽然我们需要惜时，但也要耐心解决问题，大大小小的问题都是提升自我的途径，尽管麻烦也要去接纳。如果重复度大的则可以考虑自动化去解决。</p>\n","site":{"data":{}},"length":375,"excerpt":"","more":"<p><code>摘自微信号十三手记</code></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>什么是麻烦？<br>是那些你特别想忽略或粗糙嫌弃的事。</p>\n<p>麻烦是什么？<br>是你逃避直面真实自己的托词。</p>\n<p>既然如此，还有真正的麻烦吗？<br>没有，麻烦都是必要的，都是来成就你的礼物。</p>\n<p>类似的麻烦为何会反复出现？<br>因为你一直没有透过直面解决这些麻烦去解除生命中的困惑。</p>\n<p>如此一来，不解决麻烦的结果是什么？<br>你始终不能真正感受自己内心的智慧与力量。</p>\n<h3 id=\"此刻你要明白\"><a href=\"#此刻你要明白\" class=\"headerlink\" title=\"此刻你要明白\"></a>此刻你要明白</h3><p>在你的人生旅程中，你与别人的整体差距，就是你们解决麻烦的程度的差距，如此，当你遇到你以为的麻烦，请不要嫌弃和忽略，请你力所能及的去具体解决，尽量到位，因为在这些解决行为里，不仅有你值得提升的认知，也有你智慧与力量的创造，也有你生命活性的体验，更加你累积人生成就的大礼。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>虽然我们需要惜时，但也要耐心解决问题，大大小小的问题都是提升自我的途径，尽管麻烦也要去接纳。如果重复度大的则可以考虑自动化去解决。</p>\n"},{"title":"洞见睡眠","mathjax":true,"date":"2021-12-28T12:24:03.000Z","_content":"`摘自微信号十三手记`\n\n### 引言\n定时睡眠和睡眠时长时一个人精神饱满的关键吗？  \n你以为是，其实不是。  \n为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  \n\n- 人的系统能量是怎么消耗的？\n眼耳鼻舌身的功能运行和头脑里的各种念想。 \n\n- 系统能量是怎么补充的？ \n适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。\n\n### 要你深深明白\n二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  \n\n如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。\n\n\n### 附赠\n失眠是什么？ \n是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？\n\n\n### 个人感悟\n人类对自己的认知是那么的不足，对睡眠也几乎是一无所知。十三手记表达了令人惊奇的观点，人恢复能量和元气并不完完全全依赖于睡眠。虽然大部分时候睡眠质量很重要，但同时也没有必要一直纠结于自身的睡眠质量。能量的恢复是自然而然的，而人的感官意识都是无时无刻在耗费精力的，但当你关闭了这些感官和意识时，其实你就已经在休整，你的能量就已经是呈现上升的态势。所以，关于休息，我们应该更少焦虑的纠结于睡眠，更多关注我们感官意识的状态。这就是所谓的闭目养神，同时冥想可能可带来注意力的自主调整和加快能量恢复，以致于很多人推荐。\n","source":"_posts/shisan/洞见睡眠.md","raw":"---\ntitle: 洞见睡眠\nmathjax: true\ndate: 2021-12-28 20:24:03\ntags: 十三手记\ncategories:\n- 十三手记\n---\n`摘自微信号十三手记`\n\n### 引言\n定时睡眠和睡眠时长时一个人精神饱满的关键吗？  \n你以为是，其实不是。  \n为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  \n\n- 人的系统能量是怎么消耗的？\n眼耳鼻舌身的功能运行和头脑里的各种念想。 \n\n- 系统能量是怎么补充的？ \n适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。\n\n### 要你深深明白\n二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  \n\n如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。\n\n\n### 附赠\n失眠是什么？ \n是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？\n\n\n### 个人感悟\n人类对自己的认知是那么的不足，对睡眠也几乎是一无所知。十三手记表达了令人惊奇的观点，人恢复能量和元气并不完完全全依赖于睡眠。虽然大部分时候睡眠质量很重要，但同时也没有必要一直纠结于自身的睡眠质量。能量的恢复是自然而然的，而人的感官意识都是无时无刻在耗费精力的，但当你关闭了这些感官和意识时，其实你就已经在休整，你的能量就已经是呈现上升的态势。所以，关于休息，我们应该更少焦虑的纠结于睡眠，更多关注我们感官意识的状态。这就是所谓的闭目养神，同时冥想可能可带来注意力的自主调整和加快能量恢复，以致于很多人推荐。\n","slug":"shisan/洞见睡眠","published":1,"updated":"2022-01-05T06:24:21.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavk002528zdb1tufb6k","content":"<p><code>摘自微信号十三手记</code></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>定时睡眠和睡眠时长时一个人精神饱满的关键吗？<br>你以为是，其实不是。<br>为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  </p>\n<ul>\n<li><p>人的系统能量是怎么消耗的？<br>眼耳鼻舌身的功能运行和头脑里的各种念想。 </p>\n</li>\n<li><p>系统能量是怎么补充的？<br>适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。</p>\n</li>\n</ul>\n<h3 id=\"要你深深明白\"><a href=\"#要你深深明白\" class=\"headerlink\" title=\"要你深深明白\"></a>要你深深明白</h3><p>二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  </p>\n<p>如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。</p>\n<h3 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h3><p>失眠是什么？<br>是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>人类对自己的认知是那么的不足，对睡眠也几乎是一无所知。十三手记表达了令人惊奇的观点，人恢复能量和元气并不完完全全依赖于睡眠。虽然大部分时候睡眠质量很重要，但同时也没有必要一直纠结于自身的睡眠质量。能量的恢复是自然而然的，而人的感官意识都是无时无刻在耗费精力的，但当你关闭了这些感官和意识时，其实你就已经在休整，你的能量就已经是呈现上升的态势。所以，关于休息，我们应该更少焦虑的纠结于睡眠，更多关注我们感官意识的状态。这就是所谓的闭目养神，同时冥想可能可带来注意力的自主调整和加快能量恢复，以致于很多人推荐。</p>\n","site":{"data":{}},"length":837,"excerpt":"","more":"<p><code>摘自微信号十三手记</code></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>定时睡眠和睡眠时长时一个人精神饱满的关键吗？<br>你以为是，其实不是。<br>为什么？ 因为你没有真正懂得人的能量消耗和补充的原理，所以被某些单边的睡眠观念影响纠结，进而降低了睡眠质量。  </p>\n<ul>\n<li><p>人的系统能量是怎么消耗的？<br>眼耳鼻舌身的功能运行和头脑里的各种念想。 </p>\n</li>\n<li><p>系统能量是怎么补充的？<br>适当的时候，主动放松降低眼耳鼻舌身意的运行频率，生命本源会自动补充你的精神能量；适度的饮食支持会提供身体所需要的物质能量。</p>\n</li>\n</ul>\n<h3 id=\"要你深深明白\"><a href=\"#要你深深明白\" class=\"headerlink\" title=\"要你深深明白\"></a>要你深深明白</h3><p>二元有相世界，任何时候，当你放松敞开不纠结，系统能量便会自动减少消耗，补充便会自动提高。所以，定时睡眠以及睡眠时长并不是一个人精神饱满的关键，关键的问题是人的系统能量消耗和补充的原理，当你明白了这个原理，你便打破了睡眠是你能量补充的必须形式的局限认知，你便打破了你对睡眠的依赖性。  </p>\n<p>如此，反而你何时睡眠以及睡眠时长就可以根据你的意愿而主动安排；如此，你便不会因所谓的失眠而形成恐惧，便不会被恐惧纠结而形成反复消耗，反而能量补充会更加顺畅；如此，你的睡眠质量反而得到提高，你的生命自由度便会随着你心境的提升而逐步提升，身心健康和自由便走上了可期的道路。</p>\n<h3 id=\"附赠\"><a href=\"#附赠\" class=\"headerlink\" title=\"附赠\"></a>附赠</h3><p>失眠是什么？<br>是你先给自己定个睡觉时间，再把睡不着当成失眠吗？失眠是没睡觉的样子？还是说在特定时间没睡觉？为什么要特定？谁特定的？谁能除了定自己还能定别人？难道你不可以睡得着就睡，睡不着就不睡吗？</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>人类对自己的认知是那么的不足，对睡眠也几乎是一无所知。十三手记表达了令人惊奇的观点，人恢复能量和元气并不完完全全依赖于睡眠。虽然大部分时候睡眠质量很重要，但同时也没有必要一直纠结于自身的睡眠质量。能量的恢复是自然而然的，而人的感官意识都是无时无刻在耗费精力的，但当你关闭了这些感官和意识时，其实你就已经在休整，你的能量就已经是呈现上升的态势。所以，关于休息，我们应该更少焦虑的纠结于睡眠，更多关注我们感官意识的状态。这就是所谓的闭目养神，同时冥想可能可带来注意力的自主调整和加快能量恢复，以致于很多人推荐。</p>\n"},{"title":"能量朗读","date":"2021-12-20T02:43:29.000Z","_content":"`文章摘自微信公众号：十三先生手记`\n\n\n小时候，我就一直渴望幸福，一直渴望坚强；\n小时候，我就一直渴望正直，一直渴望善良；\n小时候，为就一直渴望快乐，一直渴望成长；\n现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！\n我知道，我不能再这样消极的逃避。\n我知道，我不能再这样平庸的彷徨。\n我知道，我要全力迸发我的热情；我要勇敢的收复我的希望。\n我知道，我要真诚的对待身边每一个人，这样，我才能被每一个人真诚的对待；\n我知道，我要用心的对待每天的时光，这样，我才能收获每天的力量；\n我知道，我要帮助身边每一个人达成心愿，这样，大家才能帮助我实现梦想。\n从今天起，我要打败我的懒惰，重拾我的阳光；\n从今天起，我要改变我的粗俗，提升我的修养；\n从今天起，我要挑战我的懦弱，找回我的坚强；\n\n我是为爱这个世界而来\n我要让世界因我的爱而更加美丽，\n我要让世界因我的爱而更加安康，\n我要让世界因我的爱而更加真诚，\n我要让世界因我的爱而更加和畅。","source":"_posts/shisan/能量朗读.md","raw":"---\ntitle: 能量朗读\ndate: 2021-12-20 10:43:29\ntags: 十三手记\ncategories:\n- 十三手记\n---\n`文章摘自微信公众号：十三先生手记`\n\n\n小时候，我就一直渴望幸福，一直渴望坚强；\n小时候，我就一直渴望正直，一直渴望善良；\n小时候，为就一直渴望快乐，一直渴望成长；\n现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！\n我知道，我不能再这样消极的逃避。\n我知道，我不能再这样平庸的彷徨。\n我知道，我要全力迸发我的热情；我要勇敢的收复我的希望。\n我知道，我要真诚的对待身边每一个人，这样，我才能被每一个人真诚的对待；\n我知道，我要用心的对待每天的时光，这样，我才能收获每天的力量；\n我知道，我要帮助身边每一个人达成心愿，这样，大家才能帮助我实现梦想。\n从今天起，我要打败我的懒惰，重拾我的阳光；\n从今天起，我要改变我的粗俗，提升我的修养；\n从今天起，我要挑战我的懦弱，找回我的坚强；\n\n我是为爱这个世界而来\n我要让世界因我的爱而更加美丽，\n我要让世界因我的爱而更加安康，\n我要让世界因我的爱而更加真诚，\n我要让世界因我的爱而更加和畅。","slug":"shisan/能量朗读","published":1,"updated":"2022-01-05T06:24:54.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavk002928zd18vogmca","content":"<p><code>文章摘自微信公众号：十三先生手记</code></p>\n<p>小时候，我就一直渴望幸福，一直渴望坚强；<br>小时候，我就一直渴望正直，一直渴望善良；<br>小时候，为就一直渴望快乐，一直渴望成长；<br>现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！<br>我知道，我不能再这样消极的逃避。<br>我知道，我不能再这样平庸的彷徨。<br>我知道，我要全力迸发我的热情；我要勇敢的收复我的希望。<br>我知道，我要真诚的对待身边每一个人，这样，我才能被每一个人真诚的对待；<br>我知道，我要用心的对待每天的时光，这样，我才能收获每天的力量；<br>我知道，我要帮助身边每一个人达成心愿，这样，大家才能帮助我实现梦想。<br>从今天起，我要打败我的懒惰，重拾我的阳光；<br>从今天起，我要改变我的粗俗，提升我的修养；<br>从今天起，我要挑战我的懦弱，找回我的坚强；</p>\n<p>我是为爱这个世界而来<br>我要让世界因我的爱而更加美丽，<br>我要让世界因我的爱而更加安康，<br>我要让世界因我的爱而更加真诚，<br>我要让世界因我的爱而更加和畅。</p>\n","site":{"data":{}},"length":393,"excerpt":"","more":"<p><code>文章摘自微信公众号：十三先生手记</code></p>\n<p>小时候，我就一直渴望幸福，一直渴望坚强；<br>小时候，我就一直渴望正直，一直渴望善良；<br>小时候，为就一直渴望快乐，一直渴望成长；<br>现在，我几乎丢失了我的信心，我几乎丢失了我的梦想！<br>我知道，我不能再这样消极的逃避。<br>我知道，我不能再这样平庸的彷徨。<br>我知道，我要全力迸发我的热情；我要勇敢的收复我的希望。<br>我知道，我要真诚的对待身边每一个人，这样，我才能被每一个人真诚的对待；<br>我知道，我要用心的对待每天的时光，这样，我才能收获每天的力量；<br>我知道，我要帮助身边每一个人达成心愿，这样，大家才能帮助我实现梦想。<br>从今天起，我要打败我的懒惰，重拾我的阳光；<br>从今天起，我要改变我的粗俗，提升我的修养；<br>从今天起，我要挑战我的懦弱，找回我的坚强；</p>\n<p>我是为爱这个世界而来<br>我要让世界因我的爱而更加美丽，<br>我要让世界因我的爱而更加安康，<br>我要让世界因我的爱而更加真诚，<br>我要让世界因我的爱而更加和畅。</p>\n"},{"title":"金钱之二元整体观","date":"2021-12-22T04:14:05.000Z","_content":"\n`摘自微信号十三手记`\n\n金钱只是金钱的样子吗？ \n你以为是，但必定不是。\n\n首先明白，金钱的有形或无形形式为什么存在？ \n是为了运行金钱背后的实际价值\n\n对于金钱而言，一般有三种状态：获取，存储，使用\n三种状态在一起就是你金钱的留存路径，也是金钱存在的整体。\n\n此时，十三先生要你深深的明白：只要你对待金钱的这三种状态不平衡，只偏向执着于其一或其二，被你忽略掉的部分都必定会让你体验到金钱的匮乏，你都必定会经历金钱的反复障碍，无论金钱多少，你都是被金钱牵制捆绑的奴才；若是你懂得了今天讲的金钱整体性，在金钱对境中，把这三部分中你当时所处的部分运作出最大的价值和质感，并透过自己的障碍和痛苦主动去发现自己的单边局限，并及时主动透过逆袭自己的小气和不尊重金钱之粗糙的行为来扩大自己的金钱进出通道和格局，如此，假以时日，你便不会被金钱三部分中任何一部分障碍，你便会逐步成为内心富足的金钱主人。\n\n**一条手记**：二元有相世界，金钱是你自己其中一个相，你对待金钱的状态就是你对待自己和对待世界的状态。\n\n### 个人感悟\n这边十三先生提到关于金钱从获得，存储和使用三个维度分析，从提升个人金钱观上升提高个人世界观。\n- 关于获得：没有人会嫌钱多，在尽个人最大努力以及精力下，应最高效提升金钱的获得效率。\n- 关于存储：有了上一步，存储才有意义，如何有效理财，提升金钱的有效价值；另外，足够的存储才能带给个人底气和自信。\n- 关于使用：根据上两步的情况，具体规划用度，及时安抚自我，时刻让自己充满斗志与动力。\n","source":"_posts/shisan/金钱之二元整体观.md","raw":"---\ntitle: 金钱之二元整体观\ndate: 2021-12-22 12:14:05\ntags: 十三手记\ncategories:\n- 十三手记\n---\n\n`摘自微信号十三手记`\n\n金钱只是金钱的样子吗？ \n你以为是，但必定不是。\n\n首先明白，金钱的有形或无形形式为什么存在？ \n是为了运行金钱背后的实际价值\n\n对于金钱而言，一般有三种状态：获取，存储，使用\n三种状态在一起就是你金钱的留存路径，也是金钱存在的整体。\n\n此时，十三先生要你深深的明白：只要你对待金钱的这三种状态不平衡，只偏向执着于其一或其二，被你忽略掉的部分都必定会让你体验到金钱的匮乏，你都必定会经历金钱的反复障碍，无论金钱多少，你都是被金钱牵制捆绑的奴才；若是你懂得了今天讲的金钱整体性，在金钱对境中，把这三部分中你当时所处的部分运作出最大的价值和质感，并透过自己的障碍和痛苦主动去发现自己的单边局限，并及时主动透过逆袭自己的小气和不尊重金钱之粗糙的行为来扩大自己的金钱进出通道和格局，如此，假以时日，你便不会被金钱三部分中任何一部分障碍，你便会逐步成为内心富足的金钱主人。\n\n**一条手记**：二元有相世界，金钱是你自己其中一个相，你对待金钱的状态就是你对待自己和对待世界的状态。\n\n### 个人感悟\n这边十三先生提到关于金钱从获得，存储和使用三个维度分析，从提升个人金钱观上升提高个人世界观。\n- 关于获得：没有人会嫌钱多，在尽个人最大努力以及精力下，应最高效提升金钱的获得效率。\n- 关于存储：有了上一步，存储才有意义，如何有效理财，提升金钱的有效价值；另外，足够的存储才能带给个人底气和自信。\n- 关于使用：根据上两步的情况，具体规划用度，及时安抚自我，时刻让自己充满斗志与动力。\n","slug":"shisan/金钱之二元整体观","published":1,"updated":"2022-01-05T06:24:54.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavl002b28zd7lvq0v0e","content":"<p><code>摘自微信号十三手记</code></p>\n<p>金钱只是金钱的样子吗？<br>你以为是，但必定不是。</p>\n<p>首先明白，金钱的有形或无形形式为什么存在？<br>是为了运行金钱背后的实际价值</p>\n<p>对于金钱而言，一般有三种状态：获取，存储，使用<br>三种状态在一起就是你金钱的留存路径，也是金钱存在的整体。</p>\n<p>此时，十三先生要你深深的明白：只要你对待金钱的这三种状态不平衡，只偏向执着于其一或其二，被你忽略掉的部分都必定会让你体验到金钱的匮乏，你都必定会经历金钱的反复障碍，无论金钱多少，你都是被金钱牵制捆绑的奴才；若是你懂得了今天讲的金钱整体性，在金钱对境中，把这三部分中你当时所处的部分运作出最大的价值和质感，并透过自己的障碍和痛苦主动去发现自己的单边局限，并及时主动透过逆袭自己的小气和不尊重金钱之粗糙的行为来扩大自己的金钱进出通道和格局，如此，假以时日，你便不会被金钱三部分中任何一部分障碍，你便会逐步成为内心富足的金钱主人。</p>\n<p><strong>一条手记</strong>：二元有相世界，金钱是你自己其中一个相，你对待金钱的状态就是你对待自己和对待世界的状态。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>这边十三先生提到关于金钱从获得，存储和使用三个维度分析，从提升个人金钱观上升提高个人世界观。</p>\n<ul>\n<li>关于获得：没有人会嫌钱多，在尽个人最大努力以及精力下，应最高效提升金钱的获得效率。</li>\n<li>关于存储：有了上一步，存储才有意义，如何有效理财，提升金钱的有效价值；另外，足够的存储才能带给个人底气和自信。</li>\n<li>关于使用：根据上两步的情况，具体规划用度，及时安抚自我，时刻让自己充满斗志与动力。</li>\n</ul>\n","site":{"data":{}},"length":614,"excerpt":"","more":"<p><code>摘自微信号十三手记</code></p>\n<p>金钱只是金钱的样子吗？<br>你以为是，但必定不是。</p>\n<p>首先明白，金钱的有形或无形形式为什么存在？<br>是为了运行金钱背后的实际价值</p>\n<p>对于金钱而言，一般有三种状态：获取，存储，使用<br>三种状态在一起就是你金钱的留存路径，也是金钱存在的整体。</p>\n<p>此时，十三先生要你深深的明白：只要你对待金钱的这三种状态不平衡，只偏向执着于其一或其二，被你忽略掉的部分都必定会让你体验到金钱的匮乏，你都必定会经历金钱的反复障碍，无论金钱多少，你都是被金钱牵制捆绑的奴才；若是你懂得了今天讲的金钱整体性，在金钱对境中，把这三部分中你当时所处的部分运作出最大的价值和质感，并透过自己的障碍和痛苦主动去发现自己的单边局限，并及时主动透过逆袭自己的小气和不尊重金钱之粗糙的行为来扩大自己的金钱进出通道和格局，如此，假以时日，你便不会被金钱三部分中任何一部分障碍，你便会逐步成为内心富足的金钱主人。</p>\n<p><strong>一条手记</strong>：二元有相世界，金钱是你自己其中一个相，你对待金钱的状态就是你对待自己和对待世界的状态。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>这边十三先生提到关于金钱从获得，存储和使用三个维度分析，从提升个人金钱观上升提高个人世界观。</p>\n<ul>\n<li>关于获得：没有人会嫌钱多，在尽个人最大努力以及精力下，应最高效提升金钱的获得效率。</li>\n<li>关于存储：有了上一步，存储才有意义，如何有效理财，提升金钱的有效价值；另外，足够的存储才能带给个人底气和自信。</li>\n<li>关于使用：根据上两步的情况，具体规划用度，及时安抚自我，时刻让自己充满斗志与动力。</li>\n</ul>\n"},{"title":"金钱的实际价值","date":"2021-12-24T09:40:17.000Z","_content":"\n`摘自十三手记`\n\n若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。\n\n但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。\n\n此时，十三先生要你深深的明白：二元有相世界，金钱的实际价值必定等于你诚意付出之时创造出的相应实际价值，但是你却一直有种想付出更少收获更多金钱的想法，所以你不自知的不愿搞清楚。因为一旦你搞清楚了这个核心原理，你就无法继续投机取巧，就无法继续偷懒了。但是，只要你真正诚意看懂并接纳了这个关键点，你就能更加务实的面对自己所面对的一切人和事，你才能因此而尽可能减少多余的动作，你才能因减少多余动作而减少障碍环节，你才能因减少障碍环节而减少不必要的消耗，如此，你整体的行动才能更加高效，反而你才能走上人生各种成功的捷径。\n\n### 个人感悟\n回忆过去，确有种种如此的感觉。上高中和大学的时候，每一分钱都来自父母，舍不得多花乱花。出来工作后，可能得益于名校光环，匹配一些不太核心的岗位时候，工作的艰辛就远不及当初，于是感觉金钱就来得容易了，殊不知金钱其实也流入并不富裕，只因个人消费比较简单，只花该花的钱，只享受该享受的事。于是渐渐，也失去了赚大钱的欲望，虽说不能没有，但明显不及年少时的强烈，花钱也比较随意，一直没有大的积蓄，理财也是三天打鱼四天撒网的状态。希望认真对待工作中的每一件事，认清金钱来之不易，努力增长自己的财富，也能合理地用度。\n\n另外，而立之年，却没有多余的精力和财产赡养父母，更多的是让父母为自己忧心忡忡，目前为止，依然算不上才社会能游刃有余，立足四方。此后，应**挖掘自己的兴趣目标，提升个人在社会中的价值**。\n","source":"_posts/shisan/金钱的实际价值.md","raw":"---\ntitle: 金钱的实际价值\ndate: 2021-12-24 17:40:17\ntags: 十三手记\ncategories:\n- 十三手记\n---\n\n`摘自十三手记`\n\n若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。\n\n但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。\n\n此时，十三先生要你深深的明白：二元有相世界，金钱的实际价值必定等于你诚意付出之时创造出的相应实际价值，但是你却一直有种想付出更少收获更多金钱的想法，所以你不自知的不愿搞清楚。因为一旦你搞清楚了这个核心原理，你就无法继续投机取巧，就无法继续偷懒了。但是，只要你真正诚意看懂并接纳了这个关键点，你就能更加务实的面对自己所面对的一切人和事，你才能因此而尽可能减少多余的动作，你才能因减少多余动作而减少障碍环节，你才能因减少障碍环节而减少不必要的消耗，如此，你整体的行动才能更加高效，反而你才能走上人生各种成功的捷径。\n\n### 个人感悟\n回忆过去，确有种种如此的感觉。上高中和大学的时候，每一分钱都来自父母，舍不得多花乱花。出来工作后，可能得益于名校光环，匹配一些不太核心的岗位时候，工作的艰辛就远不及当初，于是感觉金钱就来得容易了，殊不知金钱其实也流入并不富裕，只因个人消费比较简单，只花该花的钱，只享受该享受的事。于是渐渐，也失去了赚大钱的欲望，虽说不能没有，但明显不及年少时的强烈，花钱也比较随意，一直没有大的积蓄，理财也是三天打鱼四天撒网的状态。希望认真对待工作中的每一件事，认清金钱来之不易，努力增长自己的财富，也能合理地用度。\n\n另外，而立之年，却没有多余的精力和财产赡养父母，更多的是让父母为自己忧心忡忡，目前为止，依然算不上才社会能游刃有余，立足四方。此后，应**挖掘自己的兴趣目标，提升个人在社会中的价值**。\n","slug":"shisan/金钱的实际价值","published":1,"updated":"2022-01-05T06:24:54.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavm002f28zd561oftij","content":"<p><code>摘自十三手记</code></p>\n<p>若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。</p>\n<p>但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。</p>\n<p>此时，十三先生要你深深的明白：二元有相世界，金钱的实际价值必定等于你诚意付出之时创造出的相应实际价值，但是你却一直有种想付出更少收获更多金钱的想法，所以你不自知的不愿搞清楚。因为一旦你搞清楚了这个核心原理，你就无法继续投机取巧，就无法继续偷懒了。但是，只要你真正诚意看懂并接纳了这个关键点，你就能更加务实的面对自己所面对的一切人和事，你才能因此而尽可能减少多余的动作，你才能因减少多余动作而减少障碍环节，你才能因减少障碍环节而减少不必要的消耗，如此，你整体的行动才能更加高效，反而你才能走上人生各种成功的捷径。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>回忆过去，确有种种如此的感觉。上高中和大学的时候，每一分钱都来自父母，舍不得多花乱花。出来工作后，可能得益于名校光环，匹配一些不太核心的岗位时候，工作的艰辛就远不及当初，于是感觉金钱就来得容易了，殊不知金钱其实也流入并不富裕，只因个人消费比较简单，只花该花的钱，只享受该享受的事。于是渐渐，也失去了赚大钱的欲望，虽说不能没有，但明显不及年少时的强烈，花钱也比较随意，一直没有大的积蓄，理财也是三天打鱼四天撒网的状态。希望认真对待工作中的每一件事，认清金钱来之不易，努力增长自己的财富，也能合理地用度。</p>\n<p>另外，而立之年，却没有多余的精力和财产赡养父母，更多的是让父母为自己忧心忡忡，目前为止，依然算不上才社会能游刃有余，立足四方。此后，应<strong>挖掘自己的兴趣目标，提升个人在社会中的价值</strong>。</p>\n","site":{"data":{}},"length":698,"excerpt":"","more":"<p><code>摘自十三手记</code></p>\n<p>若是认真观察自己过往对金钱的感受，必定发现一个现象：钱来得容易的时候，也花得容易；钱来得艰难，也就比较耐用。</p>\n<p>但大多数时候，我们不愿面对这样的真相：金钱实际价值的背后有自己投机取巧的小心思。</p>\n<p>此时，十三先生要你深深的明白：二元有相世界，金钱的实际价值必定等于你诚意付出之时创造出的相应实际价值，但是你却一直有种想付出更少收获更多金钱的想法，所以你不自知的不愿搞清楚。因为一旦你搞清楚了这个核心原理，你就无法继续投机取巧，就无法继续偷懒了。但是，只要你真正诚意看懂并接纳了这个关键点，你就能更加务实的面对自己所面对的一切人和事，你才能因此而尽可能减少多余的动作，你才能因减少多余动作而减少障碍环节，你才能因减少障碍环节而减少不必要的消耗，如此，你整体的行动才能更加高效，反而你才能走上人生各种成功的捷径。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>回忆过去，确有种种如此的感觉。上高中和大学的时候，每一分钱都来自父母，舍不得多花乱花。出来工作后，可能得益于名校光环，匹配一些不太核心的岗位时候，工作的艰辛就远不及当初，于是感觉金钱就来得容易了，殊不知金钱其实也流入并不富裕，只因个人消费比较简单，只花该花的钱，只享受该享受的事。于是渐渐，也失去了赚大钱的欲望，虽说不能没有，但明显不及年少时的强烈，花钱也比较随意，一直没有大的积蓄，理财也是三天打鱼四天撒网的状态。希望认真对待工作中的每一件事，认清金钱来之不易，努力增长自己的财富，也能合理地用度。</p>\n<p>另外，而立之年，却没有多余的精力和财产赡养父母，更多的是让父母为自己忧心忡忡，目前为止，依然算不上才社会能游刃有余，立足四方。此后，应<strong>挖掘自己的兴趣目标，提升个人在社会中的价值</strong>。</p>\n"},{"title":"高效行动","mathjax":true,"date":"2022-01-18T04:11:44.000Z","_content":"`摘自微信号十三手记`\n\n### 引言\n为什么那么忙，却没有达到想要的效果？\n因为多余动作太多\n\n什么是多余动作？\n对事情发展本身不直接着力的动作\n\n多余动作为什么会出现？\n因为你害怕不利的结果来得太快，所以，你内心的恐惧感让你不自知的搞了这些动作来减缓进展的速度，虽然你以为这样做可以更好的优化过程，可以更快得到有利的结果。\n\n多余动作会产生什么效果？\n你以为会让事态进展更高效，但，其实必定会生出更多跟事件发展本身无关的新问题，进而形成层层阻碍。\n\n### 此刻你要明白\n在事情发展过程中，只有你的行为尽量实事求是的直接着力于事件本身，你才能尽量减少多余动作产生的能耗，你才能让事件在发展过程中更加清晰的优化，你才能让事件的进展更加高效。\n\n### 个人感悟\n对于自我而言，其实是逃避真正问题的根因。有时候明知道面前有必须要解决的问题，但是总是希望从外界或者其他不相关的内容中得到方法，而非从自身出发努力去解决问题。因此往往会偏离有价值的行为，以及有效的解决真正问题，因此才一直无法有效解决问题。","source":"_posts/shisan/高效行动.md","raw":"---\ntitle: 高效行动\ncategories:\n  - 十三手记\nmathjax: true\ndate: 2022-01-18 12:11:44\ntags: 十三手记\n---\n`摘自微信号十三手记`\n\n### 引言\n为什么那么忙，却没有达到想要的效果？\n因为多余动作太多\n\n什么是多余动作？\n对事情发展本身不直接着力的动作\n\n多余动作为什么会出现？\n因为你害怕不利的结果来得太快，所以，你内心的恐惧感让你不自知的搞了这些动作来减缓进展的速度，虽然你以为这样做可以更好的优化过程，可以更快得到有利的结果。\n\n多余动作会产生什么效果？\n你以为会让事态进展更高效，但，其实必定会生出更多跟事件发展本身无关的新问题，进而形成层层阻碍。\n\n### 此刻你要明白\n在事情发展过程中，只有你的行为尽量实事求是的直接着力于事件本身，你才能尽量减少多余动作产生的能耗，你才能让事件在发展过程中更加清晰的优化，你才能让事件的进展更加高效。\n\n### 个人感悟\n对于自我而言，其实是逃避真正问题的根因。有时候明知道面前有必须要解决的问题，但是总是希望从外界或者其他不相关的内容中得到方法，而非从自身出发努力去解决问题。因此往往会偏离有价值的行为，以及有效的解决真正问题，因此才一直无法有效解决问题。","slug":"shisan/高效行动","published":1,"updated":"2022-01-18T04:19:10.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavm002h28zdahwl9wiq","content":"<p><code>摘自微信号十三手记</code></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>为什么那么忙，却没有达到想要的效果？<br>因为多余动作太多</p>\n<p>什么是多余动作？<br>对事情发展本身不直接着力的动作</p>\n<p>多余动作为什么会出现？<br>因为你害怕不利的结果来得太快，所以，你内心的恐惧感让你不自知的搞了这些动作来减缓进展的速度，虽然你以为这样做可以更好的优化过程，可以更快得到有利的结果。</p>\n<p>多余动作会产生什么效果？<br>你以为会让事态进展更高效，但，其实必定会生出更多跟事件发展本身无关的新问题，进而形成层层阻碍。</p>\n<h3 id=\"此刻你要明白\"><a href=\"#此刻你要明白\" class=\"headerlink\" title=\"此刻你要明白\"></a>此刻你要明白</h3><p>在事情发展过程中，只有你的行为尽量实事求是的直接着力于事件本身，你才能尽量减少多余动作产生的能耗，你才能让事件在发展过程中更加清晰的优化，你才能让事件的进展更加高效。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>对于自我而言，其实是逃避真正问题的根因。有时候明知道面前有必须要解决的问题，但是总是希望从外界或者其他不相关的内容中得到方法，而非从自身出发努力去解决问题。因此往往会偏离有价值的行为，以及有效的解决真正问题，因此才一直无法有效解决问题。</p>\n","site":{"data":{}},"length":417,"excerpt":"","more":"<p><code>摘自微信号十三手记</code></p>\n<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>为什么那么忙，却没有达到想要的效果？<br>因为多余动作太多</p>\n<p>什么是多余动作？<br>对事情发展本身不直接着力的动作</p>\n<p>多余动作为什么会出现？<br>因为你害怕不利的结果来得太快，所以，你内心的恐惧感让你不自知的搞了这些动作来减缓进展的速度，虽然你以为这样做可以更好的优化过程，可以更快得到有利的结果。</p>\n<p>多余动作会产生什么效果？<br>你以为会让事态进展更高效，但，其实必定会生出更多跟事件发展本身无关的新问题，进而形成层层阻碍。</p>\n<h3 id=\"此刻你要明白\"><a href=\"#此刻你要明白\" class=\"headerlink\" title=\"此刻你要明白\"></a>此刻你要明白</h3><p>在事情发展过程中，只有你的行为尽量实事求是的直接着力于事件本身，你才能尽量减少多余动作产生的能耗，你才能让事件在发展过程中更加清晰的优化，你才能让事件的进展更加高效。</p>\n<h3 id=\"个人感悟\"><a href=\"#个人感悟\" class=\"headerlink\" title=\"个人感悟\"></a>个人感悟</h3><p>对于自我而言，其实是逃避真正问题的根因。有时候明知道面前有必须要解决的问题，但是总是希望从外界或者其他不相关的内容中得到方法，而非从自身出发努力去解决问题。因此往往会偏离有价值的行为，以及有效的解决真正问题，因此才一直无法有效解决问题。</p>\n"},{"title":"需求正解","mathjax":true,"date":"2022-01-10T08:43:19.000Z","_content":"`文章摘自微信公众号：十三先生手记`\n\n### 何谓需求\n你清晰什么是真正的需求吗？\n必定不清晰\n\n那什么是真正的需求？\n对境需求，不是过去的需求，更不是未来的需求。\n\n什么是境的需求？\n是适合你当时的实际需求。\n\n需求有几种？\n两种：人事物本身，以及附加给人事物的概念\n\n人事物本身是什么意思？\n是人事物本来的功能和价值。\n\n概念需求是什么意思？\n是附加到人事物的功能和价值上的概念，是让你产生欲望后误以为自己需求的迷障。\n\n谁附加的概念？\n是你自己或者是外界。\n\n### 此刻要你深深的明白\n由于你的贪心，你分不清自己真正的需求。所以，你过去总被人事物的附加概念牵动而消耗了大量资源和精力，所以只有你真正懂得了你要的是人事物本身的功能和价值，你才不会被这些附加的概念干扰和误导，你才真正懂得了珍惜物命，你才真正懂得了珍惜缘分，你才真正懂得了珍惜人生。\n\n","source":"_posts/shisan/需求正解.md","raw":"---\ntitle: 需求正解\ncategories:\n  - 十三手记\nmathjax: true\ndate: 2022-01-10 16:43:19\ntags: 十三手记\n---\n`文章摘自微信公众号：十三先生手记`\n\n### 何谓需求\n你清晰什么是真正的需求吗？\n必定不清晰\n\n那什么是真正的需求？\n对境需求，不是过去的需求，更不是未来的需求。\n\n什么是境的需求？\n是适合你当时的实际需求。\n\n需求有几种？\n两种：人事物本身，以及附加给人事物的概念\n\n人事物本身是什么意思？\n是人事物本来的功能和价值。\n\n概念需求是什么意思？\n是附加到人事物的功能和价值上的概念，是让你产生欲望后误以为自己需求的迷障。\n\n谁附加的概念？\n是你自己或者是外界。\n\n### 此刻要你深深的明白\n由于你的贪心，你分不清自己真正的需求。所以，你过去总被人事物的附加概念牵动而消耗了大量资源和精力，所以只有你真正懂得了你要的是人事物本身的功能和价值，你才不会被这些附加的概念干扰和误导，你才真正懂得了珍惜物命，你才真正懂得了珍惜缘分，你才真正懂得了珍惜人生。\n\n","slug":"shisan/需求正解","published":1,"updated":"2022-01-10T08:49:04.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavn002l28zdgctog5ek","content":"<p><code>文章摘自微信公众号：十三先生手记</code></p>\n<h3 id=\"何谓需求\"><a href=\"#何谓需求\" class=\"headerlink\" title=\"何谓需求\"></a>何谓需求</h3><p>你清晰什么是真正的需求吗？<br>必定不清晰</p>\n<p>那什么是真正的需求？<br>对境需求，不是过去的需求，更不是未来的需求。</p>\n<p>什么是境的需求？<br>是适合你当时的实际需求。</p>\n<p>需求有几种？<br>两种：人事物本身，以及附加给人事物的概念</p>\n<p>人事物本身是什么意思？<br>是人事物本来的功能和价值。</p>\n<p>概念需求是什么意思？<br>是附加到人事物的功能和价值上的概念，是让你产生欲望后误以为自己需求的迷障。</p>\n<p>谁附加的概念？<br>是你自己或者是外界。</p>\n<h3 id=\"此刻要你深深的明白\"><a href=\"#此刻要你深深的明白\" class=\"headerlink\" title=\"此刻要你深深的明白\"></a>此刻要你深深的明白</h3><p>由于你的贪心，你分不清自己真正的需求。所以，你过去总被人事物的附加概念牵动而消耗了大量资源和精力，所以只有你真正懂得了你要的是人事物本身的功能和价值，你才不会被这些附加的概念干扰和误导，你才真正懂得了珍惜物命，你才真正懂得了珍惜缘分，你才真正懂得了珍惜人生。</p>\n","site":{"data":{}},"length":342,"excerpt":"","more":"<p><code>文章摘自微信公众号：十三先生手记</code></p>\n<h3 id=\"何谓需求\"><a href=\"#何谓需求\" class=\"headerlink\" title=\"何谓需求\"></a>何谓需求</h3><p>你清晰什么是真正的需求吗？<br>必定不清晰</p>\n<p>那什么是真正的需求？<br>对境需求，不是过去的需求，更不是未来的需求。</p>\n<p>什么是境的需求？<br>是适合你当时的实际需求。</p>\n<p>需求有几种？<br>两种：人事物本身，以及附加给人事物的概念</p>\n<p>人事物本身是什么意思？<br>是人事物本来的功能和价值。</p>\n<p>概念需求是什么意思？<br>是附加到人事物的功能和价值上的概念，是让你产生欲望后误以为自己需求的迷障。</p>\n<p>谁附加的概念？<br>是你自己或者是外界。</p>\n<h3 id=\"此刻要你深深的明白\"><a href=\"#此刻要你深深的明白\" class=\"headerlink\" title=\"此刻要你深深的明白\"></a>此刻要你深深的明白</h3><p>由于你的贪心，你分不清自己真正的需求。所以，你过去总被人事物的附加概念牵动而消耗了大量资源和精力，所以只有你真正懂得了你要的是人事物本身的功能和价值，你才不会被这些附加的概念干扰和误导，你才真正懂得了珍惜物命，你才真正懂得了珍惜缘分，你才真正懂得了珍惜人生。</p>\n"},{"title":"心态练习","mathjax":true,"date":"2022-01-28T08:57:44.000Z","_content":"\n### 可以刻意练习的六种心态\n1.旁观者心态\n**方法：任何不喜欢的事情发生了，你就想象一个画面-你从身体跳出来了，你在5米之外看自己。**\n作用：可以四两拨千斤，化解所有烦恼。开悟者常用，但一般需要经历太多苦修才能达到境界。\n\n从旁观者看，这个人既陌生又熟悉，但这人终究是陌生人，他发生的任何事都和你没有关系，甚至很搞笑好玩。\n\n原理：练习久了，你基本不会被情绪困扰，旁观者心态是不响应生理性、基因性、即时性、冲动性和本能性的反应。这些反应是所有痛苦的根源，不但解决不了问题，反而会让事情变得更加糟糕。\n\n\n2.归零者心态\n当感觉做人不容易，压力特别大，心情非常沮丧，非常迷茫的时候，用这个心态可以安静下来找到目标，让自己的人生变清晰，恢复自信。\n\n**方法：想象过去的一切一切都只是你的一个梦而以。既然过去的一切一切都是梦，全部归零了。现在的自己就是新生婴儿，未来的自己一切都是崭新的。**\n\n原理：既然是新生的，就不要带有包袱，不管是荣誉的还是耻辱的。人生最可怕的事情就是路径依赖。归零者厉害之初在于让你突破路径依赖，成为改变命运的起点。\n\n3.一日囚心态\n用于对抗消费主义陷阱，远离个人经济危机\n\n**方法：想买东西的时候，想象自己只能活在今天了，买来的东西今天用不上的话就会消失。**\n\n4.造物主心态\n献给低自尊，低价值感，低存在感的同学们\n是不是特别爱觉得对不起？是不是觉得自己终究是不配了？是不是觉得强者的世界中自己就像一颗无足轻重的露珠？\n\n请大胆勇敢使用造物主心态\n\n**方法：这个世界是你创造的，所有人所有事都是你脑袋里长出来的，它们对你来说，才终究是不配了。**\n\n原理：这其实就是世界运作的本质和人生的真相，可以多读相关的书了解\n\n应用场景：面对应试面试，演讲；面对弱智和杠精；教员就是造物主心态的代表性人物，参见相关诗词“五岭逶迤腾细浪，乌蒙磅翎走泥丸“\n\n5.复仇者心态\n弱者最大的问题在于甘于弱势地位，认为“大家不都这样过的吗”，但凡能成就的人都有卧薪尝胆的复仇之心，老天爷不会平白无故帮助一个过于佛系的人。\n\n首先要找个仇人（不是真正意义上的，是为了成就自己找的一个靶子），可以虚构一个人出来。他和你有着不共戴天之仇，而且如果5年后比他钱少，他就能弄死你。反复构建比较细节，直到可恨。\n\n方法：如何复仇？如何5年后弄死虚构的人；现在存的每一分钱都是对他的一记耳光。每一分钟认真的工作都是一记飞腿。每一次毫无意义的消费都是仇人射来的箭。每一次自甘堕落都是对手的励精图治。\n\n可以用于办公室政治，追求对象，追求财富，追求成就上。\n\n\n6.永生者心态\n\n方法：就像永远不会死那样，去追求道德和精神生活的完善。\n\n“积善之家必有余庆，及不善之家必有余殃”\n\n总结：心态改变行为，行为改变命运。\n\n\n### 高赞的回答\n1.不内耗\n不让负面情绪影响自己超过3天，不苦情。有想表达的事情勇敢争取表达；遇到负面反馈再应对，不猜测不内耗。\n\n2.不让别人消耗自己\n与简单的人做朋友，远离强势，带来压迫感，会负面打击别人的人。\n\n3.戒掉虚荣心\n认清事物的本质，刨去表面毫无用处的附加值\n\n4.表达出来与内心完全一致，相信别人也如此\n不害怕表达真实的自己，表达出来的跟内心完全一致，不让别人猜；推己及人，相信别人表达出来的也跟内心一致\n\n5.练习深度工作\n专注工作，控制自控力，集中精力在眼前有难度，有挑战的事情上。\n\n6.做长期主义者\n人人都渴望“快速成功”，但真正成功的事情都是经历播种、施肥、浇灌而成的。\n\n7.社交时，不把自己放在被评价的位置\n遇到比自己强的人，不要在意，承认对方优点，也不否定自我，没有必要太在意别人的看法。\n\n8.克制自我的同理心\n太敏感感知别人情绪，容易成为讨好型人格。\n\n\n\n","source":"_posts/xinli/心态练习.md","raw":"---\ntitle: 心态练习\ncategories:\n  - 心理\nmathjax: true\ndate: 2022-01-28 16:57:44\ntags: 心理\n---\n\n### 可以刻意练习的六种心态\n1.旁观者心态\n**方法：任何不喜欢的事情发生了，你就想象一个画面-你从身体跳出来了，你在5米之外看自己。**\n作用：可以四两拨千斤，化解所有烦恼。开悟者常用，但一般需要经历太多苦修才能达到境界。\n\n从旁观者看，这个人既陌生又熟悉，但这人终究是陌生人，他发生的任何事都和你没有关系，甚至很搞笑好玩。\n\n原理：练习久了，你基本不会被情绪困扰，旁观者心态是不响应生理性、基因性、即时性、冲动性和本能性的反应。这些反应是所有痛苦的根源，不但解决不了问题，反而会让事情变得更加糟糕。\n\n\n2.归零者心态\n当感觉做人不容易，压力特别大，心情非常沮丧，非常迷茫的时候，用这个心态可以安静下来找到目标，让自己的人生变清晰，恢复自信。\n\n**方法：想象过去的一切一切都只是你的一个梦而以。既然过去的一切一切都是梦，全部归零了。现在的自己就是新生婴儿，未来的自己一切都是崭新的。**\n\n原理：既然是新生的，就不要带有包袱，不管是荣誉的还是耻辱的。人生最可怕的事情就是路径依赖。归零者厉害之初在于让你突破路径依赖，成为改变命运的起点。\n\n3.一日囚心态\n用于对抗消费主义陷阱，远离个人经济危机\n\n**方法：想买东西的时候，想象自己只能活在今天了，买来的东西今天用不上的话就会消失。**\n\n4.造物主心态\n献给低自尊，低价值感，低存在感的同学们\n是不是特别爱觉得对不起？是不是觉得自己终究是不配了？是不是觉得强者的世界中自己就像一颗无足轻重的露珠？\n\n请大胆勇敢使用造物主心态\n\n**方法：这个世界是你创造的，所有人所有事都是你脑袋里长出来的，它们对你来说，才终究是不配了。**\n\n原理：这其实就是世界运作的本质和人生的真相，可以多读相关的书了解\n\n应用场景：面对应试面试，演讲；面对弱智和杠精；教员就是造物主心态的代表性人物，参见相关诗词“五岭逶迤腾细浪，乌蒙磅翎走泥丸“\n\n5.复仇者心态\n弱者最大的问题在于甘于弱势地位，认为“大家不都这样过的吗”，但凡能成就的人都有卧薪尝胆的复仇之心，老天爷不会平白无故帮助一个过于佛系的人。\n\n首先要找个仇人（不是真正意义上的，是为了成就自己找的一个靶子），可以虚构一个人出来。他和你有着不共戴天之仇，而且如果5年后比他钱少，他就能弄死你。反复构建比较细节，直到可恨。\n\n方法：如何复仇？如何5年后弄死虚构的人；现在存的每一分钱都是对他的一记耳光。每一分钟认真的工作都是一记飞腿。每一次毫无意义的消费都是仇人射来的箭。每一次自甘堕落都是对手的励精图治。\n\n可以用于办公室政治，追求对象，追求财富，追求成就上。\n\n\n6.永生者心态\n\n方法：就像永远不会死那样，去追求道德和精神生活的完善。\n\n“积善之家必有余庆，及不善之家必有余殃”\n\n总结：心态改变行为，行为改变命运。\n\n\n### 高赞的回答\n1.不内耗\n不让负面情绪影响自己超过3天，不苦情。有想表达的事情勇敢争取表达；遇到负面反馈再应对，不猜测不内耗。\n\n2.不让别人消耗自己\n与简单的人做朋友，远离强势，带来压迫感，会负面打击别人的人。\n\n3.戒掉虚荣心\n认清事物的本质，刨去表面毫无用处的附加值\n\n4.表达出来与内心完全一致，相信别人也如此\n不害怕表达真实的自己，表达出来的跟内心完全一致，不让别人猜；推己及人，相信别人表达出来的也跟内心一致\n\n5.练习深度工作\n专注工作，控制自控力，集中精力在眼前有难度，有挑战的事情上。\n\n6.做长期主义者\n人人都渴望“快速成功”，但真正成功的事情都是经历播种、施肥、浇灌而成的。\n\n7.社交时，不把自己放在被评价的位置\n遇到比自己强的人，不要在意，承认对方优点，也不否定自我，没有必要太在意别人的看法。\n\n8.克制自我的同理心\n太敏感感知别人情绪，容易成为讨好型人格。\n\n\n\n","slug":"xinli/心态练习","published":1,"updated":"2022-01-28T10:07:00.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl00tgavo002n28zd13o3528k","content":"<h3 id=\"可以刻意练习的六种心态\"><a href=\"#可以刻意练习的六种心态\" class=\"headerlink\" title=\"可以刻意练习的六种心态\"></a>可以刻意练习的六种心态</h3><p>1.旁观者心态<br><strong>方法：任何不喜欢的事情发生了，你就想象一个画面-你从身体跳出来了，你在5米之外看自己。</strong><br>作用：可以四两拨千斤，化解所有烦恼。开悟者常用，但一般需要经历太多苦修才能达到境界。</p>\n<p>从旁观者看，这个人既陌生又熟悉，但这人终究是陌生人，他发生的任何事都和你没有关系，甚至很搞笑好玩。</p>\n<p>原理：练习久了，你基本不会被情绪困扰，旁观者心态是不响应生理性、基因性、即时性、冲动性和本能性的反应。这些反应是所有痛苦的根源，不但解决不了问题，反而会让事情变得更加糟糕。</p>\n<p>2.归零者心态<br>当感觉做人不容易，压力特别大，心情非常沮丧，非常迷茫的时候，用这个心态可以安静下来找到目标，让自己的人生变清晰，恢复自信。</p>\n<p><strong>方法：想象过去的一切一切都只是你的一个梦而以。既然过去的一切一切都是梦，全部归零了。现在的自己就是新生婴儿，未来的自己一切都是崭新的。</strong></p>\n<p>原理：既然是新生的，就不要带有包袱，不管是荣誉的还是耻辱的。人生最可怕的事情就是路径依赖。归零者厉害之初在于让你突破路径依赖，成为改变命运的起点。</p>\n<p>3.一日囚心态<br>用于对抗消费主义陷阱，远离个人经济危机</p>\n<p><strong>方法：想买东西的时候，想象自己只能活在今天了，买来的东西今天用不上的话就会消失。</strong></p>\n<p>4.造物主心态<br>献给低自尊，低价值感，低存在感的同学们<br>是不是特别爱觉得对不起？是不是觉得自己终究是不配了？是不是觉得强者的世界中自己就像一颗无足轻重的露珠？</p>\n<p>请大胆勇敢使用造物主心态</p>\n<p><strong>方法：这个世界是你创造的，所有人所有事都是你脑袋里长出来的，它们对你来说，才终究是不配了。</strong></p>\n<p>原理：这其实就是世界运作的本质和人生的真相，可以多读相关的书了解</p>\n<p>应用场景：面对应试面试，演讲；面对弱智和杠精；教员就是造物主心态的代表性人物，参见相关诗词“五岭逶迤腾细浪，乌蒙磅翎走泥丸“</p>\n<p>5.复仇者心态<br>弱者最大的问题在于甘于弱势地位，认为“大家不都这样过的吗”，但凡能成就的人都有卧薪尝胆的复仇之心，老天爷不会平白无故帮助一个过于佛系的人。</p>\n<p>首先要找个仇人（不是真正意义上的，是为了成就自己找的一个靶子），可以虚构一个人出来。他和你有着不共戴天之仇，而且如果5年后比他钱少，他就能弄死你。反复构建比较细节，直到可恨。</p>\n<p>方法：如何复仇？如何5年后弄死虚构的人；现在存的每一分钱都是对他的一记耳光。每一分钟认真的工作都是一记飞腿。每一次毫无意义的消费都是仇人射来的箭。每一次自甘堕落都是对手的励精图治。</p>\n<p>可以用于办公室政治，追求对象，追求财富，追求成就上。</p>\n<p>6.永生者心态</p>\n<p>方法：就像永远不会死那样，去追求道德和精神生活的完善。</p>\n<p>“积善之家必有余庆，及不善之家必有余殃”</p>\n<p>总结：心态改变行为，行为改变命运。</p>\n<h3 id=\"高赞的回答\"><a href=\"#高赞的回答\" class=\"headerlink\" title=\"高赞的回答\"></a>高赞的回答</h3><p>1.不内耗<br>不让负面情绪影响自己超过3天，不苦情。有想表达的事情勇敢争取表达；遇到负面反馈再应对，不猜测不内耗。</p>\n<p>2.不让别人消耗自己<br>与简单的人做朋友，远离强势，带来压迫感，会负面打击别人的人。</p>\n<p>3.戒掉虚荣心<br>认清事物的本质，刨去表面毫无用处的附加值</p>\n<p>4.表达出来与内心完全一致，相信别人也如此<br>不害怕表达真实的自己，表达出来的跟内心完全一致，不让别人猜；推己及人，相信别人表达出来的也跟内心一致</p>\n<p>5.练习深度工作<br>专注工作，控制自控力，集中精力在眼前有难度，有挑战的事情上。</p>\n<p>6.做长期主义者<br>人人都渴望“快速成功”，但真正成功的事情都是经历播种、施肥、浇灌而成的。</p>\n<p>7.社交时，不把自己放在被评价的位置<br>遇到比自己强的人，不要在意，承认对方优点，也不否定自我，没有必要太在意别人的看法。</p>\n<p>8.克制自我的同理心<br>太敏感感知别人情绪，容易成为讨好型人格。</p>\n","site":{"data":{}},"length":1459,"excerpt":"","more":"<h3 id=\"可以刻意练习的六种心态\"><a href=\"#可以刻意练习的六种心态\" class=\"headerlink\" title=\"可以刻意练习的六种心态\"></a>可以刻意练习的六种心态</h3><p>1.旁观者心态<br><strong>方法：任何不喜欢的事情发生了，你就想象一个画面-你从身体跳出来了，你在5米之外看自己。</strong><br>作用：可以四两拨千斤，化解所有烦恼。开悟者常用，但一般需要经历太多苦修才能达到境界。</p>\n<p>从旁观者看，这个人既陌生又熟悉，但这人终究是陌生人，他发生的任何事都和你没有关系，甚至很搞笑好玩。</p>\n<p>原理：练习久了，你基本不会被情绪困扰，旁观者心态是不响应生理性、基因性、即时性、冲动性和本能性的反应。这些反应是所有痛苦的根源，不但解决不了问题，反而会让事情变得更加糟糕。</p>\n<p>2.归零者心态<br>当感觉做人不容易，压力特别大，心情非常沮丧，非常迷茫的时候，用这个心态可以安静下来找到目标，让自己的人生变清晰，恢复自信。</p>\n<p><strong>方法：想象过去的一切一切都只是你的一个梦而以。既然过去的一切一切都是梦，全部归零了。现在的自己就是新生婴儿，未来的自己一切都是崭新的。</strong></p>\n<p>原理：既然是新生的，就不要带有包袱，不管是荣誉的还是耻辱的。人生最可怕的事情就是路径依赖。归零者厉害之初在于让你突破路径依赖，成为改变命运的起点。</p>\n<p>3.一日囚心态<br>用于对抗消费主义陷阱，远离个人经济危机</p>\n<p><strong>方法：想买东西的时候，想象自己只能活在今天了，买来的东西今天用不上的话就会消失。</strong></p>\n<p>4.造物主心态<br>献给低自尊，低价值感，低存在感的同学们<br>是不是特别爱觉得对不起？是不是觉得自己终究是不配了？是不是觉得强者的世界中自己就像一颗无足轻重的露珠？</p>\n<p>请大胆勇敢使用造物主心态</p>\n<p><strong>方法：这个世界是你创造的，所有人所有事都是你脑袋里长出来的，它们对你来说，才终究是不配了。</strong></p>\n<p>原理：这其实就是世界运作的本质和人生的真相，可以多读相关的书了解</p>\n<p>应用场景：面对应试面试，演讲；面对弱智和杠精；教员就是造物主心态的代表性人物，参见相关诗词“五岭逶迤腾细浪，乌蒙磅翎走泥丸“</p>\n<p>5.复仇者心态<br>弱者最大的问题在于甘于弱势地位，认为“大家不都这样过的吗”，但凡能成就的人都有卧薪尝胆的复仇之心，老天爷不会平白无故帮助一个过于佛系的人。</p>\n<p>首先要找个仇人（不是真正意义上的，是为了成就自己找的一个靶子），可以虚构一个人出来。他和你有着不共戴天之仇，而且如果5年后比他钱少，他就能弄死你。反复构建比较细节，直到可恨。</p>\n<p>方法：如何复仇？如何5年后弄死虚构的人；现在存的每一分钱都是对他的一记耳光。每一分钟认真的工作都是一记飞腿。每一次毫无意义的消费都是仇人射来的箭。每一次自甘堕落都是对手的励精图治。</p>\n<p>可以用于办公室政治，追求对象，追求财富，追求成就上。</p>\n<p>6.永生者心态</p>\n<p>方法：就像永远不会死那样，去追求道德和精神生活的完善。</p>\n<p>“积善之家必有余庆，及不善之家必有余殃”</p>\n<p>总结：心态改变行为，行为改变命运。</p>\n<h3 id=\"高赞的回答\"><a href=\"#高赞的回答\" class=\"headerlink\" title=\"高赞的回答\"></a>高赞的回答</h3><p>1.不内耗<br>不让负面情绪影响自己超过3天，不苦情。有想表达的事情勇敢争取表达；遇到负面反馈再应对，不猜测不内耗。</p>\n<p>2.不让别人消耗自己<br>与简单的人做朋友，远离强势，带来压迫感，会负面打击别人的人。</p>\n<p>3.戒掉虚荣心<br>认清事物的本质，刨去表面毫无用处的附加值</p>\n<p>4.表达出来与内心完全一致，相信别人也如此<br>不害怕表达真实的自己，表达出来的跟内心完全一致，不让别人猜；推己及人，相信别人表达出来的也跟内心一致</p>\n<p>5.练习深度工作<br>专注工作，控制自控力，集中精力在眼前有难度，有挑战的事情上。</p>\n<p>6.做长期主义者<br>人人都渴望“快速成功”，但真正成功的事情都是经历播种、施肥、浇灌而成的。</p>\n<p>7.社交时，不把自己放在被评价的位置<br>遇到比自己强的人，不要在意，承认对方优点，也不否定自我，没有必要太在意别人的看法。</p>\n<p>8.克制自我的同理心<br>太敏感感知别人情绪，容易成为讨好型人格。</p>\n"},{"title":"SLAM十四讲_一预备及初识","mathjax":true,"date":"2022-01-07T08:52:46.000Z","_content":"\n### 预备知识\n\n#### SLAM：Simultaneous Localization and Mapping\n同步定位及建图：搭载特定传感器的主体，在没有环境先验信息情况下，在运动过程中建立环境模型，同时估计自己位姿的过程。根据传感器分为深度相机，RGB相机和激光。不同传感器特点不一样，应用环境以及遇到的难点不同。本书主要是视觉SLAM：围绕RGB相机，也会引入Depth相机。\n\nCV之初，人们想象有一天计算机将和人一样，通过眼睛去观察世界，理解周围的物体，探索未知的环境--这是一个美妙而又充满浪漫色彩的梦想，让无数科研人员日夜为之奋斗。\n\nSLAM相关的应用点：室内扫地机，移动机器人；户外的自动驾驶以及空中无人机；乃至虚拟现实和增强现实设备。\n\nSLAM研究的三十年，将主干分为四个大模块：\n- 前端里程计（求pose)：估计相邻图像相机的运动以及局部地图样子\n- 后端优化（优化pose)：根据多个时刻的相机位姿以及回环检测进行优化，得到全局一致的轨迹和地图\n- 建图：根据轨迹建立与任务要求对应的地图\n- 回环检测（优化全局pose)：判断是否到达过先前的位置\n\n1.定位问题：我在什么地方？\n2.建图问题：周围环境是什么样？\n方法很多：室内可以在地板铺设导引线，在墙上贴二维码，在桌子放置无线电定位设备；室外可以安装定位设备（GPS）等\n传感器主要两类：1.安装在本体上，如轮式编码器，IMU，相机，激光； 2.安装在环境上，上述提到的\n\n#### 不同传感器的特性以及SLAM的影响\n单目：图像是三维空间的二维投影，必须移动(Motion)才能估计结构(Structure).motion后只能根据视差估计相对的值，具有尺度不确定性。\n问题：平移才能计算深度以及无法确定真实尺度，导致单目SLAM困难多多，但是成本较低。\n\n双目：利于基线解决尺度不确定性，但视差的匹配依然效率不高，需要引入GPU和FPGA加速才能实时输出整张图的距离信息。双目测量距离受基线大小影响，所以无人车上一般搭载很大的家伙\n问题：对于SLAM而言，传感器的配置与标定较为复杂。\n\nRGB-D相机：通过TOF物理测量手段直接获得全图的深度信息\n问题：低端TOF测量范围窄，噪声大，视野小；普遍存在日光干扰、无法测量投射材质以及高反高吸收率材质；所以主要用于室内应用，室外难以使用。\n\n目前而言，如果工作环境理想：静态、刚体、光照变化小、没有人为干扰的场景，SLAM是相当成熟。\n\n\n#### 整书结构\n1.数学基础\n  - SLAM概述\n  - 三维空间运动\n  - 李群和李代数\n  - 针孔模型及opencv\n  - 非线性优化\n2.技术实践\n  - 特征点法的视觉里程计\n  - 直接法的视觉里程计\n  - 里程计实践\n  - 后端优化BA\n  - 后端优化位姿图\n  - 回环检测\n  - 地图构建\n  - SLAM的未来\n\n基础知识须知：\n- 高等数学、线性代数、概率论\n- C++语言和Linux基础\n\n#### 课后习题\n1.有线性方程 Ax = b，当我们知道 A, b，想要求解 x 时，如何求解？这对 A 和 b 需要哪些条件？提示：从 A 的维度和秩角度来分析\n1)**b等于0**, n元齐次线性方程组$A_(m*n)x=0$有非0解的充必条件是系数矩阵的秩$Rank(A)<n$\n2)**b不等于0**,非齐次线性方程组$Ax=b$有解的充必条件是系数矩阵的秩等与增广矩阵的秩； $R(A)=R(B)=n$，则有唯一解，$R(A)=R(B)<n$则有无穷多解\n\n\n2. 高斯分布是什么？它的一维形式是什么样子？它的高维形式是什么样子？\n又名正态分布，由于中心极限定理，任何分布的抽样分布样本足够大时，其渐进分布都是高斯分布。\n\n\n\n### 初识SLAM\n\n目标：\n- 理解VSLAM各个模块\n- 搭建环境\n- 掌握基本CMAKE\n\n#### 传感器\n传感器类型：机器人自身和环境上\n自身传感：mono, stereo, rgbd, lidar， event camera, imu, 编码器及新式传感器\n\n一些相关术语：\n- **尺度不确定性**：2d的rgb图像没有真实尺度信息\n- 运动motion： 相机外参R， t\n- 结构structure: 物体的远近和大小\n\n#### 经典VSLAM框架\n![](/images/02_25_01.png)\n流程：\n- 1.传感器信息读取融合：将所有观测数据正确读入并预处理\n- 2.视觉里程计VO：估算相邻图像间的运动以及局部地图的样子，又称前端\n- 3.后端优化：接受不同时刻VO的相机位姿，以及回环检测的信息，一并优化获得全局一致的轨迹和地图\n- 4.回环检测：判断机器人是否曾经到达过先前的位置，如果有则放到步骤3优化\n- 5.建图：根据估计的轨迹，建立与任务要求对应的地图\n\n总体而言，如果把工作环境限定在静态、刚体以及光照变化不明显、没有人为干扰的场景，那么VSLAM系统相当成熟了\n\n为什么叫**里程计**？ 因为它和实际的里程计一样，只计算相邻时刻的运动，而和再之前过去的信息没有关联。所以属于短时记忆的方案\n因此也引起**累计漂移**：随着相邻估计的误差叠加，后续的误差会更大和不可控\n因而引入**后端优化**和**回环检测**的技术来校正\n\n后端主要处理SLAM过程的**噪声**问题，具体是如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大（Maximum-A-Posteriori),这里包括自身轨迹和地图。主要涉及滤波和非线性优化的算法。\n\n回环检测主要让机器人具有识别曾到达过场景的能力，具体实施可以是二维码图片或者图像间的相似性。\n\n最后建图包括度量和拓扑地图：2D栅格地图、2D拓扑地图、3D点云地图、3D网格地图；\n度量地图：强调精确表示地图中物体的位置关系\n拓扑地图：强调地图元素之间的关系，考虑节点间的连通性\n\n#### SLAM数学建模\n主要分为运动方程和观测方程，根据这两个方程是否线性以及噪声是否服从高斯分布进行分类，主要信息是位姿以及观测的路标\n\n#### CMAKE的使用\n``` cpp\nadd_executable(exe main.cpp) # 编译执行文件\n\nadd_library(lib lib.cpp)  # 编译静态库 .a\n\nadd_library(lib_shared SHARED lib.cpp)  # 编译动态库 .so\n\nadd_executable(useLib useLib.cpp)   # cpp include动态库的头文件调用\ntarget_link_libraries(useLib lib_shared)  # 将库文件链接到编译后的文件，最后链接生成最后的执行文件useLib\n\n\n\n# 将库hello和共享库hello_shared安装到/usr/local/lib下\nINSTALL(TARGETS hello hello_shared\nLIBRARY DESTINATION lib\nARCHIVE DESTINATION lib)\n\n# 将库的头文件安装到/usr/local/include下\nINSTALL(FILES libHelloSLAM.h DESTINATION include/libHelloSLAM)\n\n\n# 另外目录的项目调用，引入头文件\ninclude_directories(/usr/local/include/libHelloSLAM)\n\n# 链接库文件\ntarget_link_libraries(useHello /usr/local/lib/libhello_shared.so)\n\n```\n库文件是压缩包，包含编译好的二进制函数，但不知道函数是什么样和调用形式，所以需要结合**头文件**使用。只有拿到头文件和库文件才可以调用库。\n\n\n\n\n","source":"_posts/SLAMBOOK2/SLAMBOOK_1_2.md","raw":"---\ntitle: SLAM十四讲_一预备及初识\ncategories:\n  - SLAM十四讲\nmathjax: true\ndate: 2022-01-07 16:52:46\ntags: SLAMBOOK\n---\n\n### 预备知识\n\n#### SLAM：Simultaneous Localization and Mapping\n同步定位及建图：搭载特定传感器的主体，在没有环境先验信息情况下，在运动过程中建立环境模型，同时估计自己位姿的过程。根据传感器分为深度相机，RGB相机和激光。不同传感器特点不一样，应用环境以及遇到的难点不同。本书主要是视觉SLAM：围绕RGB相机，也会引入Depth相机。\n\nCV之初，人们想象有一天计算机将和人一样，通过眼睛去观察世界，理解周围的物体，探索未知的环境--这是一个美妙而又充满浪漫色彩的梦想，让无数科研人员日夜为之奋斗。\n\nSLAM相关的应用点：室内扫地机，移动机器人；户外的自动驾驶以及空中无人机；乃至虚拟现实和增强现实设备。\n\nSLAM研究的三十年，将主干分为四个大模块：\n- 前端里程计（求pose)：估计相邻图像相机的运动以及局部地图样子\n- 后端优化（优化pose)：根据多个时刻的相机位姿以及回环检测进行优化，得到全局一致的轨迹和地图\n- 建图：根据轨迹建立与任务要求对应的地图\n- 回环检测（优化全局pose)：判断是否到达过先前的位置\n\n1.定位问题：我在什么地方？\n2.建图问题：周围环境是什么样？\n方法很多：室内可以在地板铺设导引线，在墙上贴二维码，在桌子放置无线电定位设备；室外可以安装定位设备（GPS）等\n传感器主要两类：1.安装在本体上，如轮式编码器，IMU，相机，激光； 2.安装在环境上，上述提到的\n\n#### 不同传感器的特性以及SLAM的影响\n单目：图像是三维空间的二维投影，必须移动(Motion)才能估计结构(Structure).motion后只能根据视差估计相对的值，具有尺度不确定性。\n问题：平移才能计算深度以及无法确定真实尺度，导致单目SLAM困难多多，但是成本较低。\n\n双目：利于基线解决尺度不确定性，但视差的匹配依然效率不高，需要引入GPU和FPGA加速才能实时输出整张图的距离信息。双目测量距离受基线大小影响，所以无人车上一般搭载很大的家伙\n问题：对于SLAM而言，传感器的配置与标定较为复杂。\n\nRGB-D相机：通过TOF物理测量手段直接获得全图的深度信息\n问题：低端TOF测量范围窄，噪声大，视野小；普遍存在日光干扰、无法测量投射材质以及高反高吸收率材质；所以主要用于室内应用，室外难以使用。\n\n目前而言，如果工作环境理想：静态、刚体、光照变化小、没有人为干扰的场景，SLAM是相当成熟。\n\n\n#### 整书结构\n1.数学基础\n  - SLAM概述\n  - 三维空间运动\n  - 李群和李代数\n  - 针孔模型及opencv\n  - 非线性优化\n2.技术实践\n  - 特征点法的视觉里程计\n  - 直接法的视觉里程计\n  - 里程计实践\n  - 后端优化BA\n  - 后端优化位姿图\n  - 回环检测\n  - 地图构建\n  - SLAM的未来\n\n基础知识须知：\n- 高等数学、线性代数、概率论\n- C++语言和Linux基础\n\n#### 课后习题\n1.有线性方程 Ax = b，当我们知道 A, b，想要求解 x 时，如何求解？这对 A 和 b 需要哪些条件？提示：从 A 的维度和秩角度来分析\n1)**b等于0**, n元齐次线性方程组$A_(m*n)x=0$有非0解的充必条件是系数矩阵的秩$Rank(A)<n$\n2)**b不等于0**,非齐次线性方程组$Ax=b$有解的充必条件是系数矩阵的秩等与增广矩阵的秩； $R(A)=R(B)=n$，则有唯一解，$R(A)=R(B)<n$则有无穷多解\n\n\n2. 高斯分布是什么？它的一维形式是什么样子？它的高维形式是什么样子？\n又名正态分布，由于中心极限定理，任何分布的抽样分布样本足够大时，其渐进分布都是高斯分布。\n\n\n\n### 初识SLAM\n\n目标：\n- 理解VSLAM各个模块\n- 搭建环境\n- 掌握基本CMAKE\n\n#### 传感器\n传感器类型：机器人自身和环境上\n自身传感：mono, stereo, rgbd, lidar， event camera, imu, 编码器及新式传感器\n\n一些相关术语：\n- **尺度不确定性**：2d的rgb图像没有真实尺度信息\n- 运动motion： 相机外参R， t\n- 结构structure: 物体的远近和大小\n\n#### 经典VSLAM框架\n![](/images/02_25_01.png)\n流程：\n- 1.传感器信息读取融合：将所有观测数据正确读入并预处理\n- 2.视觉里程计VO：估算相邻图像间的运动以及局部地图的样子，又称前端\n- 3.后端优化：接受不同时刻VO的相机位姿，以及回环检测的信息，一并优化获得全局一致的轨迹和地图\n- 4.回环检测：判断机器人是否曾经到达过先前的位置，如果有则放到步骤3优化\n- 5.建图：根据估计的轨迹，建立与任务要求对应的地图\n\n总体而言，如果把工作环境限定在静态、刚体以及光照变化不明显、没有人为干扰的场景，那么VSLAM系统相当成熟了\n\n为什么叫**里程计**？ 因为它和实际的里程计一样，只计算相邻时刻的运动，而和再之前过去的信息没有关联。所以属于短时记忆的方案\n因此也引起**累计漂移**：随着相邻估计的误差叠加，后续的误差会更大和不可控\n因而引入**后端优化**和**回环检测**的技术来校正\n\n后端主要处理SLAM过程的**噪声**问题，具体是如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大（Maximum-A-Posteriori),这里包括自身轨迹和地图。主要涉及滤波和非线性优化的算法。\n\n回环检测主要让机器人具有识别曾到达过场景的能力，具体实施可以是二维码图片或者图像间的相似性。\n\n最后建图包括度量和拓扑地图：2D栅格地图、2D拓扑地图、3D点云地图、3D网格地图；\n度量地图：强调精确表示地图中物体的位置关系\n拓扑地图：强调地图元素之间的关系，考虑节点间的连通性\n\n#### SLAM数学建模\n主要分为运动方程和观测方程，根据这两个方程是否线性以及噪声是否服从高斯分布进行分类，主要信息是位姿以及观测的路标\n\n#### CMAKE的使用\n``` cpp\nadd_executable(exe main.cpp) # 编译执行文件\n\nadd_library(lib lib.cpp)  # 编译静态库 .a\n\nadd_library(lib_shared SHARED lib.cpp)  # 编译动态库 .so\n\nadd_executable(useLib useLib.cpp)   # cpp include动态库的头文件调用\ntarget_link_libraries(useLib lib_shared)  # 将库文件链接到编译后的文件，最后链接生成最后的执行文件useLib\n\n\n\n# 将库hello和共享库hello_shared安装到/usr/local/lib下\nINSTALL(TARGETS hello hello_shared\nLIBRARY DESTINATION lib\nARCHIVE DESTINATION lib)\n\n# 将库的头文件安装到/usr/local/include下\nINSTALL(FILES libHelloSLAM.h DESTINATION include/libHelloSLAM)\n\n\n# 另外目录的项目调用，引入头文件\ninclude_directories(/usr/local/include/libHelloSLAM)\n\n# 链接库文件\ntarget_link_libraries(useHello /usr/local/lib/libhello_shared.so)\n\n```\n库文件是压缩包，包含编译好的二进制函数，但不知道函数是什么样和调用形式，所以需要结合**头文件**使用。只有拿到头文件和库文件才可以调用库。\n\n\n\n\n","slug":"SLAMBOOK2/SLAMBOOK_1_2","published":1,"updated":"2022-02-25T08:33:23.657Z","_id":"cl021zqbq000105zdf7sf7ewa","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><h4 id=\"SLAM：Simultaneous-Localization-and-Mapping\"><a href=\"#SLAM：Simultaneous-Localization-and-Mapping\" class=\"headerlink\" title=\"SLAM：Simultaneous Localization and Mapping\"></a>SLAM：Simultaneous Localization and Mapping</h4><p>同步定位及建图：搭载特定传感器的主体，在没有环境先验信息情况下，在运动过程中建立环境模型，同时估计自己位姿的过程。根据传感器分为深度相机，RGB相机和激光。不同传感器特点不一样，应用环境以及遇到的难点不同。本书主要是视觉SLAM：围绕RGB相机，也会引入Depth相机。</p>\n<p>CV之初，人们想象有一天计算机将和人一样，通过眼睛去观察世界，理解周围的物体，探索未知的环境–这是一个美妙而又充满浪漫色彩的梦想，让无数科研人员日夜为之奋斗。</p>\n<p>SLAM相关的应用点：室内扫地机，移动机器人；户外的自动驾驶以及空中无人机；乃至虚拟现实和增强现实设备。</p>\n<p>SLAM研究的三十年，将主干分为四个大模块：</p>\n<ul>\n<li>前端里程计（求pose)：估计相邻图像相机的运动以及局部地图样子</li>\n<li>后端优化（优化pose)：根据多个时刻的相机位姿以及回环检测进行优化，得到全局一致的轨迹和地图</li>\n<li>建图：根据轨迹建立与任务要求对应的地图</li>\n<li>回环检测（优化全局pose)：判断是否到达过先前的位置</li>\n</ul>\n<p>1.定位问题：我在什么地方？<br>2.建图问题：周围环境是什么样？<br>方法很多：室内可以在地板铺设导引线，在墙上贴二维码，在桌子放置无线电定位设备；室外可以安装定位设备（GPS）等<br>传感器主要两类：1.安装在本体上，如轮式编码器，IMU，相机，激光； 2.安装在环境上，上述提到的</p>\n<h4 id=\"不同传感器的特性以及SLAM的影响\"><a href=\"#不同传感器的特性以及SLAM的影响\" class=\"headerlink\" title=\"不同传感器的特性以及SLAM的影响\"></a>不同传感器的特性以及SLAM的影响</h4><p>单目：图像是三维空间的二维投影，必须移动(Motion)才能估计结构(Structure).motion后只能根据视差估计相对的值，具有尺度不确定性。<br>问题：平移才能计算深度以及无法确定真实尺度，导致单目SLAM困难多多，但是成本较低。</p>\n<p>双目：利于基线解决尺度不确定性，但视差的匹配依然效率不高，需要引入GPU和FPGA加速才能实时输出整张图的距离信息。双目测量距离受基线大小影响，所以无人车上一般搭载很大的家伙<br>问题：对于SLAM而言，传感器的配置与标定较为复杂。</p>\n<p>RGB-D相机：通过TOF物理测量手段直接获得全图的深度信息<br>问题：低端TOF测量范围窄，噪声大，视野小；普遍存在日光干扰、无法测量投射材质以及高反高吸收率材质；所以主要用于室内应用，室外难以使用。</p>\n<p>目前而言，如果工作环境理想：静态、刚体、光照变化小、没有人为干扰的场景，SLAM是相当成熟。</p>\n<h4 id=\"整书结构\"><a href=\"#整书结构\" class=\"headerlink\" title=\"整书结构\"></a>整书结构</h4><p>1.数学基础</p>\n<ul>\n<li>SLAM概述</li>\n<li>三维空间运动</li>\n<li>李群和李代数</li>\n<li>针孔模型及opencv</li>\n<li>非线性优化</li>\n</ul>\n<p>2.技术实践</p>\n<ul>\n<li>特征点法的视觉里程计</li>\n<li>直接法的视觉里程计</li>\n<li>里程计实践</li>\n<li>后端优化BA</li>\n<li>后端优化位姿图</li>\n<li>回环检测</li>\n<li>地图构建</li>\n<li>SLAM的未来</li>\n</ul>\n<p>基础知识须知：</p>\n<ul>\n<li>高等数学、线性代数、概率论</li>\n<li>C++语言和Linux基础</li>\n</ul>\n<h4 id=\"课后习题\"><a href=\"#课后习题\" class=\"headerlink\" title=\"课后习题\"></a>课后习题</h4><p>1.有线性方程 Ax = b，当我们知道 A, b，想要求解 x 时，如何求解？这对 A 和 b 需要哪些条件？提示：从 A 的维度和秩角度来分析<br>1)<strong>b等于0</strong>, n元齐次线性方程组$A_(m*n)x=0$有非0解的充必条件是系数矩阵的秩$Rank(A)&lt;n$<br>2)<strong>b不等于0</strong>,非齐次线性方程组$Ax=b$有解的充必条件是系数矩阵的秩等与增广矩阵的秩； $R(A)=R(B)=n$，则有唯一解，$R(A)=R(B)&lt;n$则有无穷多解</p>\n<ol start=\"2\">\n<li>高斯分布是什么？它的一维形式是什么样子？它的高维形式是什么样子？<br>又名正态分布，由于中心极限定理，任何分布的抽样分布样本足够大时，其渐进分布都是高斯分布。</li>\n</ol>\n<h3 id=\"初识SLAM\"><a href=\"#初识SLAM\" class=\"headerlink\" title=\"初识SLAM\"></a>初识SLAM</h3><p>目标：</p>\n<ul>\n<li>理解VSLAM各个模块</li>\n<li>搭建环境</li>\n<li>掌握基本CMAKE</li>\n</ul>\n<h4 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h4><p>传感器类型：机器人自身和环境上<br>自身传感：mono, stereo, rgbd, lidar， event camera, imu, 编码器及新式传感器</p>\n<p>一些相关术语：</p>\n<ul>\n<li><strong>尺度不确定性</strong>：2d的rgb图像没有真实尺度信息</li>\n<li>运动motion： 相机外参R， t</li>\n<li>结构structure: 物体的远近和大小</li>\n</ul>\n<h4 id=\"经典VSLAM框架\"><a href=\"#经典VSLAM框架\" class=\"headerlink\" title=\"经典VSLAM框架\"></a>经典VSLAM框架</h4><p><img src=\"/images/02_25_01.png\"><br>流程：</p>\n<ul>\n<li>1.传感器信息读取融合：将所有观测数据正确读入并预处理</li>\n<li>2.视觉里程计VO：估算相邻图像间的运动以及局部地图的样子，又称前端</li>\n<li>3.后端优化：接受不同时刻VO的相机位姿，以及回环检测的信息，一并优化获得全局一致的轨迹和地图</li>\n<li>4.回环检测：判断机器人是否曾经到达过先前的位置，如果有则放到步骤3优化</li>\n<li>5.建图：根据估计的轨迹，建立与任务要求对应的地图</li>\n</ul>\n<p>总体而言，如果把工作环境限定在静态、刚体以及光照变化不明显、没有人为干扰的场景，那么VSLAM系统相当成熟了</p>\n<p>为什么叫<strong>里程计</strong>？ 因为它和实际的里程计一样，只计算相邻时刻的运动，而和再之前过去的信息没有关联。所以属于短时记忆的方案<br>因此也引起<strong>累计漂移</strong>：随着相邻估计的误差叠加，后续的误差会更大和不可控<br>因而引入<strong>后端优化</strong>和<strong>回环检测</strong>的技术来校正</p>\n<p>后端主要处理SLAM过程的<strong>噪声</strong>问题，具体是如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大（Maximum-A-Posteriori),这里包括自身轨迹和地图。主要涉及滤波和非线性优化的算法。</p>\n<p>回环检测主要让机器人具有识别曾到达过场景的能力，具体实施可以是二维码图片或者图像间的相似性。</p>\n<p>最后建图包括度量和拓扑地图：2D栅格地图、2D拓扑地图、3D点云地图、3D网格地图；<br>度量地图：强调精确表示地图中物体的位置关系<br>拓扑地图：强调地图元素之间的关系，考虑节点间的连通性</p>\n<h4 id=\"SLAM数学建模\"><a href=\"#SLAM数学建模\" class=\"headerlink\" title=\"SLAM数学建模\"></a>SLAM数学建模</h4><p>主要分为运动方程和观测方程，根据这两个方程是否线性以及噪声是否服从高斯分布进行分类，主要信息是位姿以及观测的路标</p>\n<h4 id=\"CMAKE的使用\"><a href=\"#CMAKE的使用\" class=\"headerlink\" title=\"CMAKE的使用\"></a>CMAKE的使用</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">add_executable</span>(exe main.cpp) # 编译执行文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">add_library</span>(lib lib.cpp)  # 编译静态库 .<span class=\"function\">a</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_library</span><span class=\"params\">(lib_shared SHARED lib.cpp)</span>  # 编译动态库 .so</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(useLib useLib.cpp)</span>   <span class=\"meta\"># cpp <span class=\"meta-keyword\">include</span>动态库的头文件调用</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(useLib lib_shared)</span>  # 将库文件链接到编译后的文件，最后链接生成最后的执行文件useLib</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 将库hello和共享库hello_shared安装到/usr/local/lib下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">INSTALL</span><span class=\"params\">(TARGETS hello hello_shared</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">LIBRARY DESTINATION lib</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">ARCHIVE DESTINATION lib)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 将库的头文件安装到/usr/local/include下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">INSTALL</span><span class=\"params\">(FILES libHelloSLAM.h DESTINATION include/libHelloSLAM)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 另外目录的项目调用，引入头文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">include_directories</span><span class=\"params\">(/usr/local/include/libHelloSLAM)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 链接库文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(useHello /usr/local/lib/libhello_shared.so)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n<p>库文件是压缩包，包含编译好的二进制函数，但不知道函数是什么样和调用形式，所以需要结合<strong>头文件</strong>使用。只有拿到头文件和库文件才可以调用库。</p>\n","site":{"data":{}},"length":2919,"excerpt":"","more":"<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><h4 id=\"SLAM：Simultaneous-Localization-and-Mapping\"><a href=\"#SLAM：Simultaneous-Localization-and-Mapping\" class=\"headerlink\" title=\"SLAM：Simultaneous Localization and Mapping\"></a>SLAM：Simultaneous Localization and Mapping</h4><p>同步定位及建图：搭载特定传感器的主体，在没有环境先验信息情况下，在运动过程中建立环境模型，同时估计自己位姿的过程。根据传感器分为深度相机，RGB相机和激光。不同传感器特点不一样，应用环境以及遇到的难点不同。本书主要是视觉SLAM：围绕RGB相机，也会引入Depth相机。</p>\n<p>CV之初，人们想象有一天计算机将和人一样，通过眼睛去观察世界，理解周围的物体，探索未知的环境–这是一个美妙而又充满浪漫色彩的梦想，让无数科研人员日夜为之奋斗。</p>\n<p>SLAM相关的应用点：室内扫地机，移动机器人；户外的自动驾驶以及空中无人机；乃至虚拟现实和增强现实设备。</p>\n<p>SLAM研究的三十年，将主干分为四个大模块：</p>\n<ul>\n<li>前端里程计（求pose)：估计相邻图像相机的运动以及局部地图样子</li>\n<li>后端优化（优化pose)：根据多个时刻的相机位姿以及回环检测进行优化，得到全局一致的轨迹和地图</li>\n<li>建图：根据轨迹建立与任务要求对应的地图</li>\n<li>回环检测（优化全局pose)：判断是否到达过先前的位置</li>\n</ul>\n<p>1.定位问题：我在什么地方？<br>2.建图问题：周围环境是什么样？<br>方法很多：室内可以在地板铺设导引线，在墙上贴二维码，在桌子放置无线电定位设备；室外可以安装定位设备（GPS）等<br>传感器主要两类：1.安装在本体上，如轮式编码器，IMU，相机，激光； 2.安装在环境上，上述提到的</p>\n<h4 id=\"不同传感器的特性以及SLAM的影响\"><a href=\"#不同传感器的特性以及SLAM的影响\" class=\"headerlink\" title=\"不同传感器的特性以及SLAM的影响\"></a>不同传感器的特性以及SLAM的影响</h4><p>单目：图像是三维空间的二维投影，必须移动(Motion)才能估计结构(Structure).motion后只能根据视差估计相对的值，具有尺度不确定性。<br>问题：平移才能计算深度以及无法确定真实尺度，导致单目SLAM困难多多，但是成本较低。</p>\n<p>双目：利于基线解决尺度不确定性，但视差的匹配依然效率不高，需要引入GPU和FPGA加速才能实时输出整张图的距离信息。双目测量距离受基线大小影响，所以无人车上一般搭载很大的家伙<br>问题：对于SLAM而言，传感器的配置与标定较为复杂。</p>\n<p>RGB-D相机：通过TOF物理测量手段直接获得全图的深度信息<br>问题：低端TOF测量范围窄，噪声大，视野小；普遍存在日光干扰、无法测量投射材质以及高反高吸收率材质；所以主要用于室内应用，室外难以使用。</p>\n<p>目前而言，如果工作环境理想：静态、刚体、光照变化小、没有人为干扰的场景，SLAM是相当成熟。</p>\n<h4 id=\"整书结构\"><a href=\"#整书结构\" class=\"headerlink\" title=\"整书结构\"></a>整书结构</h4><p>1.数学基础</p>\n<ul>\n<li>SLAM概述</li>\n<li>三维空间运动</li>\n<li>李群和李代数</li>\n<li>针孔模型及opencv</li>\n<li>非线性优化</li>\n</ul>\n<p>2.技术实践</p>\n<ul>\n<li>特征点法的视觉里程计</li>\n<li>直接法的视觉里程计</li>\n<li>里程计实践</li>\n<li>后端优化BA</li>\n<li>后端优化位姿图</li>\n<li>回环检测</li>\n<li>地图构建</li>\n<li>SLAM的未来</li>\n</ul>\n<p>基础知识须知：</p>\n<ul>\n<li>高等数学、线性代数、概率论</li>\n<li>C++语言和Linux基础</li>\n</ul>\n<h4 id=\"课后习题\"><a href=\"#课后习题\" class=\"headerlink\" title=\"课后习题\"></a>课后习题</h4><p>1.有线性方程 Ax = b，当我们知道 A, b，想要求解 x 时，如何求解？这对 A 和 b 需要哪些条件？提示：从 A 的维度和秩角度来分析<br>1)<strong>b等于0</strong>, n元齐次线性方程组$A_(m*n)x=0$有非0解的充必条件是系数矩阵的秩$Rank(A)&lt;n$<br>2)<strong>b不等于0</strong>,非齐次线性方程组$Ax=b$有解的充必条件是系数矩阵的秩等与增广矩阵的秩； $R(A)=R(B)=n$，则有唯一解，$R(A)=R(B)&lt;n$则有无穷多解</p>\n<ol start=\"2\">\n<li>高斯分布是什么？它的一维形式是什么样子？它的高维形式是什么样子？<br>又名正态分布，由于中心极限定理，任何分布的抽样分布样本足够大时，其渐进分布都是高斯分布。</li>\n</ol>\n<h3 id=\"初识SLAM\"><a href=\"#初识SLAM\" class=\"headerlink\" title=\"初识SLAM\"></a>初识SLAM</h3><p>目标：</p>\n<ul>\n<li>理解VSLAM各个模块</li>\n<li>搭建环境</li>\n<li>掌握基本CMAKE</li>\n</ul>\n<h4 id=\"传感器\"><a href=\"#传感器\" class=\"headerlink\" title=\"传感器\"></a>传感器</h4><p>传感器类型：机器人自身和环境上<br>自身传感：mono, stereo, rgbd, lidar， event camera, imu, 编码器及新式传感器</p>\n<p>一些相关术语：</p>\n<ul>\n<li><strong>尺度不确定性</strong>：2d的rgb图像没有真实尺度信息</li>\n<li>运动motion： 相机外参R， t</li>\n<li>结构structure: 物体的远近和大小</li>\n</ul>\n<h4 id=\"经典VSLAM框架\"><a href=\"#经典VSLAM框架\" class=\"headerlink\" title=\"经典VSLAM框架\"></a>经典VSLAM框架</h4><p><img src=\"/images/02_25_01.png\"><br>流程：</p>\n<ul>\n<li>1.传感器信息读取融合：将所有观测数据正确读入并预处理</li>\n<li>2.视觉里程计VO：估算相邻图像间的运动以及局部地图的样子，又称前端</li>\n<li>3.后端优化：接受不同时刻VO的相机位姿，以及回环检测的信息，一并优化获得全局一致的轨迹和地图</li>\n<li>4.回环检测：判断机器人是否曾经到达过先前的位置，如果有则放到步骤3优化</li>\n<li>5.建图：根据估计的轨迹，建立与任务要求对应的地图</li>\n</ul>\n<p>总体而言，如果把工作环境限定在静态、刚体以及光照变化不明显、没有人为干扰的场景，那么VSLAM系统相当成熟了</p>\n<p>为什么叫<strong>里程计</strong>？ 因为它和实际的里程计一样，只计算相邻时刻的运动，而和再之前过去的信息没有关联。所以属于短时记忆的方案<br>因此也引起<strong>累计漂移</strong>：随着相邻估计的误差叠加，后续的误差会更大和不可控<br>因而引入<strong>后端优化</strong>和<strong>回环检测</strong>的技术来校正</p>\n<p>后端主要处理SLAM过程的<strong>噪声</strong>问题，具体是如何从带有噪声的数据中估计整个系统的状态，以及这个状态估计的不确定性有多大（Maximum-A-Posteriori),这里包括自身轨迹和地图。主要涉及滤波和非线性优化的算法。</p>\n<p>回环检测主要让机器人具有识别曾到达过场景的能力，具体实施可以是二维码图片或者图像间的相似性。</p>\n<p>最后建图包括度量和拓扑地图：2D栅格地图、2D拓扑地图、3D点云地图、3D网格地图；<br>度量地图：强调精确表示地图中物体的位置关系<br>拓扑地图：强调地图元素之间的关系，考虑节点间的连通性</p>\n<h4 id=\"SLAM数学建模\"><a href=\"#SLAM数学建模\" class=\"headerlink\" title=\"SLAM数学建模\"></a>SLAM数学建模</h4><p>主要分为运动方程和观测方程，根据这两个方程是否线性以及噪声是否服从高斯分布进行分类，主要信息是位姿以及观测的路标</p>\n<h4 id=\"CMAKE的使用\"><a href=\"#CMAKE的使用\" class=\"headerlink\" title=\"CMAKE的使用\"></a>CMAKE的使用</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">add_executable</span>(exe main.cpp) # 编译执行文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">add_library</span>(lib lib.cpp)  # 编译静态库 .<span class=\"function\">a</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_library</span><span class=\"params\">(lib_shared SHARED lib.cpp)</span>  # 编译动态库 .so</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_executable</span><span class=\"params\">(useLib useLib.cpp)</span>   <span class=\"meta\"># cpp <span class=\"meta-keyword\">include</span>动态库的头文件调用</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(useLib lib_shared)</span>  # 将库文件链接到编译后的文件，最后链接生成最后的执行文件useLib</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 将库hello和共享库hello_shared安装到/usr/local/lib下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">INSTALL</span><span class=\"params\">(TARGETS hello hello_shared</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">LIBRARY DESTINATION lib</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">ARCHIVE DESTINATION lib)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 将库的头文件安装到/usr/local/include下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">INSTALL</span><span class=\"params\">(FILES libHelloSLAM.h DESTINATION include/libHelloSLAM)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 另外目录的项目调用，引入头文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">include_directories</span><span class=\"params\">(/usr/local/include/libHelloSLAM)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"># 链接库文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">target_link_libraries</span><span class=\"params\">(useHello /usr/local/lib/libhello_shared.so)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n<p>库文件是压缩包，包含编译好的二进制函数，但不知道函数是什么样和调用形式，所以需要结合<strong>头文件</strong>使用。只有拿到头文件和库文件才可以调用库。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl00tgauq000128zd9dccd8z4","category_id":"cl00tgauu000428zd8da30xiy","_id":"cl00tgav0000f28zd389fhk1f"},{"post_id":"cl00tgaut000328zd0a9ubklc","category_id":"cl00tgauy000a28zdbxqc7ffe","_id":"cl00tgav2000l28zd70o9fzmr"},{"post_id":"cl00tgauw000728zdc47q3qz5","category_id":"cl00tgav0000g28zda3no14bw","_id":"cl00tgav4000r28zd23h8fexp"},{"post_id":"cl00tgauy000928zdging0cqw","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgav9001528zd0e5y70ul"},{"post_id":"cl00tgav6000y28zd6j8zaiw5","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgava001828zd703x7jew"},{"post_id":"cl00tgav8001228zd3oj9fvrv","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavc001c28zdf15k21nn"},{"post_id":"cl00tgauz000d28zddlil2np5","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavd001f28zdfbhscppq"},{"post_id":"cl00tgav0000e28zdavgtdiz9","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgave001j28zdd7gxc8yo"},{"post_id":"cl00tgav0000i28zd1get5nwh","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavf001p28zd4ii85hxs"},{"post_id":"cl00tgav1000k28zdgq4l8z6j","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavh001v28zd3ugicizh"},{"post_id":"cl00tgav2000o28zdg4vcab2z","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavi002128zd8bjj87ru"},{"post_id":"cl00tgav3000q28zd3iwza2ko","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavk002728zdfujph3aj"},{"post_id":"cl00tgav4000u28zd7q0c6n9p","category_id":"cl00tgav4000s28zd5u1n6ecx","_id":"cl00tgavl002c28zd85wkdjlk"},{"post_id":"cl00tgav5000w28zde9z98urg","category_id":"cl00tgavk002628zd66b8aq1o","_id":"cl00tgavn002i28zdcozk95d8"},{"post_id":"cl00tgav9001328zd1gtvdt83","category_id":"cl00tgavl002d28zdhfhdhpuu","_id":"cl00tgavo002o28zd9rpvdc0o"},{"post_id":"cl00tgava001728zd1cnx0x4h","category_id":"cl00tgavn002j28zd8fbdeoyv","_id":"cl00tgavp002s28zd2twpdtku"},{"post_id":"cl00tgavb001a28zd4qwmbhmr","category_id":"cl00tgavo002p28zdewxu0pxs","_id":"cl00tgavq002w28zddboycinb"},{"post_id":"cl00tgavd001h28zdeey68058","category_id":"cl00tgavq002x28zd9wkfduu3","_id":"cl00tgavr003428zdcmun7kvm"},{"post_id":"cl00tgave001l28zd2plla0rj","category_id":"cl00tgavq003128zdebnnaywm","_id":"cl00tgavs003828zdbytka94s"},{"post_id":"cl00tgavf001n28zd4fak5ktz","category_id":"cl00tgavo002p28zdewxu0pxs","_id":"cl00tgavs003c28zdabk45iiu"},{"post_id":"cl00tgavg001r28zd9n1071xt","category_id":"cl00tgavq002x28zd9wkfduu3","_id":"cl00tgavt003g28zdg2ju6rjq"},{"post_id":"cl00tgavg001t28zd7wd07exd","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavu003l28zd120p91pc"},{"post_id":"cl00tgavh001x28zd8vvl391u","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavv003p28zdff508xtz"},{"post_id":"cl00tgavi001z28zd7yg3al8a","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavv003t28zd2tli2rar"},{"post_id":"cl00tgavj002328zd2itf6z6h","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavw003x28zdbkr40kr1"},{"post_id":"cl00tgavk002528zdb1tufb6k","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavx004128zdb0k8ft42"},{"post_id":"cl00tgavk002928zd18vogmca","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavx004528zd03avgn4b"},{"post_id":"cl00tgavl002b28zd7lvq0v0e","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavy004928zddmdu6fa7"},{"post_id":"cl00tgavm002f28zd561oftij","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavy004d28zde30hdeve"},{"post_id":"cl00tgavm002h28zdahwl9wiq","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgavz004h28zdc41b5pjr"},{"post_id":"cl00tgavn002l28zdgctog5ek","category_id":"cl00tgavs003b28zdas5q7s77","_id":"cl00tgaw0004k28zd4msnhut2"},{"post_id":"cl00tgavo002n28zd13o3528k","category_id":"cl00tgavz004g28zd3c72fdrb","_id":"cl00tgaw0004n28zdbk40hofe"},{"post_id":"cl00tgavc001e28zd7rdk5r99","category_id":"cl00tgavo002p28zdewxu0pxs","_id":"cl021n7ln000005zdfo3n6w0s"},{"post_id":"cl021zqbq000105zdf7sf7ewa","category_id":"cl00tgav2000m28zdgsc79p2k","_id":"cl021zqbr000305zdghvn8a6t"}],"PostTag":[{"post_id":"cl00tgauq000128zd9dccd8z4","tag_id":"cl00tgauv000528zd1ejw93vf","_id":"cl00tgauz000c28zd7dcq6kco"},{"post_id":"cl00tgaut000328zd0a9ubklc","tag_id":"cl00tgauy000b28zddxsp8vvv","_id":"cl00tgav1000j28zdexcvgin5"},{"post_id":"cl00tgauw000728zdc47q3qz5","tag_id":"cl00tgav0000h28zdebex61w1","_id":"cl00tgav3000p28zd55ph91nw"},{"post_id":"cl00tgauy000928zdging0cqw","tag_id":"cl00tgav4000t28zdc5yw7tvu","_id":"cl00tgav8001128zd4fioekpl"},{"post_id":"cl00tgauz000d28zddlil2np5","tag_id":"cl00tgav7001028zdcm1q0idb","_id":"cl00tgava001928zdflv944bu"},{"post_id":"cl00tgav0000e28zdavgtdiz9","tag_id":"cl00tgava001628zdc8oagirb","_id":"cl00tgavd001g28zd04d06rmp"},{"post_id":"cl00tgav0000i28zd1get5nwh","tag_id":"cl00tgav7001028zdcm1q0idb","_id":"cl00tgavf001m28zdbs6256vp"},{"post_id":"cl00tgav1000k28zdgq4l8z6j","tag_id":"cl00tgav7001028zdcm1q0idb","_id":"cl00tgavg001s28zd7dspey3l"},{"post_id":"cl00tgav2000o28zdg4vcab2z","tag_id":"cl00tgava001628zdc8oagirb","_id":"cl00tgavi001y28zdch4z419e"},{"post_id":"cl00tgav3000q28zd3iwza2ko","tag_id":"cl00tgav7001028zdcm1q0idb","_id":"cl00tgavj002428zdfvsqbf4e"},{"post_id":"cl00tgav4000u28zd7q0c6n9p","tag_id":"cl00tgav7001028zdcm1q0idb","_id":"cl00tgavl002a28zd9fv4hdd3"},{"post_id":"cl00tgav5000w28zde9z98urg","tag_id":"cl00tgavk002828zdafetgdxi","_id":"cl00tgavm002g28zd8m9g1wlr"},{"post_id":"cl00tgav6000y28zd6j8zaiw5","tag_id":"cl00tgava001628zdc8oagirb","_id":"cl00tgavo002m28zd48al26vi"},{"post_id":"cl00tgav8001228zd3oj9fvrv","tag_id":"cl00tgavn002k28zdhdst2vrj","_id":"cl00tgavp002r28zdh1jg2ztv"},{"post_id":"cl00tgav9001328zd1gtvdt83","tag_id":"cl00tgavp002q28zdauaj1m1c","_id":"cl00tgavq002v28zdbj0tbt9x"},{"post_id":"cl00tgava001728zd1cnx0x4h","tag_id":"cl00tgavp002u28zdf5b71w8k","_id":"cl00tgavq002z28zd2gko06lc"},{"post_id":"cl00tgavb001a28zd4qwmbhmr","tag_id":"cl00tgavq002y28zd1ipp0myp","_id":"cl00tgavr003328zd5uj3eswt"},{"post_id":"cl00tgavc001e28zd7rdk5r99","tag_id":"cl00tgavq003228zd6eh20xya","_id":"cl00tgavs003a28zd6znb77oz"},{"post_id":"cl00tgavc001e28zd7rdk5r99","tag_id":"cl00tgavq002y28zd1ipp0myp","_id":"cl00tgavt003d28zdaaqe0odf"},{"post_id":"cl00tgavd001h28zdeey68058","tag_id":"cl00tgavs003928zdgo175beu","_id":"cl00tgavt003f28zde9cofstw"},{"post_id":"cl00tgavf001n28zd4fak5ktz","tag_id":"cl00tgavq002y28zd1ipp0myp","_id":"cl00tgavu003j28zd51m8805n"},{"post_id":"cl00tgavg001r28zd9n1071xt","tag_id":"cl00tgavu003i28zd55mtej6b","_id":"cl00tgavv003n28zd6bd04juj"},{"post_id":"cl00tgavg001t28zd7wd07exd","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavv003r28zdfykmd00w"},{"post_id":"cl00tgavh001x28zd8vvl391u","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavw003v28zdfkkce4pc"},{"post_id":"cl00tgavi001z28zd7yg3al8a","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavw003z28zd3gvlcc59"},{"post_id":"cl00tgavj002328zd2itf6z6h","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavx004328zd4b6k6p49"},{"post_id":"cl00tgavk002528zdb1tufb6k","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavx004728zdh8rab534"},{"post_id":"cl00tgavk002928zd18vogmca","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavy004b28zd0tuj5271"},{"post_id":"cl00tgavl002b28zd7lvq0v0e","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgavz004f28zd8f7p9bjx"},{"post_id":"cl00tgavm002f28zd561oftij","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgaw0004j28zd092kgbwo"},{"post_id":"cl00tgavm002h28zdahwl9wiq","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgaw0004m28zdb34h9id8"},{"post_id":"cl00tgavn002l28zdgctog5ek","tag_id":"cl00tgavu003m28zdhckof8t9","_id":"cl00tgaw1004p28zdchfk3t4w"},{"post_id":"cl00tgavo002n28zd13o3528k","tag_id":"cl00tgaw0004o28zd34gq71i6","_id":"cl00tgaw1004q28zd37el3m5c"},{"post_id":"cl021zqbq000105zdf7sf7ewa","tag_id":"cl00tgav2000n28zdalgnhdkr","_id":"cl021zqbr000205zd9smu5n8t"}],"Tag":[{"name":"SLAM","_id":"cl00tgauv000528zd1ejw93vf"},{"name":"bash","_id":"cl00tgauy000b28zddxsp8vvv"},{"name":"身体健康","_id":"cl00tgav0000h28zdebex61w1"},{"name":"SLAMBOOK","_id":"cl00tgav2000n28zdalgnhdkr"},{"name":"c++ 多线程 并发","_id":"cl00tgav4000t28zdc5yw7tvu"},{"name":"c++","_id":"cl00tgav7001028zdcm1q0idb"},{"name":"c++ primer","_id":"cl00tgava001628zdc8oagirb"},{"name":"EIGEN","_id":"cl00tgavk002828zdafetgdxi"},{"name":"C++ 多线程 并发","_id":"cl00tgavn002k28zdhdst2vrj"},{"name":"pcl","_id":"cl00tgavp002q28zdauaj1m1c"},{"name":"opencv","_id":"cl00tgavp002u28zdf5b71w8k"},{"name":"读书笔记","_id":"cl00tgavq002y28zd1ipp0myp"},{"name":"心得","_id":"cl00tgavq003228zd6eh20xya"},{"name":"博客迁移","_id":"cl00tgavs003928zdgo175beu"},{"name":"知乎","_id":"cl00tgavu003i28zd55mtej6b"},{"name":"十三手记","_id":"cl00tgavu003m28zdhckof8t9"},{"name":"心理","_id":"cl00tgaw0004o28zd34gq71i6"}]}}